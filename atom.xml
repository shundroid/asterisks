<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>asterisks</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://asterisks.netlify.com/"/>
  <updated>2020-03-17T02:25:18.655Z</updated>
  <id>http://asterisks.netlify.com/</id>
  
  <author>
    <name>shundroid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue で Web Animations をかっこよく実装するライブラリを作ってみた</title>
    <link href="http://asterisks.netlify.com/2020/03/14/vue-animate-component/"/>
    <id>http://asterisks.netlify.com/2020/03/14/vue-animate-component/</id>
    <published>2020-03-14T19:39:57.000Z</published>
    <updated>2020-03-17T02:25:18.655Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>あけましておめでとうございます(遅)<br>10か月振りくらいの投稿ですね。</p><p>高校が休みになっているので、勉強・開発に励んでおりました。</p><p>そこで、Vue.js で <a href="https://jp.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Transition</a> だけでなく、<br>Web Animations を取り入れたい状況が出てきました。</p><h2 id="現状で-Vue-js-で-Web-Animations-を使う場合"><a href="#現状で-Vue-js-で-Web-Animations-を使う場合" class="headerlink" title="現状で Vue.js で Web Animations を使う場合"></a>現状で Vue.js で Web Animations を使う場合</h2><p>そこで次のようなコードを書いたのですが、<br>これは Vue.js としてはふさわしくないですよね。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rect"</span> <span class="attr">ref</span>=<span class="string">"rect"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; active ? 'Animating' : 'Stopping' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"active = !active"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      active: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch() &#123;</span><br><span class="line">    active() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs[<span class="string">'rect'</span>].animate([</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(0,0)'</span>, <span class="attr">offset</span>: <span class="number">0</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(100px,0)'</span>, <span class="attr">offset</span>: <span class="number">0.25</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(50px,0)'</span>, <span class="attr">offset</span>: <span class="number">0.5</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(120px,0)'</span>, <span class="attr">offset</span>: <span class="number">1</span> &#125;</span></span><br><span class="line">        ], &#123;</span><br><span class="line">          duration: 1000,</span><br><span class="line"><span class="javascript">          easing: <span class="string">'ease'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#rect &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>どこがふさわしくないのでしょうか。 <code>ref</code> を使っている辺りが明らかに良くないですけど、<br>問題はそれ以上にあると考えます。</p><h2 id="「動作」で書くか「状態」で書くか"><a href="#「動作」で書くか「状態」で書くか" class="headerlink" title="「動作」で書くか「状態」で書くか"></a>「動作」で書くか「状態」で書くか</h2><p>事を大きくしすぎた気もしますが、根本的な問題はここにあると思います。<br>アニメーションのような <strong>一過性</strong> のものは、一般的には「動作」で書くのがふさわしいですよね。<br>そのため、 <code>.animate</code> という <strong>メソッド</strong> によって「動作」を記述しているのです。</p><p>ただし、Vue.js は伝統的に、「動作」による記述よりも「状態」による記述を好みます。<br>例えば、View上の文字を変更するのに <code>element.updateText(&#39;hoge!&#39;)</code> みたいに書いたりはしませんよね。<br><code>&#123;&#123; text &#125;&#125;</code> のような <code>text</code> という <code>data</code> の「状態」の記述によって、UIの変更を行っています。<br>インラインテキストだけでなく、属性やスタイルの変更、また <code>Transition</code> についても同様に、「状態」による記述を行っています。</p><p>これはどうしてでしょうか。Vue.js の存在意義を考えるとこれは明らかです。<br>先ほども少し触れましたが、「動作」というのは一過的な概念です。<br>つまり、一回「動作」してしまえば、それが長い間ずっと続くようなことはありません。<br>ただし、Vue にとっては、これが長い間続いてほしいんですよね。これはなぜか。<br>まさしく、<strong>双方向データバインディング</strong> を保つためです。<br>データのリンクは、動作のように一回一回の時のみかろうじてつなぎ留められているようではいけないのです。</p><p>このように Vue で「状態」が重んじられている背景を踏まえると、そこに「動作」で記述されたプログラムを書くのは、<br>なんだか異物感を感じるわけです。もちろん動きはするんですけど、ちょっと消化不良というか、そういう感覚です。</p><p>HTML(XML) は非常に「状態」を書くのに優れた(マークアップ)言語です。<br>対してJSは「動作」を書くのを主としているわけなので、<br>例え <code>.animate</code> メソッドの引数で渡されているオブジェクトが状態だ！と主張したとしても、<br><code>&lt;template&gt;</code> タグ内で書けた方がよいですよね。</p><p>というわけで、Web Animation を「状態」で記述するようにしたのが、このライブラリです。<br>コードを見てみましょう。</p><p>※ もちろん Vue でも動作を好む場面はあります。 <code>v-on</code> などに代表されますが、これらで実行される処理は <code>View</code> の背後の、ロジック的な部分であって、Vue でなくても別に良い部分なわけなので、ここをとって「Vueは動作による記述を好む」というのは言いすぎな気がします。</p><h2 id="「状態」で-Web-Animations-を記述する。"><a href="#「状態」で-Web-Animations-を記述する。" class="headerlink" title="「状態」で Web Animations を記述する。"></a>「状態」で Web Animations を記述する。</h2><p>インストールは、yarn または npm で行ってください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vue-animate-component</span><br></pre></td></tr></table></figure><p>または</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save vue-animate-component</span><br></pre></td></tr></table></figure><p>コードは次のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rect"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">animation</span> <span class="attr">v-model</span>=<span class="string">"active"</span> <span class="attr">:duration</span>=<span class="string">"1000"</span> <span class="attr">easing</span>=<span class="string">"ease"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(0, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(100px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0.25"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(50px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0.5"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(120px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">animation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; active ? 'Animating' : 'Stopping' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"active = !active"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Animation, Keyframe &#125; <span class="keyword">from</span> <span class="string">'vue-animate-component'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Animation,</span><br><span class="line">    Keyframe</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      active: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#rect &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web Animation をタグによって記述できます。 <code>v-model</code> が <code>true</code> になった時、</p><p>アニメーションの終了は <code>v-model</code> が <code>false</code> になったことを検知してください。今後 <code>@finish</code> などを実装するかもしれませんが。</p><p>詳細な利用法は、Github レポジトリをご覧ください。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/shundroid/vue-animate-component.git" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="今後の課題"><a href="#今後の課題" class="headerlink" title="今後の課題"></a>今後の課題</h2><ul><li><code>v-model</code> が <code>false</code> になった時、アニメーションを <code>pause</code> する</li><li><code>@finish</code> などのイベントを実装する(「動作」による記述を奨励するようですが…)</li></ul><h2 id="余談：実装がスッカスカな話"><a href="#余談：実装がスッカスカな話" class="headerlink" title="余談：実装がスッカスカな話"></a>余談：実装がスッカスカな話</h2><p>この実装は Github で見られるんですけど、スッカスカなので試しに <code>keyframes.vue</code> を見てみましょう</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">div &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>えっ()</p><p>つまりそういうことなんです。察してください。<br><code>animation.vue</code> のほうでは、自分と子要素の <code>$attrs</code> をそのまま <code>.animate</code> の引数に丸投げしているだけです。</p><p>そんな意味あることなの？と思われるかもしれませんが、大事なのはその変換過程ではなく、<br>状態は <code>&lt;template&gt;</code> 内で書く、という役割分担がはっきりすることと、<br>またアニメーションの開始を <code>v-model</code> による状態変化で行えることであってほしいです(希望)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;あけましておめでとうございます(遅)&lt;br&gt;10か月振りくらいの投稿ですね。&lt;/p&gt;
&lt;p&gt;高校が休みになっているので、勉強・開発に励んでおりました。&lt;/p&gt;
&lt;p&gt;そこで、Vue.js で &lt;a href=&quot;https://j
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「キャンベル生物学」を読んで</title>
    <link href="http://asterisks.netlify.com/2019/05/01/campbell/"/>
    <id>http://asterisks.netlify.com/2019/05/01/campbell/</id>
    <published>2019-05-01T22:25:02.000Z</published>
    <updated>2020-03-17T02:25:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>新年度・新時代が始まりましたね。</p><p>さて、昨日「キャンベル生物学」という太い本を読み終わったので<br>その感想をまとめようと思います。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>キャンベル生物学 原書11版は1444ページ、目測でA4サイズくらいの本で、<br>生物学の幅広い分野の基礎が学べる本です。</p><p>「高校生にとっても最適の教科書」とありますが、まさにその通りで、<br>解説が非常に丁寧でわかりやすかったです。(英訳だからか独特の言い回しがありますがそれは慣れます)</p><p>わざわざどうしてこの本を読んだのかといいますと、高校の生物の先生に勧められたからです。</p><p>最初は割と緩く読んでいたんですけど、このままだといつまでたっても読み終わらない気がしたので、<br>4月あたりからスパートをかけました。グラフにも必死さが現れていますね()</p><p><img src="https://lh3.googleusercontent.com/Yx2AA2EbhD7MKZxEbxISUAVXWIvzcQJ-6Z6POhSC9BDaPS4VgJ5JiDgGODObO4LEl1Gh3md205nD-_eyA4qYRutgg0RxbpCRAH3fZaI5qUvHDcFlu5VeUehu2NRap2Fp_13MY1EKKFz7UisjnznbChWyJJqs4rkyCy4crEh-8O58KJRrkdqm7GjO0j0S1m4vBZbv0MSNlgLqT9iTvOZLM-90-w3fP6cr5lhROrb0BZQ2md8CBAxGFH_AsTG7kKkGs5hveETBooVnbaWiC02cVHYQNE7vx9Wr0h7-21kbFBP4UjPX0-E2fUrnV2M5PTqM8ICXtLKo17-XA8h3y1f2TS1fu6SgftVwuXeDEE_BcHXTC0SAUL5dU_AwGrLx2nX2-AnygeXS3IEO18GLdXw1cbrEoegmA0GmCJTOu0JV45mWf3VSKOty6pDeqZc9FhGA8PSTPkiauTcIQ49H9Ox99vKB2wj5rim4FII4eGMNxxDtPn14oZkPzoVqOFB8tWgNTgupM2euub9WpGuCMeBkOmfabqDqz8QZHXmPjmc4S4Y1IZev6c3yvv_olRx5Wcyos1QsFYb2xiHKi6z1t97KDCg-HbhjtthBE421A7fEzDowAlTeSx7lYoD7buVghH2psskyO_PgvCzPVNu_1bWFJdUMWtDsCMiPJqnV8p-SHNjA0IUH69OF-J_JNn5h0VBEeN3hX2b0aLHnVutknZLZgi5xQw=w773-h464-no" alt></p><h2 id="キャンベル生物学のよさ"><a href="#キャンベル生物学のよさ" class="headerlink" title="キャンベル生物学のよさ"></a>キャンベル生物学のよさ</h2><p>全体的には「学校で習った分野」と「そうでない分野」に分かれていました。<br>前者は動物の形態と機能などで、復習になったほか、新たな概念などを取り入れて学びを深めることができました。<br>後者は生命史などで、少し負荷はありましたが、そこでも既習分野との関連性や相似性が見えてきて面白かったです。</p><p>次に、それぞれのテーマについて感想を書きたいと思います。</p><h3 id="ミクロ・マクロの視点の推移が面白い"><a href="#ミクロ・マクロの視点の推移が面白い" class="headerlink" title="ミクロ・マクロの視点の推移が面白い"></a>ミクロ・マクロの視点の推移が面白い</h3><p>「空間としての推移」では、生体分子の構造という非常にミクロな視点から、<br>細胞小器官の構造、細胞の構造、組織、器官、個体、個体群、群集、生態系、と、マクロな視点に移っていく様子がよく理解出来ました。<br>「時間としての推移」では、遺伝的変異の頻度変化（小進化）がどう種分化（大進化）につながってくるのかとして、<br>「ミクロ」と「マクロ」のつながりが捉えられました。</p><p>少しそれますが、進化と生態系は相互作用するので、ここで「空間」と「時間」のつながりも生まれます。<br>生物学は空間にも時間にも広がりを持っているのが強く認識できました。</p><h4 id="生命のフラクタル"><a href="#生命のフラクタル" class="headerlink" title="生命のフラクタル"></a>生命のフラクタル</h4><p>そこで気づいたことがあります。<br>生命が「フラクタル」のようであるということです。</p><p><img src="https://lh3.googleusercontent.com/Q66Ghm9nKn0aSNRN2K8MHkEjel-IOChZd63N3Qu0aac4oK143XDmhBGk2ToHvBZhCTNlz0ArFgFn1LNSUhDNHGj-zzgi-L-u1IrkzpFHwvZa7ZXQ08r0k5A861p8eY5QpM_87HtVlHAw9L3OP4f240YkvgOAHiCfISCe-Xx5j2csiwc0t156QqKJgEdBP5vIb8RzDFYYkrzY1_8PAah_ucDFVGUavz9mvO_hBriZPDTNFZ9uhJcvIFdTwV9NHiIPEA04U6NutIY7vkyCt50a0EwoGA5IBQV8Qo7KmKUKAF4IdzIE91Nha2PNYNWZEMWFcldsW-I-BzE64PHpzJFPCqEAVfjOH2CAN7QkYyjppZIamr_XbrFvG-2fE00YwDPxeE-kWkqNLMk9wqptCIZeAswY0DIuXlflDaX2Ug1lbYiAUPOZRmwB_fpPhSpxwSazqoyj2lEvbzlBC_axjGU-XHy9GN-SC-KhODIkPfECn7_jjbs1QQhwO8Gr_mQfrqdblXoXxUtMeiS9hStBMwUFUiqMZCPW-wvIA9eDtNWj3tZ3x-17U_tgyNuMyGq-M-TFrzW9YIMh-BKdxELJX6_9moCAcqRhNWlCfM9AAMkIYS05d-9K4WhR_EVvjREPesFsvYr8I6O1Iag7eD3ze0NXJjvNeL4jeU6xYKE4-o50eiMP6ET5k3s0Q29O6gU_Mucs-Kpp8XHjo-Pq-s_C_chxlW8yvQ=w704-h966-no" alt><br>(部活の先輩が作ってくださいました、マンデルブロ集合)</p><p>フラクタルとは Wikipedia によると、「部分と全体が自己相似」になっているもののことだそうです。<br>これは生物を通しても言えると思います。</p><p>例えば、空間としてのフラクタルを見てみましょう。<br>ミクロな視点で原子に注目します。原子は光を吸収して熱を放出することが<strong>多いです</strong>。<br>これをマクロな視点で考えると、生態系全体としても、やはりこのようなことが起きています。<br>生産者である主に緑色植物が光を吸収します。そのエネルギーは生態系内では化学エネルギーとして循環しますが、<br>生態系の外に出される形はやはり熱が多いです。</p><p>時間として考えてみてもこのことが当てはまります。<br>少し広い例となりますが、細胞は分裂し、死にます。また個体は誕生・死亡します。<br>同じように種は分化・絶滅します。<br>これらは同じような表し方がされています。p1194の細胞系譜や、よくある家系図、また種の系統樹は似た形をしています。<br>固有の例ですがミツバチはその個体群自身が一つの個体のようにふるまいます。女王バチが生殖細胞に当てはまったりします。</p><p>無限に続くフラクタルというわけではないですが、部分が全体に対応付けできます。<br>あくまで見方の１つですが、どうしてこのような見方ができるのか思うと不思議です。<br>１つ思っているのは、「全体」は「部分」より後にできるので、「部分」が環境に適合していた形態が、そのまま「全体」にも引き継がれるのかなっていうことです。<br>これも環境適合的な選択圧を受けているのでしょう。</p><p>本書にはこの視点の推移で「組織化」や「創発特性」という概念が取り上げられています。<br>創発特性は抽象度が上がる（＝よりマクロになる）ことで新たに特徴が生まれるということです。<br>例えばニューロン一本ではこうやってブログは書けませんが、組織化して脳となることでブログが書けるようになっています。<br>組織化により個々の特徴が再び現れること（＝フラクタル）と、新たな特徴が現れること（＝創発特性）の２つがあって、<br>それぞれ大切なのだろうと思います。</p><h3 id="分野横断的な学習ができて面白い"><a href="#分野横断的な学習ができて面白い" class="headerlink" title="分野横断的な学習ができて面白い"></a>分野横断的な学習ができて面白い</h3><p>読み進めるにあたって、生物学は様々な分野と連係しているのだと気づかされました。</p><p>例えば、統計などでは数学、化石記録などでは地学、バイオームでは地理、代謝には物理、環境保全では社会系、<br>シミュレーションなどでは情報、といった感じです。</p><p>生物学から見ると様々な分野とつながって、分野のカバー範囲の広さを感じさせられますが、<br>逆から見ると、様々な分野から生物学につながっています。<br>これは、私たちの生活の様々な場面に生物学が絡んでくるからなのでしょう。事実私たちは生物です。</p><h3 id="個々で興味を持ったこと"><a href="#個々で興味を持ったこと" class="headerlink" title="個々で興味を持ったこと"></a>個々で興味を持ったこと</h3><p>色々あります。</p><p>最初の方では<strong>代謝</strong>がエネルギーの吸収・放出で表せる感じが楽しかったです。<br>化学エネルギーって（少なくともここでは）電子の位置エネルギーなんですね。<br>ATPがどうして高エネルギーを持っているのか、そのエネルギーをどうやって酵素等に付与するのかがわかって<br>もやもやが消えました。</p><p><strong>ハーディ・ワインベルグ平衡</strong>や<strong>個体群生態学</strong>では数学とのつながりが個人的に好きでした。</p><p>最後に<strong>ガイア理論</strong>です。（本文中ではガイア仮説）<br>これは結構気になっています。先ほどフラクタルの話をしましたが、なんと「地球全体」を１つの生命体と捉えて、<br>そこでも恒常性を維持する働きがあると考えるそうです。賛否両論あるそうですが。<br>これから調べてみたいと思います。</p><h2 id="まとめ・これから読む人にアドバイス"><a href="#まとめ・これから読む人にアドバイス" class="headerlink" title="まとめ・これから読む人にアドバイス"></a>まとめ・これから読む人にアドバイス</h2><p>ただ知識を広げさせてくれるのではなく、それをもとに色々考えさせてくれたりする本でした。<br>忍耐力と読解力も上がったでしょう。</p><p>これから読む人へ<br>多分本気で読めば1か月くらいで終わります。僕は半年かかっちゃったんですけど()<br>あと、個々の章の話をそこで完結させないで、他の分野とのつながり、を意識して読むと見えてくるものが変わります。<br>結構疲れますが得られるものは大きいので頑張ってください(小並)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;新年度・新時代が始まりましたね。&lt;/p&gt;
&lt;p&gt;さて、昨日「キャンベル生物学」という太い本を読み終わったので&lt;br&gt;その感想をまとめようと思います。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nuxt v2 のビルドが重すぎるので軽くする</title>
    <link href="http://asterisks.netlify.com/2019/04/01/nuxt-v2-speed-up/"/>
    <id>http://asterisks.netlify.com/2019/04/01/nuxt-v2-speed-up/</id>
    <published>2019-04-01T17:51:40.000Z</published>
    <updated>2020-03-17T02:25:18.652Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。<br>記事を書くたびにお久しぶりになりますねw</p><p>早いもので高校に入学してから1年になります。<br>この1年はプログラミング以外のことにもいろいろチャレンジして、<br>充実した高校生活を送ることができました。</p><p>クラス替えがドキドキ…</p><p>さて、今回は割と今年(少ない機会でも)愛用した <a href="https://ja.nuxtjs.org/" target="_blank" rel="noopener">Nuxt</a> のビルド速度を<br>向上させる方法を紹介します。</p><p>あ、そだそだ、今年はプログラミングを目的にしてプログラミングすることは少なかったんですけど、<br>割と学校の発表で(Nuxtを使って)デモアプリを作ったり、ディベートの授業で電子投票用のシステムを作ったりと、<br>「手段」としてプログラミングをすることが多かったです。</p><p>プログラミングのスキルを身に着けておいて、できることが広がったので、<br>2020年プログラミング必修化で、よりプログラミングが普遍的なものとなり、<br>学校での学びが深められるようになるとよいと思います。</p><h2 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h2><p>Webpack の <a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="noopener">hard-source-webpack-plugin</a> です。<br>これを使うことで、ビルド時のキャッシュを取ってくれるので、二回目以降のビルドが爆発的に速くなります。</p><p>下の「参考」の記事では、DllPlugin というものも紹介しています。<br>しかし使ってみたものの、hard-source-webpack-plugin と比べると効果が少ないので、<br>今回は割愛したいと思います。</p><h2 id="ポイント"><a href="#ポイント" class="headerlink" title="ポイント"></a>ポイント</h2><h3 id="webpack-config-js-を-nuxt-を通していじる"><a href="#webpack-config-js-を-nuxt-を通していじる" class="headerlink" title="webpack.config.js を nuxt を通していじる"></a>webpack.config.js を nuxt を通していじる</h3><p>実際に上のリンクの readme を見ることで、生の webpack への導入手順は分かります。<br>が、今回は nuxt v2 で行いたいです。つまり、webpack の config を、nuxt を通していじる方法を知ることが大事になってきます。<br>これが分かれば、おそらく DllPlugin の導入方法もわかるでしょう。</p><h2 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h2><h3 id="プラグインの導入"><a href="#プラグインの導入" class="headerlink" title="プラグインの導入"></a>プラグインの導入</h3><p>yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add --dev hard-source-webpack-plugin</span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D hard-source-webpack-plugin</span><br></pre></td></tr></table></figure><p>※ <code>i</code> は <code>install</code>、 <code>-D</code> は <code>--save-dev</code> の省略形</p><h3 id="nuxt-config-js-の変更"><a href="#nuxt-config-js-の変更" class="headerlink" title="nuxt.config.js の変更"></a>nuxt.config.js の変更</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'./package'</span>)</span><br><span class="line"><span class="comment">// 以下、追加</span></span><br><span class="line"><span class="keyword">const</span> HardSourceWebpackPlugin = <span class="built_in">require</span>(<span class="string">'hard-source-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// ここまで</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Build configuration</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> build: &#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** you can extend webpack config here</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  extend(config, ctx) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 以下、追加</span></span><br><span class="line">    config.plugins.push(<span class="keyword">new</span> HardSourceWebpackPlugin())</span><br><span class="line">    <span class="comment">// ここまで</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>予想以上に簡単でした。今回薄いな(確定)</p><h2 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h2><p>yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn dev</span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h3 id="１回目（キャッシュ未反映）"><a href="#１回目（キャッシュ未反映）" class="headerlink" title="１回目（キャッシュ未反映）"></a>１回目（キャッシュ未反映）</h3><p><img src="https://lh3.googleusercontent.com/sFFqfshR7YA3_V95ObkPaZk0cCXpgHdIK16XA4nVFX4iIYY5Ii3XoWnCoIPbJAAqRWnuiXvHHoDYWH6LkaOjN46XCV6KWPMbtpr-QwFKvvCraXZ7JJ0Jwu3wPjRxBYqBjIQvmSyzTReSSNT1oPOPqpf0VLJIYO_ywYOM9hj3gRcmuY13N1MKlvb-fa6Aq6A7tL9Whi-xGJn1e_KKfY6PCZqpwNHTWBgt67R-ie8ewsv9wfYegGSLC2Bj8YS2988m4ju3Q9OxCJBTnlm4sBzGIQnLjCmEkmQ3Izd7o2pKCW90ip01Am95NPN4lm1jsEKy1-djQcG32gnhx02_eI3PIMa4_AxH1EAqNE8c2H6ZNlR5SEoIZEUOxaPahXC-_D-Okc4lmfw5tRQOFwU6gu6KYKGxfNYXoYljtHUdmWSCPRN38RoN28HVQ2JkX8bmRACZDAm24sE29HYS19dYCBfrcDm32l-mTKB_4tdsGhUiXb4T2CF8X04D6oWDt3rjq3a6VeGBs_Q4uOWXQSml6Q5EebhHiBbrd-BihgjiRyyWP3UVJOxkWVRQzcHO67dlw0asrsh9iZ4QDjJZkNQJ2E8_Fi8mEdg5mahhjt2CuXMQzA6PKmioBst5sQ_wlFa28Bu_nqn1XlHfF1Xzfi5Qr3pNqFIQsL_719Zno179I1FK7KscZTXZ0RmyQ1KMle3O2JgagI_PCVexW5KFmesVhNKmgQ7C=w592-h324-no" alt><br>Client 側が 1.27<strong>m</strong> です。単位はm。つまり分です。<br>Server 側が 58.34s です。遅いですね。</p><h3 id="２回目（キャッシュあり）"><a href="#２回目（キャッシュあり）" class="headerlink" title="２回目（キャッシュあり）"></a>２回目（キャッシュあり）</h3><p><img src="https://lh3.googleusercontent.com/YUsf51JNmr84RQXr3ubQRNWIo4nmTcVEATw0FIynuA8O1wUGI_iE7iNGzi0mepc1mJQa38rXKn9s8LllAQpV4oSHhtoqVfieBEuBE6ZPUj9kcRqPv-aR14KBuDMiCPA-7wvoPO0jbcSfAoqBIUxVmTyQQIODbATgwXhXK7V7RJZuXaRse3evEeewSRp5o83fq_82xRjrwBREXCeiuaP4e6e-raAHSFutOspADJey3GQfAWYZGzwRMv5NeHziKuK_he-Bbe1JVyXecy4hEg4FJhyT2dZkQsuXUgqIyguNbHXgj_2ynmbrvABbiO99ALHwv3gl4hD5IdERhp-UiNsgxuu_xTAbG3j4F-DSeU_GA362mpJWjwdts9pF44Q0myss37edNkGeL6yuX56c8G5kqaKYfb8okR-5lRQm0VZM07EbGyvGqBqHiCixh2Q3ycrNOPCvY2-7ftRy4PuiOJ_xcN6XQl3YZTe9fZxq37wdHnuwEY9ko5xIejQRbHS9p5FQUOyZgQ_Y_W0x5Yp-hOLMgrXpIUHzuVK6S1F09wHAWqP7kv4IsdVe7d5C5ndUVx6UqoyHhY_L1cc3KeRYmdIT5jdmkRLVA_xq3dbsDLuUz5Y8vpjDPsVZnExWnhJIMMA4PuXhzbUHFgslhRHHOg3F6JTas-Ad9mm3hM6m1Njtpxdl_E2vYfODb00g7BBghkDzVre1YwPnPCfgTYDwXG4oboL8=w550-h301-no" alt><br>えっ速い<br>Client 側が 2.14s、Server 側が 34.45s です。<br>かなり速度が上がっていることがわかります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これは頼もしいですね。<br>Nuxt は SSR にしてくれるのもありますが、<br>実際 express のサーバーをセットアップしてくれるのがずいぶん楽なので、<br>使っています。</p><p>これでより良い Nuxt ライフとともに、新学期を迎えられそう！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://qiita.com/kmdsbng/items/d23f9b5f5fbc8869baad#fnref1" target="_blank" rel="noopener">https://qiita.com/kmdsbng/items/d23f9b5f5fbc8869baad#fnref1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。お久しぶりです。&lt;br&gt;記事を書くたびにお久しぶりになりますねw&lt;/p&gt;
&lt;p&gt;早いもので高校に入学してから1年になります。&lt;br&gt;この1年はプログラミング以外のことにもいろいろチャレンジして、&lt;br&gt;充実した高校生活を送ることができま
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>フリーで使えるクラウドIDE「Codenvy」を使って Vue.js の開発を始めてみる</title>
    <link href="http://asterisks.netlify.com/2018/11/09/codenvy-vue-starter/"/>
    <id>http://asterisks.netlify.com/2018/11/09/codenvy-vue-starter/</id>
    <published>2018-11-09T21:00:53.000Z</published>
    <updated>2020-03-17T02:25:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>高校生活が本格的になってきました。楽しいですが忙しいですね。</p><p>さて、今回は、友人とアプリを１つ開発することになりました。<br>そこで、環境構築などを友人の pc で行うのは手間がかかるため、<br>その必要がない、クラウドIDEを用いることにしました。<br>使い方などを記録しておこうと思います。</p><h2 id="サービス・ライブラリなど"><a href="#サービス・ライブラリなど" class="headerlink" title="サービス・ライブラリなど"></a>サービス・ライブラリなど</h2><ul><li><a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a> : Web アプリ開発のフレームワークです。最近ホットになってきてうれしいです。</li><li>クラウドIDE : クラウド上で動くIDEです。環境構築の手間がいらないので、スマホで動作するものもあります（codeanywhereなど）</li><li><a href="https://www.eclipse.org/che/" target="_blank" rel="noopener">Eclipse Che</a> : クラウドIDE の一種です。あの Eclipse の「Next-Generation IDE」だと公式サイトには書いてありますね。</li><li><a href="https://codenvy.com/" target="_blank" rel="noopener">Codenvy</a> Eclipse Che をホストしているサービスです。</li></ul><h2 id="Codenvy-と他サービスの比較"><a href="#Codenvy-と他サービスの比較" class="headerlink" title="Codenvy と他サービスの比較"></a>Codenvy と他サービスの比較</h2><p>同等のクラウドIDE サービスとして、AWS Cloud 9 と codeanywhere が有名です。<br>それぞれのサービスの特徴をあげておいます。</p><ul><li>AWS Cloud 9 は一番有名なクラウドIDEなのではないでしょうか。Amazon が買収して<strong>無料で使えなくなりました。</strong></li><li>codeanywhere は「anywhere」というだけあって Android などスマホ版のアプリがあります。しかし無料では１日2時間までしか使えないという制約があります。</li></ul><p>Codenvy は無料でわりと高機能に使えて、さらに友人と開発するのに必要な「チーム開発」機能があったので選びました。ただしバグが少しありますね…。</p><h2 id="Codenvy-を始めてみる"><a href="#Codenvy-を始めてみる" class="headerlink" title="Codenvy を始めてみる"></a>Codenvy を始めてみる</h2><p><a href="https://codenvy.io/site/login" target="_blank" rel="noopener">https://codenvy.io/site/login</a></p><p>ここにアクセスして、アカウントを取得します。</p><p><img src="https://lh3.googleusercontent.com/fgn2IlNpZzRnc2cxbqLFx5ZVn3ncPLhzZZWXA0FKULyCWJHpz084pmQAlEPRTJlPg3qUy1jFnjhzQ9hpOnPHOmsY0IPrrb-tGKuqwizXsVqb7TUHKuUeOQU9RpxH57NMNUtHZfOGJtPMs4TqjCgOj7mMz7HHa51s997Je-aYcbkWGE3JWLqZR12nZDJnfB-CzrGzOwKwZp2gCOVBKs-5iJYZ9KMu2Eq7AYXdj2nBmRzWh-8YihneVD9rNk73Olo5SsaGMG-wo0cLdjTqjKphTWBAPvuFyg-VSN-CgCNT1GP9M97ehNVh9YIjdbG9tnkD56hNv8LPYR0Rk7vdq_5St0NF5bqBoFx6VP5dfXMt5Fg2Cdi8grFIbB7Au6T_JLUKHC30Aj1agEpLbKGGLa368SeJxSUGiX_tA54F_lPvsWBaOY4k73GZV8MhSgDmQAuy7tDiz81GU4oaY5GaisqrIt7rrrMITIQW1RmXJIEs8sjguf9m2kffA2zqAcv4NdYys7XMBv8YR-WHnppaE3KYlGtcLnZ8z5s8gfICs2msiwIzUDJhBUTm2C06r4qD6zOtlgWkoAI4XMb_YIdAReGj4Gjx__AniU5vCAGde4iROcIIjgaVUrqXHQwZeyco8inC9nW5k148UGV61ELvyLU2A_1_zlPUASAdqZKadxdABLD2ZJjJmzWI2PVKEj01PTtV9xJ6auRI-91Owgb2g7eNR5eL0fMabcXgM4nk=w1304-h814-no" alt></p><p>そうするとこのような Dashboard が開きます。</p><h2 id="Team-の作成"><a href="#Team-の作成" class="headerlink" title="Team の作成"></a>Team の作成</h2><p>今回は友人との開発なので、まず Team を作ります。<br>一人でしか使わない方はこの節は飛ばしてください。</p><p>左側の「Create Team」をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/team/create" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/team/create</a></p><p>に移動します。</p><p><img src="https://lh3.googleusercontent.com/NWGxSw6vjq6KxtNYgsqgt68mpxi9hyL-cq3M5rWtsmRyQqWDEsaumnuqNmAs-07Ctc0F1358IxskVNC6OuCnbqBkbASif3ZZMAmuoWxoHfM0B8-6-xcW9rwUu7VqO45zz7oS5ImAn_LvuaIg1p6WMqDrKAU7HezXdlVN9kUnSjaOQrkGx-4iWIRlpPoVd3C56MSKq6rHtQCaFZglOxdxuKPrl6q_Bui3yELU1-FgvTHXJDL9mAi6YW_a2-2NELVW5trk1fwS30ls4Ih1SqbjVYbbR21KzhPR1ZPZUBUbUYvte8t-KC49gSK_e0C4ejzwiZR0G3iggYTs6MncUAwZppD5reMEQcKZl1O4rjO9jcd7xMQymgX6wqr__fVx7Lh4G70Q9Rswjs6UBWCrjeoidLI1TaOYzFb2xpoertmnRm0u48Hadb8isaQXSIt_lzHFv17DGjVsrlQuaYSDwvcItF2wHrJg4_GuRO4bDbo3n9_8IIF-Fyh0YTfcNLdaYnXhETvjXJhQTJreqyv_mtvvBBdwnd1HpULk3SpwMLWTo5cY-PtPI_pN_LJxprpdSYcuAyPrFkzLNOVbtFZpLhT_-YR_h2oNOjBSaUyA7JXaU16Z31v283DAoe_FkjxfmQC_0pOme_-8uEDNDi5ADUjQSiXOvKSWe4f69FscyAXE4o1rLRm_6zHt07YMBPgqp6RP_5tmjzrikt7oA2BZMUGbnZiiy4q_vV8jJRl4=w955-h484-no" alt></p><p>チーム名を入力したら終わりです。簡単。<br>メンバーは後から追加可能です。</p><h2 id="Workspace-の作成"><a href="#Workspace-の作成" class="headerlink" title="Workspace の作成"></a>Workspace の作成</h2><p>左側の「Create Workspace」をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/create-workspace" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/create-workspace</a></p><p>に移動します。<br>後はウィザード通りに進めればよいのですが、<br><strong>チーム開発をするときにとても気を付けなければならないところがあります。</strong></p><p><img src="https://lh3.googleusercontent.com/m71ZlwbQKpO7yVfswBNm4UIiu373h2-XNvjZjGFk7EdhFUN4VRrAevCR5zNm_rE9aS8ZylB8PlRJ8aa_7ESHJMg0WhoUg-aSxio4L6KfPOYjE2AT7lPNp9tquu8Kkt1-qGPB7a0jPn6PTHGKPj9DjL1sjdb0uEEJj4j4VRxKlinJxPnCgYRuBDuR6QV1EI_B5m3ZODPBk6TtXgm3Be0oSVEzKUNYP4vHHhdRyE-pZ6rcRnJMUr4gW25udmBACmf1jGrY0h_Sf937w1DzE4GMYSXg2GZ9oSY-j1YzurTlUr8PdXkP9XcPKlbsJWhd_F6HKIoipdyn0eJ61FhDV7nOtgpd1TKXTBC-_42qZCX4lTjk5mvjCi0uRAVonN9TeMSqI9qvOd2L0udkXR2NhK_zW0nFQDUF3SGYDOtGLDcVYyp7WvLr1az_7dI8Dzd_qThPazp2jt8oTyXX_iPzHdt6Y5nSBUgYqVSRKe3GAzzCcGlSurbTS0yCD8soFxRIjRV_Cf_whdF8ltZFDra_ueGU4We--rIJJGeYhhYGU4VQ6FYwxLXO7Dy9ed5GyBOgaVk0yPkOt1oQJJRWBkau5FUTI90EwhgzspEIW5e5FQDjT_w3ayQmBbJBxx7WchEK8psd02dz-jBUO14dsfTPbbLmvNTVnro6JVFI7RkNMg0GumFfILoZinHqys_-P8UJiSiuDDZkwO80P33U_wPgQALW9NOoU7rap9wbollw=w477-h125-no" alt></p><p>ここでWorkspaceを紐づけるTeamを決めることですね。なぜかこれは後から変える方法が見つからなかったので、ここでミスるとWorkspaceを作り直す必要があります。</p><p>Stack は Vue.js なので <strong>Node</strong> を選択してくださいね。</p><p><img src="https://lh3.googleusercontent.com/i7_xvQYr6BRphI4eEChaNCkdYoFnEG-k7RGjBHQ9WH3ZbiTEdhoZbn7VztMpbua0bAPp13HCSespKJUObOivB7f8mXNOPlW2watZ-BUWJl5Doy10bPdAb_VpApRJbuY_pAv9_3cwTj6BJbwAx6Km0v_F1w2gHkld5brLadeFyqsOWoVoM9arSjKF5srP-iE62soaWkIdxY01TC0AUp8rh4a6zqGdwOAKCawshYRtWje9pTIoT4RqLyFGv4uvfEMtDNZA4_RNkpWsmH9EQSR3vuKRYc9hqGzvTLR9Od7M15M3g5Xnv232vKQnw5X3G0qZdq__05_CCUKLu2ip3OzchCdwwGx7sq6GtuFPsbADWnRigexxdAphAV2GGMxO5ehKa7HcpSe5aSQM11YpjlIDQuh_YOKd9JZ5U7MYjDFx2rR7YWQUnzhrYs8YqtvLtpPWlc55I314cMkfGq4H-vwIdhvNM4qLKgSHcMTXeDjQJgrVr6oJnqOx3NHVLz4BxDeiHFi7oPBGODH0Sg0Uy-MmcVXd0I6NCr0rSFS-IQ7MbcOEdkjZ6F7wkI9dmbKT6-PlXOnwQl9mI3o3vU9vyOSYbURWydW8tdgcsO5h610y1ycSOS2AxTC14PgJ6j9d9bvEUNcyaUo3h0ezNjvb3sxpPXQAxUFG3oIAjqnpPrYoXJCXsZWc2ZH8syZjJTfJuOc19IcS-Q5xJpJgHGnQdsmhuIBN5xHnvPh2JFyc=w1079-h207-no" alt></p><p>なお、この Projects のところからは Github のリポジトリをインポートしたり、<br>Git を選択すると非公開の Bitbucket のリポジトリをインポートしたりすることもできます。</p><p>Project は後から Workspace に追加したり、作成したりすることも可能です。</p><h2 id="Workspace-を-Share-する"><a href="#Workspace-を-Share-する" class="headerlink" title="Workspace を Share する"></a>Workspace を Share する</h2><p>チームで Workspace を使う際、なんと Workspace を Team に紐づけるほかに、<br>Share という設定を変える必要があります。</p><p>左上の Workspaces をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/workspaces" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/workspaces</a></p><p>に移動します。</p><p>Workspace を選択して、設定に移ります。</p><p><img src="https://lh3.googleusercontent.com/IDGXYtM7u6K19ChPjiLnXPe-aoNqGNXedy6i88yqCLPj9t92a4QpkeNKsbGIWKqknx7NFlX19nG6WYYEKnGi7B5b28S9488_p7oHet9sEFgMKUMpIdGxgGnwgzOa0WRw2nP9wlyYDY0UkvMus3STZ1nOVfGRjZfrqZoQRR8-sjOQvl0f9YuJGtNdcmCDimE3bs4eUuxjc72e5B85ziGjqoazOcaIc_b5l_3Dvz7eiFceEIGosEaroPVkn--RC31yaBnRkAUwkhtLyoUBfgqwH_O19l3vugEWZC0Qw2dLBZDkLzHItYPwEOEFaRw7QWA5MNvjiKGqL8hwJp5lAR25nnzFcOM_L4EhyQM78dBJEASwOMdK6-zNElbhDLboblRoORSj-p4wPdiuku_pfLd9SJOgVYGf8MhuwDUq9tb8LJ-YLNxrHxQkObPtr5ogAT2bqPdxtcCttZR4cyzyFPct2QyIeeAdKPSUhwgJG1ns-d_Lx0SxPerBpqweLHkK50xY_F-Ci_VlZOyVxjKidweR6PBCJj2M57YbIFU7nvssWSO49SxwqpW9r3QKe2Fzih-WMSR-FClK11rZLoLjXx5ZShza3jWl-kM0Dc0PxGKTjCyZXynNHKGG7RKodkIMDIeyFkzEgc75nxNlSSFk-B5cKJke8VuGUNxsTkHRzVfR0cwH2zgRatIpWrXlMKg_MuL0CQlmRvrkNgKjEaUoMHtkfFy10OqKSfwa6vCS=w887-h386-no" alt></p><p>Share → Add Developer を選択して、Workspace を使う User を追加してください。</p><p>ここにつまづいて１時間くらいとられました…</p><h2 id="Port-の開放"><a href="#Port-の開放" class="headerlink" title="Port の開放"></a>Port の開放</h2><p>Codenvy ではどうやらポートごとにサーバーが割り当てられるそうです。<br>例えば、9000 番ポートにアクセスするため、3000 番ポートにアクセスするため、・・・という風にそれぞれサーバーが設定されています。</p><p><img src="https://lh3.googleusercontent.com/qwvXsXdnG4HjbxNkoxDPBCBVd8x7y-Dxz67jU1Tuz4I9h4mj-15QzcEdhvmzMxBQFEwXpLmGZjDN1eEsOKo7CVLpbXoYGwu0lRk2I6YFYbN0UrUNr3Xgo6zvlWsfzUmmemiTxDFjhpvQGq7jdH2EC-h6vQlyIrAU_L1i2NZ98uPNIzzBchH2a1fZXvYIwye08CWq30BRtqYkVbqLS57E8fgKL5LksAHDDsxtgIkDbB5NJ8PiNvsK7kM7KmihUxAm5Od6JPFES3ZeJ-68R6AcSsNuAJ00ulwP-ZvpMEnMzKT09kuKa4ktL9Q9hXbAjdyeLX0lGNPuthCn2UpCsx3u3Q9xxnB7nq_eyUtfiQNN7wUUvGwgNh8CpDomi2EL_2fpomiDlc-JOOPDzZO7-kFumNAUDwiBuwvuRFhAv9WLDhu_eNrKAozoLt9eumzHiz-LiLMoAf0V3DkEq9vlnEBTtIqTqXNVi5bag7Ggz66HSQQaBy63olBdLo9PAzWJ6KdrBq2dZqGcQ7skZvt4XR3BcrbJSCVObATM2yV61b3X0uIaC0qRBThxOICsJDAKF7vNETRDu0laDeboQqv2fyDsjeWnH37y63ear5elREO67YUWXDN59TuAFb__vKQbslqF-yld-Noie0IiGuUlFvCGINgR5M1nUn8rn-JPib7vuLV4mJnbD1wRgFOIzCVlLajOxfuMyFvNsS07mQoEn7GZuI741AR-NQQcredq=w561-h713-no" alt></p><p>デフォルトでは 9000 番や 3000 番が開けられています。他のポートを利用したい場合は、追加する必要があります。</p><p><img src="https://lh3.googleusercontent.com/iWE_qQl-G7F5yqujX08qyXPKSWHCW0pm3kSn8CtXgvkMlNT-9xUhHYgK978tRmpLPwBXh6sZcoT66NCU1nuUcNLh5SHMzui7tUROAQxAJnJEOffFnNOjAEDibv47LAMBm-woC88RExopg4-9qbR2fCNt-xQArBBEoRMN-MLob5rA1qqUnOE9lhYu_43k7-ty6NqeFuTgDz0oDyRhPuo_7sH5ccM8VnC333HEcajE9SAaZFTA-zLApw5k3bdFSvHci9GDSOYJuFOzpOv91Xe_-85A2aWYLXTCQW32ZvuXTd7ACHmmVOCFayoZGcfiWzQbahEXT0OCikZ9OSXjjU6LuLHecgBUAF0Y3_F2P0TPD_YXpfbgVYvfO6boV672CNES5MY01BE-qBAuO9f13GYNH2jUZWviNMZ5rx1Q2V330Y5u9968zC-WvMSG8akNI-AsWrwjTgZdtbLhkondhsMm3p-zLLPkYZV8Bij97lb-CjwKqjNMLWE5tQosE7OuFoIZr06GGXu4cpfxOjvrwfLKCNwZnDRkf4EwEWgvytD6aOBZOpal0u2bvXXv_mHVQmcEB_Nlj0-cimLHWtROdXQ_lPVw9JevPqNuwZIuikjlwk3J2JL6u1IN4Y67qLrhday2UxQU90Bipp1LUBbsSls_M6Ht5BLmxfG_GxVSmRLl_2gOiQER4LGdpZgUA3kVJXcEp3zb6S0kgYcUyEiN8dNQ7KMuyb9fMtVl_npB=w895-h202-no" alt></p><p>Workspace を Share するときの設定画面に移動して、「Server」→「Add Server」から追加します。</p><p><img src="https://lh3.googleusercontent.com/Co_2szRNmm1XNSqYEuQ4ea9BVBbS4y89Ghkn7KZ48hAXROlzpox9Id66sXWASijTTYjFfj-jogw7xDiU55ium-9UYQKObg4wma3elzExZgD3h1CGMHLsLd7XzKocvzT7IuMKhF1jbQQPqFPYNb3C-XQE7jJoJCE7mLFAK_lSRLCNj4a-qI60gDjQ2jU4VEpqrosU5hsTnoD8lJc-z9B45eAN9NsVT0uyGcCSBuzbb8ktGb67w5KcELo1KLLZszWHsDKIx1Xt2SQJ-XdCwhC8Y9_oC4UaBsddR4V_bLse2EWipX_Oo165L_e4I0aYbvK7wRFxRPImmtk78qlNxTsiosEahukBY0oSJs3LzCV6vgwGNy60tfmlB27uN-_HZ-jfzokb0v_AsE8PerSpT6cYqYpl4NGkBZz5ghzKptHqy4WhJsma8mt8qtjwST9_J6ycUGPQNqN8g0iHUcvB-_1mNBOGHPMm8zcImVbiNC5jKx9Jxu_ir50ls4ezkmif17wVrj-WBOdXJSaCR-cVOzBcGLuIaInnnR-arTybA0NtWby9NiAPnx0RrcyFBn_yjS70nfETGJqpxqS46GOL7HoZdTD06qzZdcB9zS_b4FcNof6bkMMgGPkCqN_HbEga5ITq0nLN6ABgz8wMYLrCNdLWnCIBzzhrDbmOMN-7mioIr1rrcklAj6y0KInN3zmrG0c9FvLK37oGrev6hY0CqTxDOvpnbFacIaJVnHf7=w595-h290-no" alt></p><p>Reference は何でもいいんですけど例えば「node-8080」、portに開放したいポート番号を入力します。（8080など）</p><h2 id="Webpack-の設定の変更"><a href="#Webpack-の設定の変更" class="headerlink" title="Webpack の設定の変更"></a>Webpack の設定の変更</h2><p>※ここは vue-cli v3 を利用して生成されたプロジェクトについての話です。そうでない場合は適宜なんか補ってください。</p><p>僕は Bitbucket から Project を import しているので、それがそのまま codenvy で使えているのですが、codenvy 上で vue-cli を利用してプロジェクトを作る場合は、ターミナルを開き、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i vue-cli</span><br><span class="line">$ ./node_modules/.bin/vue init webpack &lt;プロジェクト名&gt;</span><br></pre></td></tr></table></figure><p>を実行してください。<br>ターミナルは下のほう、もしくは Run → Terminal から開けます。</p><p>Codenvy で Webpack を利用して、App を実行するために必要となる変更は次の通りです。</p><ul><li><code>host</code> の変更</li><li><code>disableHostCheck</code> を <code>true</code> にする</li><li>(<code>port</code> の変更)</li></ul><h3 id="ホストを変更する"><a href="#ホストを変更する" class="headerlink" title="ホストを変更する"></a>ホストを変更する</h3><p>デフォルトでは <code>localhost</code> や <code>127.0.0.1</code> になっているかもしれませんが、外部からのアクセスを可能にするため、 <code>0.0.0.0</code> にします。</p><p>&lt;プロジェクト名&gt;/config/index.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="disableHostCheck-を-true-にする"><a href="#disableHostCheck-を-true-にする" class="headerlink" title="disableHostCheck を true にする"></a>disableHostCheck を true にする</h3><p>ここはハマりました。このままでもアクセスは可能なのですが、<br>「Invalid Host Header」というレスポンスがされてしまいました。</p><p>&lt;プロジェクト名&gt;/build/webpack.dev.conf.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>あまりジェネレートされたファイルは変更したくないのですが、仕方がないですね。</p><h3 id="ポートを変更する"><a href="#ポートを変更する" class="headerlink" title="ポートを変更する"></a>ポートを変更する</h3><p>先ほど Port の開放で、「8080」ポートを開放しているなら大丈夫なのですが、<br>9000 や 3000 ポートを利用したい場合はこの作業が必要です。</p><p>&lt;プロジェクト名&gt;/config/index.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    port: <span class="number">9000</span> <span class="comment">// or 3000, 8080, ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>下のターミナル（出ていない場合は Run → Terminal）で、次のように実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /projects/&lt;プロジェクト名&gt;</span><br><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>こうすると、0.0.0.0 でアプリが実行されます。</p><h2 id="URL-の確認"><a href="#URL-の確認" class="headerlink" title="URL の確認"></a>URL の確認</h2><p>この 0.0.0.0 にアクセスする方法ですが、先ほどの設定画面、「Server」より、それぞれのポートに対応する Server の Url が貼られていて、確認することができます。</p><h2 id="できているはず"><a href="#できているはず" class="headerlink" title="できているはず"></a>できているはず</h2><p><img src="https://lh3.googleusercontent.com/cwEfndrkCCfKIE4UWJ851A3acX2oDelqIxsJv77w1IJyHUTCwW95V_8SOXLlTgCeVMoUuutEy0LDDOrmW_RAiATEGGrND3A-dNz-dCCK8_idPXf2z_T8saZh9I-4LfDm67d-XnZD3stv3k9L8bDeQ0E1GsCLCL9WdMjNgs4gSyPMaGTuMlVxdpmWCBuwKqOP1GtwOdCIDHmd4kdF9qCp9V6d5fiePWZJGYsPuNZkMhtgELf10HFOnXOIJgRjp_QyxWY1Lz96S2KYlSB9ALGBayCqtl28w_jWpXxuYY9ZwHqHC8gI_uo7hvlTJeQwDUz5h3sRY_BDMw2HmDigXGqe7A0xiIPLoC9NorBkDmX00YeuHVXE0nCLdJgGel9qedS7RivtdF3gB72Ln7klwM1ZCunyIK9zmgG1Ru-Agl0jTXGdPzJgzJ4pV5XuM29Q1eBw1AFOoxnJbFMzbZYbiulIj35DyLcjwswN6Uvw-MX2RkCX2tZAy8pD5Jo9S_pe3TrtVGLEG6VXfmP0epSYmEEqnJl_ofDC5w7w2Y_2EMBulWkFGKip7BJfaltDkhWcaX7dMHMT5MsNv2hxQiGb9Z1j-Kz6K2_o8hEOjrSalhyj9bot1LBDBVwdB4fsTkJ1k0HUQhQ_dA71iwiZ7zPysQOTTv1AQVCPZR9Mmjdj1F3D6IGtKBTCzI99ZwEfjztD0qXaudEKBTmYU08GaTXQwGJj7KkNN9NUa7p2b02w=w995-h607-no" alt></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Codenvy は便利ですが、情報が少ない面もあり、なかなか大変です。無料なので仕方がないのですが…</p><p>最後の URL の確認のところは、Commands という機能があって、それを利用すると手間が省けます。</p><p>それについてはいつか書くかもしれません。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;高校生活が本格的になってきました。楽しいですが忙しいですね。&lt;/p&gt;
&lt;p&gt;さて、今回は、友人とアプリを１つ開発することになりました。&lt;br&gt;そこで、環境構築などを友人の pc で行うのは手間がかかるため、&lt;br&gt;その必要がない
      
    
    </summary>
    
    
      <category term="vue" scheme="http://asterisks.netlify.com/tags/vue/"/>
    
      <category term="codenvy" scheme="http://asterisks.netlify.com/tags/codenvy/"/>
    
  </entry>
  
  <entry>
    <title>Twitter で誤凍結されてから解除されるまでの道のり</title>
    <link href="http://asterisks.netlify.com/2018/09/30/twitter-frozen/"/>
    <id>http://asterisks.netlify.com/2018/09/30/twitter-frozen/</id>
    <published>2018-09-30T10:05:52.000Z</published>
    <updated>2020-03-17T02:25:18.654Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>昨日、本垢の Twitter アカウントが、なぜか凍結されてしまいました。</p><p>正直かなり焦ったのですが、今日の朝、凍結解除のお知らせが入っていました。<br>今回は、その道のりについて書きたいと思います。</p><h2 id="凍結の種類"><a href="#凍結の種類" class="headerlink" title="凍結の種類"></a>凍結の種類</h2><p>まず、Twitter の凍結の種類について書きます。</p><h3 id="警告凍結"><a href="#警告凍結" class="headerlink" title="警告凍結"></a>警告凍結</h3><p>一番軽いやつです。本人確認したら解除されます。</p><h4 id="c-f-ロック"><a href="#c-f-ロック" class="headerlink" title="c.f. ロック"></a>c.f. ロック</h4><p>「ロック」というものもありまして、僕が調べた限り、<br>ロックと警告凍結の違いがよくわかりませんでした。<br>わかる方は教えてください。</p><p><img src="https://lh3.googleusercontent.com/3VveY6CumlrQlwgweSX_TkFtRZy96qyAsDa_qTKfoCYdAKtjuvkSJnAzYMQXaD-K6ZMWDMhy3H2pA03iHJpyyNfb-QlGGGjBe-P0EKF0yExcsLn1LHdcmD5a24Dn5MDZ0axk05SUqJfvEb1A9kzWnIWrXsrdGNJtIGSzFnu3N7YuZsky4FM9dq0Ap_8Yp00MV2KZcb1CkzXXTfubDjjB5SnEk2-1ytixw-y5nre9J248Pam2Ks9-Lmq7Whk7jfegbF0o04hYOREMw4rxJNnCE-3v9hzc4srR-lwvvtwJjEqhRCL3fcc6vJUPPX188tE1ZxCvfY4eqyprpUz_xcKZTECXQqfofAi_q6QybABbJ48WPhULb74ucOYbJYEgCX_J7eycERhan_YMlLy7xmXghNhahu-MDe7mMO0x5t_fnd49AHx0oeAWTgUIW61GrVbrSCDqpKU9HMHQb3r7BC0Whn_4h_3CQ2DfWWUTdeSJXq9Y8KBHtzkPmrA-XPVO4kjP4hFTde2ml1T0-lTP0aK9dEN9MP_dh6UKhz2bmhtTlVYBQFwiuJyn_yqUVpufRRl2LjRzCbGo2trMguqSXpvQVsA6HkLaPCAu8Iq0mb3D7RsHUcRLzN9Pca1xFRTbFKgoQGEb0kBqfLuWL_489_JkcNPEeQQ7-no42tjgmV9tQoA8vu56ubXzAnWe=w660-h494-no" alt></p><p>画像は本垢が凍結されたとき、別垢を作ったらなぜかロックされたときの物です。<br>短時間にフォローをしすぎたのか「自動化」が引っ掛かったそうですね。</p><p>友達によると、最近はアカウントを作るとほぼ確実に最初にロックされるという情報もあるそうです。</p><h3 id="凍結"><a href="#凍結" class="headerlink" title="凍結"></a>凍結</h3><p><img src="https://lh3.googleusercontent.com/3HZh5t7UyeqaN_jsd6z0cLI1K2aA2J7Z3FaGtG45CA-Nzo_YLA_7iROEAt4UUHJchcIkwNceTgmERyHobFrRdBjrOLsCRMEZtYfVDe6Jl8X5Y80gYdHYIx1GWEJJpSrsouWLADXHeLatV91BQxvIRx2SHAcYShyYibHHfZIP9pSRY-UFJm_HuHrxQRVh-3daP2jCeOPbq96tIqOsUqB4s4yTmWNHPvp4CNF10S-9yjW5oBPBvfcA4MLihjhaTAtIdGRwyoCHC3JvIdeSAPkjSNIoydKEwQJgNAru8gPPKUXumpNwS4wDmdKgL1x81pmWgEqYJPyKvEM3Ktgej7Nf9cVznXyvlWDqXABZvLkO8qO6ghMk_lz3T_4wu_3gOg8M8KoexJEHk1YpJayX76ZaWasQvHi-A7Y-YJIavKCvaZ19wTq-f9NhbjQMI16Sdzx-kXmJHglq3YTRA5-3UFRkxWKctjgPBVVc9bi0MR982_NrtcQdPaHjwpTJWoCvE-wSxo5WxFlnKB1GgfTw2-yLhX4pu4htKd9hgpPU-oxG9qZvnwEK8EPyuuV6jQwrRK17Bu7vWz1MSTWeenrfYd1XjSEZ9kDptMtiJhPSVyLMYoUrEE8s-xvwk8a4F6LLiJQGUZm72yA8D9qS8DQ7O7xUPgxU3MoAfyqRN4oCwP6GGR1HBCPaRfHvEdT8=w662-h320-no" alt></p><p>今回僕の本アカがされたやつです。<br>ロックのように、本人確認だけでは解除できません。<br>異議申し立てをした後、メールのやり取りをして、<br>運が良ければ解除されるそうです。</p><h3 id="永久凍結"><a href="#永久凍結" class="headerlink" title="永久凍結"></a>永久凍結</h3><p>スプラトゥーンが上手なた〇じさんがやられたやつですね。<br>基本復活しないそうですが、解除されたって言っている人もネット上にはいますね。<br>僕は体験していないので詳しく述べることはできないです。</p><h2 id="今回の流れ"><a href="#今回の流れ" class="headerlink" title="今回の流れ"></a>今回の流れ</h2><h3 id="凍結-1"><a href="#凍結-1" class="headerlink" title="凍結"></a>凍結</h3><p>夕ご飯を食べた後、Twitter を見たところ、<br>なんか画面の上の方に赤いバーが・・・</p><p><img src="https://lh3.googleusercontent.com/x4SyhA2rn5dAbmBa1HD1hlV9XmRmhh2kcNlcJidew0xpe2orQ5hyCZ1kVp4dJOeLNlZsbhvOi7JXUT3FsMYYZyH4MjSblSROTR-tD7G9XCHDG94i6oEn3k09s5ZNrtgGJsSCUl3kmgwWqUfMtWrlMtKJ5x_-vNUkEvv1dYO8xfOEaUmRNCm4qebEPGV_Ypi_n8eCEYv_BN91m-tnRw6G6sPrM_88MuOTiWfqmNec_e0IUJSOucjzZZmnPiraZCN2BRD5MfmHOnyqvKGSFyFsyNsNRXC85qMzIOelOgUsxpUYyYc0efdI5OHlLecvyM30_1DVSVEk3mi1g6Cu5mnXb7qfeG8uxiHTO5Ft4K7X-SU7LLhPnFb-hsrPziRDQd9Q3Q952RC2c6trLXIrum8Kj7ldEmQ1Mn924EB4I_B51eQKz1te6OVw1PNL5ZohN4lMZFMF5ioHhM_vzlKUyHvzlhvN4tL7Hei39V8u3sw04B5Fpj3oJJBO36EqZj_eb0RccdraUrVYWpo_ojKkmrYca0TWZU4UiizgePp3sk-n1WG4DGYs5dYKSvUBabnHlmfuHJJh4cL04FCVxCfilu7aTCe1cRS9wPjiWJOvV3XMB2trJyaz3NiOYGbT5m4tv7XTS1L7_jW-UPA-LmKPpwPuY6lsunzv-gPrtC5SCF75AWpRHfgLeqoVOVaT=w865-h48-no" alt></p><p>えっ・・・凍結？</p><h3 id="異議申し立て"><a href="#異議申し立て" class="headerlink" title="異議申し立て"></a>異議申し立て</h3><p>思い当たることがないので、リンクをたどって、<br>異議申し立てをしました。</p><p><img src="https://lh3.googleusercontent.com/PibFx3Dh4DItqqGcMNflCG1tXBaOvwkxWbqvlrk6uuIknfRnyXdaeB8PO73SjtACkJEPxpkh5YH-9iTShF9E7fpSEem-Avh_qxEKPGkIA9vZDTdVuoiBUDVeSBvzh4Q2730Uv7xkTkWAJgZ26M49jvYszYcfyFT3UjbJlXHJ6yy3JRhvJdrvvagLLBlpiUwliQIoPl-K0MGzvIsm_Py_rXu53UifeYMO_dlpx10m3PVBB2ehL0Gows-2ekJlA-LcOdkfl8QLB9otysUsyx_UtW-ng0llkUhQj8fMZufE70RafXqMA_VPK4bSTllIvKP4DC8vBurFsTBPNbdvm9sxYdIFx39x18X-p9n_j9lmuq-P9tUxm5Muysw6o2wo6IWzjHW_sUKks-C86CckuGXRpyJHRuR5CLnYBa5RK_QMWFtJXrikaXG4KgJLYTTLvbArGFCQro36tcJCVjTBMBawL9ka1DS14J7qTEJMvvu66IGWVCF0DSE_yGnUo8k7JcDx15lYm_WNGUHrB-oHjNFV3V8AVQzLYHvr2b2kyGE69XSmd-fFpd3FCnJ-FSOBGkN4jFp9yXEHbbH1cqf80v05CnrqDXW6gqdpDUw1eg4V5e-2DDxMtIPAxHMiv58KZxEdQEWfjtUnQBaOWK--glO42r0hzQoHw8kN9LfoHkkqd__IE93c7rAuKqLI=w925-h700-no" alt></p><p>図のようなフォームに、必要事項を入力して送信しました。</p><h3 id="自動応答っぽいメールが届く"><a href="#自動応答っぽいメールが届く" class="headerlink" title="自動応答っぽいメールが届く"></a>自動応答っぽいメールが届く</h3><p>数分で届きました。なぜか英語でした。</p><p><img src="https://lh3.googleusercontent.com/79sNNljp1fXwIEelurVpwhHdl6ozq9RChffPY7V1t-PksqgGpStTNK-UZ0nxb_3LV-kub504p0LepVaebYWlfWtWT0v5fdm0gzomblMyUMY13yHaH1lHBDJTlEcvRPI4dKvkNmXXVVI02XoeXXq7SXPFWXlKQJ06nuC0TtODO_tDf-e1-0FPHOaacuC4HQ4GLdWPh5w5UgerwoX-BZfqWtqAKoOLYgk2Iz3LRbNbW_IuXUtuJWbMXgmh8i92t9kbHDq4ZUfuPN3S-ehKOxzqHZtBE-zx6hc4Z4EdvbeiOmDCoydzkBsc7t5zvk9RIupSxBX5RlWKkCzRsQsCZNvLmd0ONIETTj9yv8YC4LHrzcunuu-8rbGfn-fUW6tjqbPwly7BsADQ_Kr7u33MBvGS-bmShlnVwLw_rPqWiP45Kzo39x8uqBlqsidjbOQMaKzQYS-pXQNdB_wMubJ39uYaTiiGDkm5kdJX0rC7BCThVOkbdoNKRYP1xm2h9rVolri_HtYyTFnRpW8zF_RlBbcKNS_U97dEUpn3stwznUHjkm7KWyKcOwOhOVEXk1z1kjkn1zb45lwzqccfkKl6lHnQHW4UDla4orvEv8eRRNk1T8SdC5pw531ZdoEbbd-3loUCN_Qv5IQ0cEWB0urSVJKND0pEfM4Sm1ovDxREaCYUSL1u0QPhLtKZ9B0Y=w973-h276-no" alt></p><blockquote><p>It appears that your account is in violation of Twitter’s Rules.</p></blockquote><p>Twitter のルール違反があるそうですね。</p><h3 id="返信を書く"><a href="#返信を書く" class="headerlink" title="返信を書く"></a>返信を書く</h3><p>返信をしました。</p><p><img src="https://lh3.googleusercontent.com/AgiZsyIH_IShMkCQS1QI28aT0X_iNyDRtKXB1vmDq51pzI0VLc0YGKN1okZCXgW9Y3pOsLxlXwVsRMPAoyfLGhLkkkX7qm3rCaFRDWi_8X67uNqe22fjAbrm5H1oqBE9ovnhTOJXbTvmxQfKck9Y7AbZf3DRCGLS8xdzI5KScYaXSvcn8k6FYjy5_6WUaWRgb7FppoNK6zeH1ouGgYYeZspwsdNf8BAJKC_47sQhrBtJd9d4KS7_usQUDj45MGWcGbzoyAmOoQV8h0Lwb_vwXk72qdDV6qKHNDakmE78xDjUtTYcpNDOwouJ5GefJGiQ89m20a6On9Y3S3h1k4IsjCyI-x8zRppndvuRU4mI7xrNP3U5lfV_Lmp4fRKLl2L40-jVYaile-3AQA87Q53iNhIOd85CAI7M6HCeBMAr4Z1dBC1a1eqFA6F0FBcLQ2lheCKvCm2ZFKEORKq9Tt4qIsBiwAPnHpLCNNznHbtCaajIf6nPRaPLl1VHRqlNlGjQL4Cy67eMoVvGtKTz_dVzGZO8ldwiKM-ku7tbT0sS9ub4c_QC0GHxwsUZVeoJjeiDhD9Luvp4eJZQHNYO6cDpNjvoFxpoksU5VIItXZBHLpnXhL36i-mWChSEnVho2dm11vD2dCpqfaKQ78TNBIJOKlgc3DAANLTovB9i8ashwB1juQ8RNTMg-d0-=w756-h777-no" alt></p><p>最後「アカウントを解除」は正しくは「凍結を解除」ですね。<br>訂正します。</p><p>日本支部があるはずなので日本語で書きましたが、<br>一応最初に英語で少し書きました。</p><p>ルール違反はしていないはずですが、どこがルール違反に当たるのか<br>少し推察をして、それがルール違反でないという反論を書きました。</p><h3 id="c-f-新アカウント準備"><a href="#c-f-新アカウント準備" class="headerlink" title="c.f. 新アカウント準備"></a>c.f. 新アカウント準備</h3><p>その間に、新しいアカウントを準備しましたが、<br>ロックされました。↑で書いたのはこのタイミングです。</p><h3 id="返信が届く"><a href="#返信が届く" class="headerlink" title="返信が届く"></a>返信が届く</h3><p>翌日。朝起きるとメールが届いていました。</p><p><img src="https://lh3.googleusercontent.com/Z0-uezx2jKJbx0rMKAbRvm7L5mxxd4UDpGUwWy0-brwmRj9f_uc1fEwxhKRHJLCOY34WOdj0p6BS_e1kJWQTMf4h0x8uTIfWrPMawfcRZjFA10l6DnyJ1NnZmbh3phewVVtKKRh2vFh5aZxRwTsJISKg8mpVt093sKSwmvoUbIy2NMILeSFDUIZMy0RU9wi0LX45kmYpJXbyWrhGRZSr70fnvsaGl43_grLlNyxijy-a5gywBDRWioo9eiBt5M64qQD39OzVGK42VWNh-JbLp7jbhOp0oIsSVscbnrQbalE1chUFKIdQlGZ9Nf-XoydhyCnvfTfUDxo8O8EfS54uIk-CBZuPs3GQgG64otBl6BeGQKnxaM-6l-0ftSw1uMhVM9UeqRrSUbaQpNh4FAjTYuQq2zqO0y-kRG3VP4zFeCju9P53c0K3c6PMXLMM8qIBbTcDmgj4vUCPEjRuP59ivdE95QDRwnG9oxOs8Uuk3A-j1b1WPwoscQWSH1lF25dkCQbI-8tiBphi3-kDFe5Gy6BSvfXA3-i4C9tuEBweSUuWUiVgQfF7u45KvuS16EVeD1Y7BaNsSne6Sn5IZ5zPAcRInrrX3Uv5B17jyqECq6CdreXkFEF2CZC32IcLiIqAMyeGWbgfcPzAGM5Ds9YwCqRsPNg-1qWAgB_FEQIv4Gj_riMktHpJZBOK=w954-h230-no" alt></p><blockquote><p>さらなる調査の結果、ご利用のアカウントはTwitterルールに違反していないと思われるため凍結を解除しました。</p></blockquote><p>誤凍結だったようでした。</p><p>無事 Twitter のアカウントを開いて解除されていることを確認できました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は凍結が無事解除されたのでよかったですが、<br>友達には「何をやらかしたんだい」とか「なんで？」とか<br>色々聞かれました。</p><p>しかし「なんで？」と言いたいのは僕自身ですよねw<br>わからないとしか答えようがなかったです。</p><p>実際本当に<strong>何もやっていなかった</strong>ようですし…</p><p>というわけで、周りに凍結されてしまった人がいる場合は、<br>あまり悪く思わないであげてくださいｗ<br>誤凍結という可能性もあります。</p><p>とりあえず凍結解除されてよかったです。<br>ありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;昨日、本垢の Twitter アカウントが、なぜか凍結されてしまいました。&lt;/p&gt;
&lt;p&gt;正直かなり焦ったのですが、今日の朝、凍結解除のお知らせが入っていました。&lt;br&gt;今回は、その道のりについて書きたいと思います。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>僕がプログラミングを始める人に、「言語なんて何でもいいのだ」という理由</title>
    <link href="http://asterisks.netlify.com/2018/08/23/for-programming-beginner/"/>
    <id>http://asterisks.netlify.com/2018/08/23/for-programming-beginner/</id>
    <published>2018-08-23T12:48:14.000Z</published>
    <updated>2020-03-17T02:25:18.651Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>夏休みが終わりに近づいてきました。</p><p>この夏にプログラミングを始めようという友達がいて、<br>どのようにプログラミングを教えるのが効率的なのか、<br>改めて色々考える機会がありました。</p><p>そこで思ったことを今回は書きたいと思います。</p><h2 id="プログラミングを学習するときに大切なこと"><a href="#プログラミングを学習するときに大切なこと" class="headerlink" title="プログラミングを学習するときに大切なこと"></a>プログラミングを学習するときに大切なこと</h2><p><img src="https://lh3.googleusercontent.com/RSoro3rvGbaP6BjzlvTuXGdtnUGI9pS7JAD8aJhHfkUVQkLJCJIVtBaP9CdmnDtkOxLVD2SJXIzklzxDKlRN0EczVeD0xzZ0kYQxdihnYqjzn3EL_ZL20xdE5tS6S2sUZjFXsBfauCDvtvEH8zRz1qvvVjtD18Xf4YqwoBGuLIs5IiNb4mOG0kDH-_ysF9oBryG429NGCwXHhku9nIiw7arEjV6N1q_itnKsGTRneENi4kRupfdpL9ETv1T07NMTOmIv2AfV4z4d85ybkOGmhDWUnct7MrWHxsgIHIwq5fkQG8gO7JDFrSB64Dlj_NUCFvvdbWtWbc400492kC16Z5hbCIVlMgzjgV-EBcDjwqRlwB7rl1GVrnQlymk_Pbfg7SesRa5gfzoh20a3Zdwaz3yQBFsbw4TBHCjYUEp0wnCCKoI_LuvgJRQgDYpWWW3Ix4l5IOO9H3w2PpDBzEErJ8ZYvsQBZcquMNdHbVQOYmsgyBXyxqmWik1zNjppK0op2ZEkOcXyV-pV8u0CVYwvgiLJePN2ikVcv-aE5-U_2ymfNgsWZq_PmZNysHdy5IMPPb8KDL3htjphRVkPdT5Q3kBXzGP8uylt5jmCddV_gg3lA-zmthyEBitQVQQg15Vd2zR1jfCZ5WKSHeR25uYAkhdYLeNMrVSLUPph5zwmzvdLe5xne1UBgmU2=w640-h425-no" alt></p><p>よく「Python がおすすめだ」とか「Unity できるやつかっこいい」とかいう言葉を聞くことが多いのですが、<br>僕はこれらの意見はプログラミングを始めるにあたってはそれほど関係ないと思っています。</p><p>これらの意見の根拠で、例えば「構文が簡略だ」というのであれば、僕は Scratch をおすすめすればいいじゃない、と思います。</p><p>また、「Python は深層学習などに強いから」というのもよく聞きますが、<br><strong>果たしてプログラミングを始めた初心者は、本当にAIや深層学習の仕組みを理解し、自分で構築するレベルまで達するのでしょうか。</strong></p><p>「プログラミングをやったことがある」と言う人たちでも、<br>サンプルコードを写して実行してできただけ、あるいは小規模なアプリを作っただけ、ということもあります。</p><p>これらの人たちは、本当に Python を学ぶことのメリットを享受できているのでしょうか。</p><p>他にも、「今流行だから」というのもよく聞きますが、<strong>流行はよく変わります。</strong><br>流行に乗って選んだ言語でプログラミングを始めた人たちがその思考法を習得したころには、<br>もう流行はその言語ではなくなっているかもしれません。</p><p>だから、僕は、誰かが「この言語がいいぞ」などということは、そこまで重要なことではないのだと思います。</p><p><img src="https://lh3.googleusercontent.com/db62jWzDVHz26c2BXGbvyzqZaON7Cd7dPA3cbP7NWdVpnL-KSO5NLebrC32KUlRBGdI7sBfQKAwf2IWtcyjtoLiE9Fg4yRB8LFR7hsCbIKeC4rFFX_nhXFtkwa5aAdu-oD9XGQ3fyMHP7rl9RnBzK-wxKXLki9hdhEKGCV6TTuRRkEO5Se37F_u-U42AiREc0-b6xAoaobhcYb4iwXYF9kqaQA2qqkVGKSqZ57-472stKtIqSNPgWwHQdcPezezpfUi6n8d_yk11vHBINuKtxx9ZJi4JqiVxMFB-ae3tkNNiVKPbz4zYDKLllmDXStMHl2-QkZyKqyTvKQcHKddPRvELBoWt5SWfFdW1IyF_GvoFBBrFsWzU1lu5DGFm6XqRvB42pD8jN3E1kjA6I0glrxxtmHWY8R5EVv0qrxWTM35TdWVprv_wICWCYXZSwgIp8e5wIvRp0QkbG9xnb81ctk15D7RWe3GllSMYE5Gv6rWR6T8H-3yB4BfenwzvuZgpKMrhaFvQF0cP_5w4b7mAfh247IDo8c9Mug0MXX2wzAredByW2xXfytpBQkxUhidTYdeNcwjmxIMhgTA4MRN_db2P2UBz6Z4PyN-NNYQ62SkAIzgx4YMp3fzrgO91pTaJ2ZvCTdkl_P_fVpG0jM_5j77GFFNKWWYVBEFyBDC3YydFWWFm9L9l08Cd=w640-h427-no" alt></p><p>本当に大事なのは、<strong>プログラミングを通じて、自分が何を作りたいか</strong> ということです。</p><p>ゲームが作りたいわけではないのに Unity をおすすめするのは適していません。</p><p>スマホ向けアプリを作りたいなら、Java か Swift かを学んでみる、<br>自分が人工知能を作ってみたいなら Python を初めてみる、<br>Web サービスを作ってみたいなら HTML+CSS+JS を学んでみる、など。</p><p>プログラミングは <strong>目的ではなく手段</strong> なのです。<br>プログラミングを始めるにあたって、まず何を作るかを決めるのではなく、<br>言語を選び始める、というのは、僕は適切な手順ではないと思います。<br>言語ありきでプログラミングをしてはいけないと思います。<br>その意味で、僕は「言語なんて何でもいいのだ」と言っているのです。</p><h2 id="自分の作りたいものを形にしていく過程で、思考法を習得していく"><a href="#自分の作りたいものを形にしていく過程で、思考法を習得していく" class="headerlink" title="自分の作りたいものを形にしていく過程で、思考法を習得していく"></a>自分の作りたいものを形にしていく過程で、思考法を習得していく</h2><p>先ほど「プログラミングは目的ではなく手段」だと書きました。<br>これは、プログラミングを学んでいく姿勢にもつながります。</p><p>例えば、変数や関数の概念や構文について、座学のようにネット上の記事を読んで理解したり、<br>ネット上のサンプルコードをコピペして動かしたりしているだけでは、<br><strong>実際に思考法を身に着け、応用していく力には結びつかない</strong>と思っています。</p><p>「プログラミングって何なのか知りたい」という人で、割とそのような人がいるかもしれないのですが、<br>そのような学習方法をとっていると、進捗が生まれないか、あるいは挫折します。<br>また時間が空いて、ちょっとプログラミングしてみよっかなと思ったときに、忘れていたりします。</p><p>そこで、自分の<strong>作りたいものを開発しながら</strong>、プログラミングの基盤となる思考法を習得していく方法が、<br>最も効率の良い方法だと考えています。</p><p>もちろん、最初から壮大なアプリを作るわけではありません。<br>まずクイズアプリや Todo アプリなど、こういうのも作れるのだということを提示して、<br>それを自分なりにカスタマイズしながら製作していくうちに、プログラミングの「勘」がついていくものだと思います。</p><p>実際、僕も様々なアプリを製作していきながら、プログラミングを学んできました。<br>そこで学んだベースとなる考え方は、今も生きていると感じています。</p><h2 id="プログラミングができるというのは、写経して正しく実行できる能力ではない"><a href="#プログラミングができるというのは、写経して正しく実行できる能力ではない" class="headerlink" title="プログラミングができるというのは、写経して正しく実行できる能力ではない"></a>プログラミングができるというのは、写経して正しく実行できる能力ではない</h2><p>さて、少し話題が変わりますが、「プログラミングができる」と名乗っていいのは、<br>どれくらいのレベルの人以上だと思いますか？</p><ol><li>Hello, world! が実行できる</li><li>ネット上のサンプルコードをもとに、簡単なアプリを作れる</li><li>他人のサンプルをカスタマイズして、機能を追加したりできる</li><li>自分でアプリを設計して、中規模程度のアプリを作れる</li><li>有名なデザインパターンを駆使して、可読性やパフォーマンスの高いアプリの開発を目指せる</li><li>自分でアーキテクチャを組み立て、大規模なアプリを開発・運用できる</li><li>それ以上</li></ol><p>人それぞれだと思いますが、僕は <code>3.</code> 以上だと思います。<br><strong>「自分の考えているものを形にするプロセス」がプログラミング</strong>です。<br><code>1.</code> <code>2.</code> にはそのプロセスは含まれていないと思います。</p><p>誰かが書いたコードをコピペするのは誰だってできます。<br>それで正しく動いたとしても、そこには自分のクリエイティビティは入っていません。</p><p>何かを初めて自分の力で作れるようになった時、プログラミングができるようになったと言うのだと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今まで僕は、小学生から大学院生、また社会人など、<br>色々な人とプログラミングをさせていただきました。</p><p>その中でお互いの持っている知識や考えていることを伝え合ったりする機会もありました。</p><p>今回このように友達にプログラミングを本格的に教えるということを通じて、<br>そこで考えていたことを明確にすることができ、</p><p>「教える」ということは本当に自分自身にも学びをもたらすのだと分かりました。</p><p>ご意見・ご感想などありましたら下のコメント欄にお書きください。</p><p>※今回はやけにまじめですね。これで終わります。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;夏休みが終わりに近づいてきました。&lt;/p&gt;
&lt;p&gt;この夏にプログラミングを始めようという友達がいて、&lt;br&gt;どのようにプログラミングを教えるのが効率的なのか、&lt;br&gt;改めて色々考える機会がありました。&lt;/p&gt;
&lt;p&gt;そこで思った
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ノートパソコンを直した話</title>
    <link href="http://asterisks.netlify.com/2018/08/08/fixed-my-note-pc/"/>
    <id>http://asterisks.netlify.com/2018/08/08/fixed-my-note-pc/</id>
    <published>2018-08-08T13:03:36.000Z</published>
    <updated>2020-03-17T02:25:18.651Z</updated>
    
    <content type="html"><![CDATA[<p><strong>※今回の記事の内容を実践することは本当に自己責任になります。というか分解しないことをおすすめします。</strong></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ちなみにPC落としてから突然電源が落ちる問題が発生していたけど分解したら内部でねじが緩んでいたことが発覚しそこをきつくしたらなんと電源が落ちなくなりました。<br><br>つまりノートパソコン直した―――――――やったーーーーーーーーーーー</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1026795556696281090?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月7日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>こんにちは。shundroid です。<br>2年前の夏、ノートパソコンを落としてしまい、<br>そこから<strong>突然電源が落ちる</strong>ようになっていた僕のノートパソコンが、</p><p>この度、なんと、<strong>直りました！</strong><br>今回はその報告です。</p><p>ノートパソコンが壊れた話は前も↓の記事でちょろっとしましたね。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/08/15/serialport-without-vs/" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/14/report-i-bought-my-pc/" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="分解した。"><a href="#分解した。" class="headerlink" title="分解した。"></a>分解した。</h2><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">PC分解できたーー<br><br>落としたのもあって左上のねじ穴が死んでたけど、外側のケースをひねってナットを固定したらねじが外せた。そこが一番難しかった。 <a href="https://t.co/gBQRLNdyPG" target="_blank" rel="noopener">pic.twitter.com/gBQRLNdyPG</a></p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1026735996694454272?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月7日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>PC は Sony 製 VAIO の SVE14A3AJ なのですが、<br>裏面のねじをすべて外したら簡単にケースを外すことができました。</p><p>確か分解したら Sony での修理が受けられなくなった気がするので、<br>本当に試すなら自己責任でお願いします。</p><h2 id="分解したままPCを起動したらひらめいた"><a href="#分解したままPCを起動したらひらめいた" class="headerlink" title="分解したままPCを起動したらひらめいた"></a>分解したままPCを起動したらひらめいた</h2><p><img src="https://lh3.googleusercontent.com/5dhIoadZDBsZlroft2R85r80BsVqpPEzvBpEKSf0PaNseAl7EVWNfpStKmlcAAUb6aUDWWDFQgIk2MZfNSLKRCkjpSFsFveyuz1TDpdF62PFl3xApeZC1GOq6qhHDnYQcCW-9t0v_ZkTQ5v-R1yomYOUA5E5bspNEQd94gGnLWEwevhAwdcyeEZ7cOws6cVKsB68tmepKfj4W6x9uo3Z5eUx1Cy0xFfKzCy4BD0fahXgjl3NTnOmu0lsoAtYietqZQRlgkN74qbqzXlOx83voOc9ljWZ3GH5IfJre7IY68xCJtVp0XExYbqqdBiZrR8jphLk55qafYHg8EaNNbl-JF2Q0vBji-BjSrByKoyebkvX1T9OnwQ3-F9QE81t4rOIPEriW5gEqCct760IVkWB4JFHKKlAApKmYLpVSokGsD4rmkGw2QvYga3yNOBMd2xJyF151TcxmieEDXkf3pTRByibwdyj0AiBOZ_HJobVEed6GJcaiw4s7_zIm2QKDJNbQNqz_cUBXp4SD6SCBZ2_Y0JUECE_ZVh93aVwRdj3VREo3zkrSPTaFN0-Fs1i4NxZxTqs2vdb5OxKpG-Phx6yJVkb48tJ0_5xWIMwpqXy5Jy7S-pEoVIi2ToiZ9B5SjB8aslKbqmBICyNVECWInwL9j5714f0d9SylSPPDNEfUwY2I-INHCBNWHra=w1718-h966-no" alt></p><p>この部分が落とした時に一番ダメージを受けたらしく、<br>ケースにも穴が開いていました。</p><p>そこは、分解するときにもナットが空回りしちゃって<br>ねじがなかなか外せない難しいポイントだったのですが、<br>それはいい感じの角度にケースを固定したら外せたのでまあよかったっす。</p><p>そしてこの分解した状態でPCを起動したとき、あることに気づいたのです。</p><p>ーこの部分の形が変形したときに、電源が落ちると。</p><p>どうやらここの部分の２つのねじがゆるんでいたようで、それをきつくしめてあげました。</p><p>そしたらなんと、電源が落ちなくなりましたーーー</p><p>復活です。やったーー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上です。<br>まだ電源が落ちなくなってから１日しかたっていないので、<br>また再発するかもしれませんが、今のところいい感じです。</p><p>分解にはリスクも伴いますので、真似しないことをお勧めします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;※今回の記事の内容を実践することは本当に自己責任になります。というか分解しないことをおすすめします。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>先生の名言を画像にして排出するだけの、誰得かわからないLINE BOT を作った話</title>
    <link href="http://asterisks.netlify.com/2018/07/14/line-teacher-bot/"/>
    <id>http://asterisks.netlify.com/2018/07/14/line-teacher-bot/</id>
    <published>2018-07-14T11:53:41.000Z</published>
    <updated>2020-03-17T02:25:18.652Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。<br>期末考査も終わって、一段落したところです。</p><p>何かひと書きしてみたいところだったので、<br>クラスメートみんなで使える、何かを作ってみたいと思いました。</p><p>そこで LINE BOT の開発をしてみることにしました。</p><h2 id="作ったもの「某先生と会話bot」"><a href="#作ったもの「某先生と会話bot」" class="headerlink" title="作ったもの「某先生と会話bot」"></a>作ったもの「某先生と会話bot」</h2><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">bot完成しました。近日中に仕組みをブログに公開します。 <a href="https://t.co/oxhvmIq1fe" target="_blank" rel="noopener">pic.twitter.com/oxhvmIq1fe</a></p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1017964016885424130?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月14日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>「（名前）、○○」と話すと、某先生の写真と文字を合成した画像を返すbotです。<br>特徴はただ一定の画像を返すのでなく、「○○」の内容によって文字が合成されるので、<br>新たに名言が生まれても画像と合成できるようにしていることです。</p><h2 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h2><p>次のようになっています。</p><p><img src="https://lh3.googleusercontent.com/UwtQILPQZAXev82RZIzZ3Oz8zacwiw8Fsyu77PSw5dMSgFjT0wkkwlplbOt929sGDFNER0rDLtUcohDDK23MTlQSlrFF14gJmtSsnSu5VHtm-ltLUGSIBO4MWevje_iBXZK9_4jFfiuLsNtmeuNZIHQ7HjezlbhYporWsEUlZww7MSlMsesYth6-L--8aH52zl0Mp49PK21BKj6d4AZnvXu8CU_lIJEUEz-wIUARip90ZeU1PJNptv57irMpslTLXwPSXqkUCdWZkmHngRfUl5TCvq8onJ2pdgcNGAy1zna7NzbmIIHwB81jACYNIPBhMr79T6k8ANdsTkd93hXIPLzwnxwDTG2uzcS5g-7BootW5jTl6tPuWcN0ylc7GN1F6QMOJne3ndiIIXIkxH7uJlYPmWMxdvlKG3WfKMoUZ84tNBu2r7beFxwSoYJh3s46Ktwo11AN5_yKToWCQ1TJnknpPe83L7vfnEvJ3bG1zAODWQWLqKNgdRKPxOn1Y7qiav09aPrlrDHciMyN8xRWQQQOdyBxYe2utl0EXNR_WYZVgM_Z3TVo2CBg9TftD1U4WuX8wMlYFp0leWUoTpEdAy5phPC2KYWkec2gY0HSiXqK2E_WGE54MUr9WacsjlU=w1073-h303-no" alt></p><h3 id="①②-メッセージ送信"><a href="#①②-メッセージ送信" class="headerlink" title="①② メッセージ送信"></a>①② メッセージ送信</h3><p>LINEユーザーがメッセージを送信します。</p><p>これを bot 側は、Messaging API のメッセージイベントとして受け取ることができます。</p><p>そして、bot 側で登録した Webhook URL に POST リクエストが飛ぶので、<br>それを使って Heroku でデプロイしている node.js アプリケーションにメッセージを送信します。</p><p><img src="https://lh3.googleusercontent.com/GEnuN3Dy8-0JCKzGfS8oaZ0ylqyJacZe45EbwTLVGs5g2sb4HrtiA5JJKJKo_xtLYIHlXXEEf7qz8a52clL4MMXjuxC7lWTedw3hJRkYr5l_ILsoYDxXuXOO9xcdTkYgwoUNcRqgUL3QmvBekYkE1jaROfhgq5RJH7ha0Aoc8zIRQF_V856f8dXAAK1MoAwel0pYmJZk_DOW7j89xTWO3qh3CLv2ZHYnex-6wPmPZNtP913Cr8nRtcelid2vuFYsTFERPVC2L4a5vn4DGca_yNBusjA2sjailKDXwEEBEUPLC4x5eC-utVUS2iU87rPS2jcO3tO5aeMYpVHKY3SPACsw_G84EvrNV344dCRockD7IZ4CoE7_FmEuOPR1kHiy_r04ugOgyUO9EO2u-KUJeDzFgAO93JHNFV9M96uUuf5zsHlg8up8DohWrNMxdSaOZU3uFh90-j0WWfZZy7HLVoslH0hoiNKLNReZD04KPDn_-qHlRVpZZjkevONaDn7tycEjaQMaoLyaMMJCsvf9KXFjJAmGG5XnbtttZDDdu4wOi6tg4-0_Lb6Zz2XS0CY6BtOeJpS-XoRCY569vgufcZgLW0ilcKIcRKcJZdsoTGk4JGGP00n06WMx918gZOA=w537-h85-no" alt></p><p>ここですね。</p><p>node.js のほうとしては、LINE の <a href="https://github.com/line/line-bot-sdk-nodejs" target="_blank" rel="noopener">Node.js SDK</a> を使うと簡単に書くことができます。<br>内容も example の中身を少し変えただけなので、<a href="https://github.com/line/line-bot-sdk-nodejs/tree/master/examples/echo-bot" target="_blank" rel="noopener">そっち</a>を参考にしてもらったほうがよいでしょう。</p><p>Express を使っています。</p><p>ちなみに、ここはどうでもいいかもしれないんですけど、<br>最初は <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a> というのを使おうとしていました。<br>しかし、これだと後ほど出てくる node-canvas をなぜかコンパイルしに行き、失敗するということをするので、</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">now 使おうとしたけど node-canvas をなぜかコンパイルしに行き失敗しちゃうから初めてトンネリングツール使ってみたけどかなり便利</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1017971362927820800?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月14日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p><a href="https://localtunnel.github.io/www/" target="_blank" rel="noopener">localtunnel</a> というトンネリングツールで自分のPCに直接アクセスするようにしました。<br>しかしこれだと自分の PC がついていないとだめなので、Heroku を使うようになった次第です。</p><p>初めて Heroku 使いましたけど、かなり便利ですね。すごい。</p><h3 id="③-メッセージ応答"><a href="#③-メッセージ応答" class="headerlink" title="③ メッセージ応答"></a>③ メッセージ応答</h3><p>画像形式でメッセージを送ります。<br>Messaging API の<a href="https://developers.line.me/ja/reference/messaging-api/#anchor-42120f44e51aa176dd60c34dc3719ff4fccc4b21" target="_blank" rel="noopener">リファレンス</a> を参考にして、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"image"</span>,</span><br><span class="line">  <span class="string">"originalContentUrl"</span>: <span class="string">"https://example.com/original.jpg"</span>,</span><br><span class="line">  <span class="string">"previewImageUrl"</span>: <span class="string">"https://example.com/preview.jpg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こういう形式で作ります。</p><p>ここで気を付けなければならないのは、画像の形式とサイズですね。<br>どちらも<strong>JPEG</strong>でなければなりません。なんと。<br>サイズは originalContentUrl のほうが<strong>1024x1024</strong>まで、<br>previewImageUrl のほうが<strong>240x240</strong>までです。</p><p>ここでの URL は今回は（original…、preview…どちらも）次のようにしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxxxx.herokuapp.com/image/&lt;名言&gt;</span><br></pre></td></tr></table></figure><p>後で URL を参照したとき、名言の文字が入っていないといけないからです。</p><h3 id="④-画像-URL-送信"><a href="#④-画像-URL-送信" class="headerlink" title="④ 画像 URL 送信"></a>④ 画像 URL 送信</h3><p>さっき作ったメッセージを送りますね。<br>これも example と同じなので<a href="https://github.com/line/line-bot-sdk-nodejs/tree/master/examples/echo-bot" target="_blank" rel="noopener">そっち</a>を見てください。</p><h3 id="⑤-画像-URL-参照"><a href="#⑤-画像-URL-参照" class="headerlink" title="⑤ 画像 URL 参照"></a>⑤ 画像 URL 参照</h3><p>bot 側が URL を参照してきます。ここで初めて画像の合成をするようにしています。</p><p>先ほど名言は URL に含まれていたので、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/image/:text'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>というようにパラメーターで指定しておきます。<br><code>:text</code> には <code>req.params.text</code> としてアクセスできます。</p><h3 id="⑥-画像合成・⑦⑧-画像送信"><a href="#⑥-画像合成・⑦⑧-画像送信" class="headerlink" title="⑥ 画像合成・⑦⑧ 画像送信"></a>⑥ 画像合成・⑦⑧ 画像送信</h3><p>HTML5 Canvas みたいな感じで合成出来たら手軽だと思ったので、<br><a href="https://github.com/Automattic/node-canvas" target="_blank" rel="noopener">node-canvas</a> というものを使いました。</p><p>使い勝手はほんとに HTML5 Canvas そっくりです。すごい。</p><p>はまりかけたところはまずフォントですね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; registerFont, createCanvas &#125; = <span class="built_in">require</span>(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> ctx = createCanvas(<span class="number">100</span>, <span class="number">100</span>).getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">registerFont(<span class="string">'&lt;フォントファイル&gt;.ttf'</span>, &#123; <span class="attr">family</span>: <span class="string">'&lt;フォント名&gt;'</span> &#125;)</span><br><span class="line">ctx.font = <span class="string">'17px &lt;フォント名&gt;'</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>このような感じで使えます。</p><p>あと、JPEG 画像として返すところですね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createCanvas &#125; = <span class="built_in">require</span>(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> canvas = createCanvas(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.get(<span class="string">'xxx'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  canvas.createJPEGStream(&#123; <span class="attr">quality</span>: <span class="number">100</span> &#125;).pipe(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>こんな感じですね。createJPEGStream で Stream を作ったのを<br>pipe して res に渡すだけでおｋでした。</p><p>Express こんな方法にも対応しているのですね。さすがー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本当に誰得かわかりませんが面白いものができました。</p><p>でもこういうものを通じて、今回は express、LINE bot の作り方、<br>Heroku、now、localtunnel、node-canvas など、様々なものについて学べました。</p><p>そして bot 作り自体はそこまで難しくなさそうですね。<br>これなら、身近な LINE ですし、プログラミングの入門としてもいいかもしれません。</p><p>今度部活のみんなでbot作ろう会をやってみよっかな。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。お久しぶりです。&lt;br&gt;期末考査も終わって、一段落したところです。&lt;/p&gt;
&lt;p&gt;何かひと書きしてみたいところだったので、&lt;br&gt;クラスメートみんなで使える、何かを作ってみたいと思いました。&lt;/p&gt;
&lt;p&gt;そこで LINE BOT の開
      
    
    </summary>
    
    
      <category term="javascript, nodejs, line" scheme="http://asterisks.netlify.com/tags/javascript-nodejs-line/"/>
    
  </entry>
  
  <entry>
    <title>ガロア理論ジェネレータを作った</title>
    <link href="http://asterisks.netlify.com/2018/06/03/galois-gen/"/>
    <id>http://asterisks.netlify.com/2018/06/03/galois-gen/</id>
    <published>2018-06-03T09:49:23.000Z</published>
    <updated>2020-03-17T02:25:18.651Z</updated>
    
    <content type="html"><![CDATA[<p><em>Dear Mr. Tomohide Suzuki</em></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://t.co/rXsQJEGyF7" target="_blank" rel="noopener">https://t.co/rXsQJEGyF7</a><br><br>できた！！！！</p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002877350265012224?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>こんにちは。お久しぶりです。shundroid です。<br>高校生になりました。</p><p>いやー忙しい。最近もテストがありましたが、<br>テスト範囲が広すぎて本当に大変でしたー。</p><p>そこで疲れを癒やしたいのもあり、１つサービスを作ってみました。<br>ガロア理論ジェネレーターです。</p><p><a href="https://galois-gen.netlify.com/" target="_blank" rel="noopener">https://galois-gen.netlify.com/</a></p><p>製作期間は２日です。<br>今回はどうやって作ったかなどを紹介したいと思います。</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これを入れておいたから許していただけるだろう <a href="https://t.co/ytq0QWOQCR" target="_blank" rel="noopener">pic.twitter.com/ytq0QWOQCR</a></p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002737176591794176?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p><a href="https://github.com/shundroid/galois-gen" target="_blank" rel="noopener">https://github.com/shundroid/galois-gen</a></p><p>Github に上げておきました。参考にしてみてください</p><h2 id="基本構造"><a href="#基本構造" class="headerlink" title="基本構造"></a>基本構造</h2><p>スマートフォンやPCなど、多くのデバイスで動作させたいため、<br>Web アプリとして制作しました。</p><p>MVVM であり、<a href="https://jp.vuejs.org/" target="_blank" rel="noopener">Vue.js</a> で書いていますね。<br>いやーほんとに Vue はシンプルで素晴らしい。</p><p>仕組みとしては、既存の表紙の画像の上に、<br>文字を HTML 要素としてのっけてって、<br>エクスポートするときに <a href="https://html2canvas.hertzen.com/" target="_blank" rel="noopener">html2canvas</a> を使って画像にするようにしています。</p><p>UI は <a href="https://vuetifyjs.com/ja/" target="_blank" rel="noopener">Vuetify</a> で作りました。</p><h2 id="苦労したところ"><a href="#苦労したところ" class="headerlink" title="苦労したところ"></a>苦労したところ</h2><h3 id="レスポンシブルデザイン"><a href="#レスポンシブルデザイン" class="headerlink" title="レスポンシブルデザイン"></a>レスポンシブルデザイン</h3><p>スマートフォンでもPCでも動くようにしたかったので、<br>避けては通れぬ壁でした。</p><p><img src="https://farm2.staticflickr.com/1725/40717252540_6ff959e6e8_o_d.gif" alt></p><p>表紙の画像のサイズが可変なので、それに合わせて文字などを<br>相対的な座標で表す必要がありました。<br>em とか % とか使っていますね。</p><p><img src="https://farm2.staticflickr.com/1727/41802654054_aedac85cc2_o_d.png" alt></p><p>margin で em を使う日が来るなんて思いもしなかったですね。</p><p>ちなみに em は親要素の font-size に応じて自由にサイズ調整ができるので便利ですよ<br>これはサイズを要素間の比率を維持したまま一括変更したいときに、font-size を変えるだけでいいので<br>非常に便利です。ここの話は聞き流してもらっても構いませんでした。はい。</p><h3 id="html2canvas-のバグ"><a href="#html2canvas-のバグ" class="headerlink" title="html2canvas のバグ"></a>html2canvas のバグ</h3><p>HTML の要素として作られた冊子を画像に変換するときに、<br>このライブラリを使うんですけど、マジこれバグありすぎー</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">縦書き死亡 <a href="https://twitter.com/hashtag/html2canvas?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#html2canvas</a> <a href="https://t.co/6aJjlB1Yfk" target="_blank" rel="noopener">pic.twitter.com/6aJjlB1Yfk</a></p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002863670982918144?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>writing-mode で縦書き指定してたら作者名が死にました。</p><p>そのせいで縦書きにするのに苦労しなければならなくなりました。</p><h3 id="作者（日本語）"><a href="#作者（日本語）" class="headerlink" title="作者（日本語）"></a>作者（日本語）</h3><p><img src="https://lh3.googleusercontent.com/TzWNseX1biEXeqSUri4tmHDAChPCdHDlueiX4JMq8vWwyGqvKyG8RjjKAFIONaGDinspH8-keoDWz2PUEPsl8_d3dv3zmRf1-7IecHe04sh8bakDOIl1rCUgkLSl8hndQWufKS8xeGdRuaOHWTyMf7KPvAxnICKc6nXD6p9_lkEZB5xagEAMOM2DsrF7iHtRZAfPEdVhGSulngHYSEMBJ7EuaYSGfP5Y7EuEUQ-ih8qYeg-v9kwDXT-Zs6uLgtSewQF9DT1MkxMdCt321hFc18queFEjowNMfEaO1nsPNfNIYo0ole0inQrFcZXopA2-1X5K40yq2LES2PD74cpsSxun3rNiNc8xtJT8ZtfD9ow7WLIOGkRdCSfFMGXVSQ2jlJnv-VDHdQ0f45TOqylnZomaagj5luERgSwfmBGCEo1m3Deps6ctuDa36GNFPvixm6EOIQkrfV05GsaFpN9Z46kf3Xqjz2KqXg9UOYDsY2l589JMDBXYrWg6yxiydQDzcJ9bZXu8YLlaBm-MCm-U69uya7fAcwmRdwRaPywvjOAhL11_xJ7VP72fQzbs2l1PptIcrEGQ1p32nLtaYzG6MyQuM78pJ5o76iBlQuM=w473-h16-no" alt></p><p>これはもう１文字ごとに <code>&lt;br /&gt;</code> を打ち込むようにしました。<br>仕方がないですね。お許しください。<br>字間は line-height で調整ー</p><h3 id="作者（英語）"><a href="#作者（英語）" class="headerlink" title="作者（英語）"></a>作者（英語）</h3><p>英語はなんと、<strong>文字を回します</strong></p><p><img src="https://lh3.googleusercontent.com/AJnVEFyftBo_bGwf5pJyvPNb9MllnFySLdgu2RdDOEQcgkKBYrTrrrG0n1Z8ES4tJEohzAmbyixMwqs1v3EyNwFwGAz_ZsqRMtk97-_258IdbwGz3h5vTrju60DdqYz6tZzeXJHXrIXeVvuI_ChFWhy-Sindn86pFho9sgSX4AjF7Fra-TO_yk-z-39-15oZMXtc3euH5GZM59k6Q7T0f32ju3T1o7yua31oC5QNk1e8AEItnB12C4JSg9hJAcpMPDUOeymXN3ToJoB-1VumRClZUlyaHz2bgdwk6UW6hCItomu47PbK3CZHLFFwAiPUYt4wKPzhpkoX9VdIfhH1O6Yb5QHVlZfin8ifHHEZnN5JlJcn52IGUUGNZ5RyHVdyhvvY_Ir4ixZyQ47ZdZA6FHYrexF0UeMCd7PoyIFZBPtxxgCyEycH0G2DX7UvvJj3J1gHWTu7EFv6cO8oF_8dw0y8AFQKoN8MYBsxZ0CZz2ImH1OFA11f6Abf9p1GZErQhKDqR8haONmfXY7v0mwNIWhY5Zf-g-lyf7OH5dHW5lUGVDDXK-BgLuLCVsuo7L7kj0bp-dTNikEOdtdDU15a1xe8aS-QDW874It25qM=w87-h276-no" alt></p><p>あーこれ writing-mode つかえないとか<br>transform 使わなきゃいけない感じじゃねーと察しますよね。</p><p>そうなんです。使うんです。</p><p><img src="https://lh3.googleusercontent.com/tILl96040Ut24MNi0T5RbGGpel7--12LSMM529bftxuFFpQsUXykILLCh2YIutvQqFQsCSTHfMZ2vHy5Dwo2frQwJzdG1nyjcWFMDVw4LZGCTR52nZgsGO5gAsvfBYwN7_FhsivRpPdAPQ41t8JmdiGklsRfYD_xY0NTyfAB9Ywxb6FdTFIvYmbNS7QGnB4jbdirBfS1zbaGEiytdHKmxxcgoVLHogDpPI6jWqkZfJ5Y1LnUQ4XbN2YJm9F5VytzUAJcWmHA5_F5uP17dbrkQPYDhZh5MNFtRRn_CwoyWBSfSlA1wIhyaSlO0YcBfiuLDLfZqM83IfMEIoNewjllrKA9DhvqWUb4o3-8iSKVzqOUS54acV-SIN3MjEZVY6PEm4znLBGfxW0daXiKL5V5NUJpOHVtXr9XwwUrHI-BdpbmqUEHjE8IWmYFSTi5H1ddL0-ufx1thnnMocYEU9jC8NLpPKfK8mITDwXktiGMSYujXEWgy1DLZzLSw4mLqbroS07rwNoDpLcMCL8cfsowD4loSWNzS0nb1tlNLGIc4bgvGlvWgtn5sNoY_mWQga7yW3loxBl7XC-NAVdL9cx8hGFRS2_NL4G2hZKK8m4=w263-h54-no" alt></p><p>回しました。<br>最初は pivot がおかしくなりそうで苦労していましたが、<br>調べてみたら transform-origin とかいう神プロパティがあるそうで</p><p>それで意外とかんたんにできましたー。やったー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>皆さんガロア理論の本おすすめです。</p><p><a href="https://amzn.to/2LUYNHh" target="_blank" rel="noopener">https://amzn.to/2LUYNHh</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Dear Mr. Tomohide Suzuki&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://t.co/rX
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo で検索結果を表示するページを生成するプラグインを作った。</title>
    <link href="http://asterisks.netlify.com/2018/02/07/hexo-search-result/"/>
    <id>http://asterisks.netlify.com/2018/02/07/hexo-search-result/</id>
    <published>2018-02-07T16:43:47.000Z</published>
    <updated>2020-03-17T02:25:18.651Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。</p><p>今回は新しく作った Hexo のプラグインについて、<br>仕組みや工夫したところなどを書きたいと思います。</p><h2 id="追記：2018-02-08"><a href="#追記：2018-02-08" class="headerlink" title="追記：2018/02/08"></a>追記：2018/02/08</h2><p>client 側の工夫したところが消えましたｗ<br>多分 vscode-vim で insert モードを解除せずに消しちゃったからかな<br>とりあえず大まかには書いておきました。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> で生成された search.xml を使って、<br>検索結果を表示するページを作成します。</p><p>このブログでも使用しています。<br>サイドバーの検索ボックスで検索すると、このプラグインで生成されたページが表示されます。</p><h2 id="リポジトリ"><a href="#リポジトリ" class="headerlink" title="リポジトリ"></a>リポジトリ</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/shundroid/hexo-search-result" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>続きは<a href="https://github.com/shundroid/hexo-search-result" target="_blank" rel="noopener">上のリポジトリのREADME.md</a>に書いてあります。</p><h2 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h2><p>空のページを作成し、そこに <code>{% search_result %}</code> と書くことで、<br>ページが表示されるようにしています。<br>このタグが読み込まれると、そこに <code>&lt;div&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code> が<br>挿入されるようになっています。</p><h3 id="Hexo-側"><a href="#Hexo-側" class="headerlink" title="Hexo 側"></a>Hexo 側</h3><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'hexo-fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSearchResult</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([fs.readFile(path.join(__dirname, <span class="string">'./client.js'</span>)),</span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'./style.css'</span>))]).then(<span class="function"><span class="params">contents</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;div id="plugin-search-result"&gt;&lt;/div&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;script&gt;'</span> + contents[<span class="number">0</span>] + <span class="string">'&lt;/script&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;style&gt;'</span> + contents[<span class="number">1</span>] + <span class="string">'&lt;/style&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(<span class="string">'search_result'</span>, insertSearchResult, &#123;</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>script、style の読み込みは、webpack などをつかってもよかったのですが、　<br>今回は小規模に作りたかったので、単純にファイル読み込み＋inline 出力で実装しました。</p><p>この時、タグの中身に非同期プロセスを含みますので、<br><code>tag.register</code> には引数で <code>{ async: true }</code> を渡しています。<br>また、fs は代わりに <a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="noopener">hexo-fs</a> を利用して、それが <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> を返してくれています。<br>2ファイル読んでいるので、<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all</a> を使用して並立にしています。</p><h3 id="ブラウザ側"><a href="#ブラウザ側" class="headerlink" title="ブラウザ側"></a>ブラウザ側</h3><p>ここで読み込んでいる script は、ブラウザ側で動作しますね。<br>そちらも見てみましょう。</p><p>流れは、</p><ol><li>hexo-generator-search で生成された search.xml を xhr で読み込む</li><li>そこから検索</li><li>検索結果を dom として生成</li></ol><p>という感じです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>このような感じでプラグインを作りました。<br>よろしければ使ってみてください。<br>バグ・機能要望などは <a href="https://github.com/shundroid/hexo-search-result/issues" target="_blank" rel="noopener">Github Issues</a> へ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。お久しぶりです。&lt;/p&gt;
&lt;p&gt;今回は新しく作った Hexo のプラグインについて、&lt;br&gt;仕組みや工夫したところなどを書きたいと思います。&lt;/p&gt;
&lt;h2 id=&quot;追記：2018-02-08&quot;&gt;&lt;a href=&quot;#追記：2018-02
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://asterisks.netlify.com/tags/hexo/"/>
    
      <category term="javascript" scheme="http://asterisks.netlify.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>【Spacechem】Sync-3 何回かに１回</title>
    <link href="http://asterisks.netlify.com/2018/01/04/spacechem-sync-3/"/>
    <id>http://asterisks.netlify.com/2018/01/04/spacechem-sync-3/</id>
    <published>2018-01-04T19:13:00.000Z</published>
    <updated>2020-03-17T02:25:18.654Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の３つ目です。</p><p>今回は Sync コマンドの応用の使用法の１つである、</p><p><strong>何回かに１回</strong></p><p>について説明しようと思います。</p><p>具体的には、</p><p>１つのウォルドが何回か実行するたびに、<br>もう１つのウォルドが１回処理する</p><p>というのを繰り返すことです。</p><h2 id="例：-ヘーパイストスIV-KOHCTPYKTOP"><a href="#例：-ヘーパイストスIV-KOHCTPYKTOP" class="headerlink" title="例： ヘーパイストスIV KOHCTPYKTOP"></a>例： ヘーパイストスIV KOHCTPYKTOP</h2><p>例として、ヘーパイストスIV のサイドストーリー、<br>KOHCTPYKTOP の、ケイ素の分子を作り出すところを見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4599/24624685777_5bc4763e5b_o_d.gif" alt></p><p>めちゃくちゃ長い処理になってしまったので、<br>早送りしていますが、</p><p>赤のウォルドで２回輪の形をしたケイ素の分子を作った後、<br>青のウォルドで１回３×３の正方形を作っています。</p><p>ここでは、「２回に１回」という仕組みが使われています。<br>どのような仕組みになっているのでしょうか。</p><p><img src="https://farm5.staticflickr.com/4593/25621590808_81ec3c9a12_o_d.png" alt></p><p>このように、赤のウォルドに sync が２つあるのに対し、<br>青のウォルドに sync が４つあるので、<br>赤が２回回らないと、青が１回回らない、<br>つまり「２回に１回」が実現しています。</p><p><img src="https://farm5.staticflickr.com/4730/39491358761_9f5e8448fd_o_d.gif" alt><br>↑単純化してみました。</p><p><img src="https://farm5.staticflickr.com/4601/39491359011_707e89184f_z_d.jpg" alt><br>横が時間軸、赤と青が処理するウォルドを表しています。</p><h2 id="Sync-の数"><a href="#Sync-の数" class="headerlink" title="Sync の数"></a>Sync の数</h2><p>公式っぽくすると、</p><p><strong>赤がn回処理した後、青が1回処理する場合、</strong><br><strong>赤に sync を２つ、青に sync を 2n 個つける</strong></p><p>と、３回に１回、４回に１回、…でもできます。</p><h3 id="「交互に実行」も同じ"><a href="#「交互に実行」も同じ" class="headerlink" title="「交互に実行」も同じ"></a>「交互に実行」も同じ</h3><p>前回の<a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-2/">交互に実行</a>も、<br>今回の公式っぽいのを使えば、「１回に１回」として sync の数がわかります。</p><h2 id="何回かに１回、同時に処理を実行"><a href="#何回かに１回、同時に処理を実行" class="headerlink" title="何回かに１回、同時に処理を実行"></a>何回かに１回、同時に処理を実行</h2><p>こっちのほうが言葉通りな気もします。</p><p>何回かに１回、同時に実行します。</p><p><img src="https://farm5.staticflickr.com/4683/24624690747_b618d5ecf5_o_d.gif" alt></p><p><img src="https://farm5.staticflickr.com/4647/24624691107_2e601248dd_o_d.png" alt><br>２回目で重なって実行されます。</p><p>この２つ、何が違うのでしょうか。</p><h2 id="Sync-の位置が大事"><a href="#Sync-の位置が大事" class="headerlink" title="Sync の位置が大事"></a>Sync の位置が大事</h2><p>実は Sync の位置がとても重要になっています。<br>Sync の位置により、この２つの動作が変わってきます。</p><h3 id="１回処理するウォルドのどちらかに奇数個の-Sync-がある場合"><a href="#１回処理するウォルドのどちらかに奇数個の-Sync-がある場合" class="headerlink" title="１回処理するウォルドのどちらかに奇数個の Sync がある場合"></a>１回処理するウォルドのどちらかに奇数個の Sync がある場合</h3><p>この例でいえば青のウォルドの上下左右どれかに、奇数個の Sync があれば、<br>何回かに１回、別々に実行する、<br>先に書いたほうの動きをします。</p><h3 id="１回処理するウォルドのどちらかに偶数個の-Sync-がある場合"><a href="#１回処理するウォルドのどちらかに偶数個の-Sync-がある場合" class="headerlink" title="１回処理するウォルドのどちらかに偶数個の Sync がある場合"></a>１回処理するウォルドのどちらかに偶数個の Sync がある場合</h3><p>この例でいえば青のウォルドの上下左右どれかに、偶数個の Sync があれば、<br>何回かに１回、同時に実行する、<br>後に書いたほうの動きをします。</p><h3 id="左右にある-Sync-の数によって、タイミングが変わる"><a href="#左右にある-Sync-の数によって、タイミングが変わる" class="headerlink" title="左右にある Sync の数によって、タイミングが変わる"></a>左右にある Sync の数によって、タイミングが変わる</h3><p>次のような動きをするにはどうすればよいでしょう。<br>赤１回、青１回、赤１回、を繰り返します。<br><img src="https://farm5.staticflickr.com/4592/39491358871_f58233136b_z_d.jpg" alt></p><p>赤と青が同時に処理しないので、先に述べた方法で、<br>奇数個の sync が青の両側にあります。</p><p><img src="https://farm5.staticflickr.com/4636/24624691367_2a3ccb1529_o_d.gif" alt></p><p>そして、その sync の配分を替えると、タイミングが変わります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こんな感じで、Sync を使えば、様々な処理を自在にできます。<br>かなり奥深いです。ぜひ実践してみてください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。&lt;/p&gt;
&lt;iframe class=&quot;hatenablogcard&quot; style=&quot;width: 100%; height: 155px; max-width: 680px;&quot; src=&quot;https://hatenablog-parts.com/embed?u
      
    
    </summary>
    
      <category term="SERIES" scheme="http://asterisks.netlify.com/categories/SERIES/"/>
    
      <category term="Spacechem-Tips" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/"/>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
      <category term="spacechem" scheme="http://asterisks.netlify.com/tags/spacechem/"/>
    
  </entry>
  
  <entry>
    <title>Wercker を使って Hexo の deploy を自動化する</title>
    <link href="http://asterisks.netlify.com/2018/01/04/automatically-deploy-wercker/"/>
    <id>http://asterisks.netlify.com/2018/01/04/automatically-deploy-wercker/</id>
    <published>2018-01-04T13:11:34.000Z</published>
    <updated>2020-03-17T02:25:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。</p><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> にブログを移行しましたが、<br>一回一回記事を上げるごとに、<code>git commit</code> して <code>hexo deploy</code> するのは<br>めんどくさいですよね。</p><p>そこで、今回は <a href="https://www.wercker.com/" target="_blank" rel="noopener">wercker</a> を使って git commit されると自動で<br>デプロイしてくれるようにします。</p><h2 id="目指す運営形態"><a href="#目指す運営形態" class="headerlink" title="目指す運営形態"></a>目指す運営形態</h2><p><img src="https://farm5.staticflickr.com/4635/24621049717_501df4a1cc_z_d.jpg" alt></p><p>上のような形を目指し、今回 Wercker に関するところを作っていきます。</p><p>間に通しすぎじゃないか！？と言われるかもしれませんが、それぞれ意味があります。</p><ul><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a>: ブログ全体の非公開リポジトリ。</li><li><strong><a href="https://wwwwercker.com/" target="_blank" rel="noopener">Wercker</a>: Bitbucket の更新をチェックし、自動で Github にデプロイ</strong>←今回作ります</li><li><a href="https://github.com" target="_blank" rel="noopener">Github</a>: 生成されたサイトのリポジトリ。</li><li><a href="https://netlify.com" target="_blank" rel="noopener">Netlify</a>: Github の更新をチェックし、サイトをホスト。</li></ul><p>Github がいらなそうですが、<br>ぼくはこのサイトを、パスワードなどを含めない部分はオープンソースにして、<br>構造などを公開したいと思っているので、いります！</p><p>Netlify じゃなくて <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> でもよさそうですが、<br>性能が Netlify のほうがいいので、そっちを使っています。</p><h2 id="wercker-yml-を作成"><a href="#wercker-yml-を作成" class="headerlink" title="wercker.yml を作成"></a>wercker.yml を作成</h2><p>プロジェクトのルートディレクトリに、<br>wercker.yml を次のような内容で作成します。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">box:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm-install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">echo</span> <span class="string">nodejs</span> <span class="string">information</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"node version $(node -v) running"</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"npm version $(npm -v) running"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">configure</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&lt;Github</span> <span class="string">メールアドレス&gt;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&lt;Github</span> <span class="string">ユーザー名&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install</span> <span class="string">theme</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/shundroid/hexo-theme-chan.git</span> <span class="string">themes/chan/</span> <span class="string">--depth=1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">to</span> <span class="string">github</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><p>build のほうはデフォルトから変えていません。（デフォルトはあとで登場します）<br>deploy 側が独自です。ここには僕がハマった経験がたくさん詰まっています。</p><h3 id="テーマの-clone-を忘れずに！"><a href="#テーマの-clone-を忘れずに！" class="headerlink" title="テーマの clone を忘れずに！"></a>テーマの clone を忘れずに！</h3><p>deploy 内で、install theme していますね。<br>これなのですが、テーマをクローンし忘れると、<br><code>WARN No layout: xxx</code> というエラーが出まくり、<br>空のブログが作成されますw</p><p>ちなみに、 <code>--depth=1</code> を入れると、深く log を取らないので、<br>パフォーマンスの改善になります。</p><p>ご自分のテーマに合わせて、クローン元・クローン先を変更してください。</p><h3 id="hexo-はグローバルインストールしなければならなかった"><a href="#hexo-はグローバルインストールしなければならなかった" class="headerlink" title="hexo はグローバルインストールしなければならなかった"></a>hexo はグローバルインストールしなければならなかった</h3><p>プロジェクトにインストールされている hexo を、<br><code>./node_modules/.bin/hexo</code> として実行しようとしましたが、全く反応しなかったです。<br>npm scripts にコマンドを追加してもやってみましたが、同様でした。<br>仕方なくグローバルインストールしました。</p><h2 id="Github-から-Personal-Token-を取得"><a href="#Github-から-Personal-Token-を取得" class="headerlink" title="Github から Personal Token を取得"></a>Github から Personal Token を取得</h2><p><a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">https://github.com/settings/tokens/new</a></p><p>↑にアクセスして、Token を作成します。<br>チェックは、public_repo にのみ入れてください。<br>トークンができたら、暗記してください（大嘘）</p><p>というか暗記できるくらいの記憶力が欲しいよ――</p><h2 id="チェック：プロジェクトは非公開になっていますか？"><a href="#チェック：プロジェクトは非公開になっていますか？" class="headerlink" title="チェック：プロジェクトは非公開になっていますか？"></a>チェック：プロジェクトは非公開になっていますか？</h2><p>これから、プロジェクトにトークンを書き込みますが、<br>この時、プロジェクトが公開されていると、かなりセキュリティ的に危険です。<br>非公開にしましょう。※ブログを非公開にするのではありません</p><p>Github は学生でなければ非公開リポジトリは作れませんが、<br>Bitbucket は<a href="https://asterisks.netlify.com/2016/02/16/git-private-bitbucket/">無料で作れます</a>。ぼくは Bitbucket を使っています。</p><p>また、プロジェクトを公開しなければならない場合は、<br>Wercker 側にトークンを非公開で設定し、それを使うという方法もあるそうです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://yuukichi.hatenablog.com/entry/2014/08/16/Hexo%2BGithub%2BWercker%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E6%A7%8B%E7%AF%89" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="config-yml-を変更"><a href="#config-yml-を変更" class="headerlink" title="_config.yml を変更"></a>_config.yml を変更</h2><p>プロジェクトのルートディレクトリにある、_config.yml を変更します。</p><p>deploy のところですね。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://先ほどのトークン@github.com/ユーザー名/リポジトリ.git</span></span><br></pre></td></tr></table></figure><h2 id="Wercker-で-Application-を登録"><a href="#Wercker-で-Application-を登録" class="headerlink" title="Wercker で Application を登録"></a>Wercker で Application を登録</h2><p><a href="http://www.wercker.com/" target="_blank" rel="noopener">http://www.wercker.com/</a></p><p>↑にアクセスして、Sign up しておいてください。</p><h3 id="Git-connections-を設定"><a href="#Git-connections-を設定" class="headerlink" title="Git connections を設定"></a>Git connections を設定</h3><p><a href="https://app.wercker.com/profile/connections" target="_blank" rel="noopener">https://app.wercker.com/profile/connections</a></p><p>ここにアクセスして、プロジェクトが使っているリモートのサービスとリンクしましょう。<br>ぼくは Bitbucket なので、Bitbucket とリンクしました。</p><h3 id="Application-を作成"><a href="#Application-を作成" class="headerlink" title="Application を作成"></a>Application を作成</h3><p><a href="https://app.wercker.com/applications/create" target="_blank" rel="noopener">https://app.wercker.com/applications/create</a></p><p>ここにアクセスして、アプリを作りましょう。<br>といっても超シンプルです。</p><p><img src="https://farm5.staticflickr.com/4730/27712999959_dcd673bd0a_z_d.jpg" alt></p><p>まず SCM を選びます。これはプロジェクトが使っているやつですね。<br>ぼくは Bitbucket なのでそれを選びました。<br>選んだら Next</p><p><img src="https://farm5.staticflickr.com/4636/24622953277_97c4afdca5_z_d.jpg" alt><br>リポジトリを選びます。これはそのプロジェクト自体ですね。<br>選んだら Next</p><p><img src="https://farm5.staticflickr.com/4690/24622954397_a245b5079b_z_d.jpg" alt><br>その次は deploy key に関するやつですが、recommended でいいので Next</p><p>その次は公開したいなら Make my app public ですが、<br>どっちでもいいです。</p><p><img src="https://farm5.staticflickr.com/4639/39458968172_e3a1a4b027_z_d.jpg" alt><br>これで完了です。<br>色々出ていますが、すでに wercker.yml は作っているので気にしなくていいです。</p><h3 id="Workflow-の設定"><a href="#Workflow-の設定" class="headerlink" title="Workflow の設定"></a>Workflow の設定</h3><p>あと少し！</p><p><img src="https://farm5.staticflickr.com/4681/38780826214_2977ef6400_z_d.jpg" alt><br>上のほうのタブの「Workflows」を押します。</p><p><img src="https://farm5.staticflickr.com/4601/38780827854_30ef8c496b_z_d.jpg" alt><br>「Add new pipeline」します。</p><p><img src="https://farm5.staticflickr.com/4599/39489549651_1e10f837f0_z_d.jpg" alt><br>写真のように、Name も YML Pipeline name も deploy でお願いします。<br>Create を押します。</p><p><img src="https://farm5.staticflickr.com/4681/38780826214_2977ef6400_z_d.jpg" alt><br>色々出るので、もう一度 Workflows を押します。</p><p><img src="https://farm5.staticflickr.com/4595/24623007457_cf7630a9aa_m_d.jpg" alt><br>Editor の + を押して、<br>Execute Pipeline を deploy にして、Add しましょう。</p><p>これで、build 後に deploy が走るようになりました。</p><h2 id="commit-amp-push-する"><a href="#commit-amp-push-する" class="headerlink" title="commit &amp; push する"></a>commit &amp; push する</h2><p>さて、これでコミットしてプッシュしたら、<br>deploy されるはずですね。</p><p>ローカルで、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">&lt;wercker.ymlが追加されていることを確認&gt;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"added wercker.yml"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>ブランチ名、リモート名は自分の環境に合わせ変えてください。<br>コミット名は何でもいいですよ。</p><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p><img src="https://farm5.staticflickr.com/4681/25619668058_872b259928_z_d.jpg" alt><br>こんな感じで build、deploy ともに成功すれば多分おｋです。</p><p><img src="https://farm5.staticflickr.com/4687/25619626518_4335bee8f5_z_d.jpg" alt><br>Github のほうにも push されていることを確認しましょう。</p><h3 id="できていなかったら・・・"><a href="#できていなかったら・・・" class="headerlink" title="できていなかったら・・・"></a>できていなかったら・・・</h3><p>ぼくがハマったポイントを改めて書いておきます。</p><ul><li>テーマはあっていますか（wercker.yml）</li><li>Token は正しいですか（_config.yml）</li><li>git config の設定はできていますか（wercker.yml）</li><li>Pipeline の設定は正しいですか</li></ul><h2 id="今後：Wercker-の良さを最大限活かす"><a href="#今後：Wercker-の良さを最大限活かす" class="headerlink" title="今後：Wercker の良さを最大限活かす"></a>今後：Wercker の良さを最大限活かす</h2><p>さて、これで自動 deploy ができました。<br>しかし、まだ改善点はあります。</p><p>hexo を毎回グローバルインストールするのもあれなんで、<br>すでに hexo が入った box を使いたいですね。</p><p>wercker らしい感じもします。</p><p>やろうと思いましたが、ちょっと疲れちゃって挫折しました。<br>とりあえず現状で動くので、将来的に直します。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; にブログを移行しましたが、&lt;br&gt;一回一回記事を上げるごとに、&lt;code&gt;git co
      
    
    </summary>
    
      <category term="Blog Management" scheme="http://asterisks.netlify.com/categories/Blog-Management/"/>
    
    
      <category term="hexo" scheme="http://asterisks.netlify.com/tags/hexo/"/>
    
      <category term="wercker" scheme="http://asterisks.netlify.com/tags/wercker/"/>
    
      <category term="ci" scheme="http://asterisks.netlify.com/tags/ci/"/>
    
      <category term="javascript" scheme="http://asterisks.netlify.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ブログ移転しました！</title>
    <link href="http://asterisks.netlify.com/2018/01/03/moved-blog/"/>
    <id>http://asterisks.netlify.com/2018/01/03/moved-blog/</id>
    <published>2018-01-03T11:54:45.000Z</published>
    <updated>2020-03-17T02:25:18.652Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>あけましておめでとうございます。今年もよろしくお願いします。</p><p><img src="https://farm5.staticflickr.com/4598/38755022294_89ab7bb022_o_d.png" alt></p><p>さて、ブログを WordPress から <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> に移転しました！<br>ここではブログ移転の経緯などを説明していきたいと思います。</p><h2 id="今までメールアドレスで購読していただいた方"><a href="#今までメールアドレスで購読していただいた方" class="headerlink" title="今までメールアドレスで購読していただいた方"></a>今までメールアドレスで購読していただいた方</h2><p>いつもありがとうございます。<br>Hexo ではデフォルトでメールアドレスによる購読ができません。</p><p>今後プラグインを使い、対応させていくかもしれませんが、<br>それまで、前のサイトでも使っていた、<br><a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a> などの RSS リーダーによる購読をよろしくお願いします。</p><p><a data-flickr-embed="true" data-header="true" data-footer="true" href="http://www.flickr.com/photos/126344033@N06/25591704648" title="asterisks-feed" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4640/25591704648_47d880f8c0_z.jpg" alt="asterisks-feed" class="alignnone"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><h2 id="移行の背景"><a href="#移行の背景" class="headerlink" title="移行の背景"></a>移行の背景</h2><h3 id="重かった"><a href="#重かった" class="headerlink" title="重かった"></a>重かった</h3><p>WordPress は、ページを表示する際、動的にサーバー側でいろいろするので、重いんです。<br>それに対し、このサイトでは、すでにある Web ページをただ単に表示しているだけなので、処理が少なく、軽いんです。</p><h3 id="自分の専門分野"><a href="#自分の専門分野" class="headerlink" title="自分の専門分野"></a>自分の専門分野</h3><p>WordPress は、プラグインの作成やテーマの編集に、php を使っていました。<br>Hexo では、すべて自分の専門分野である JavaScript で開発できるので、すごく楽なんです。</p><p>もうすでに１つ独自プラグインを使用しており、テーマも自分好みにがりがり改造しています。<br>それについても記事を上げたいと思います。</p><h3 id="URL-が単純に"><a href="#URL-が単純に" class="headerlink" title="URL が単純に"></a>URL が単純に</h3><p>今まで <code>polaris-bear.lolipop.jp</code> と、謎のドメイン名でしたね。<br>これは、母のサイトのドメインを使って、僕のブログをやっていたので、<br>こういう名前になってしまっています。<br>しかも lolipop って打ちにくいですよねｗ右手の薬指と小指がｗｗ</p><p>今回は URL が単純になります。ご安心ください。</p><h3 id="セキュリティが万全"><a href="#セキュリティが万全" class="headerlink" title="セキュリティが万全"></a>セキュリティが万全</h3><p>サーバーサイドで記事を追加したり削除したりできないので、<br>不正ログインなどの概念が（Github を除けば）なくなります。</p><h3 id="無料"><a href="#無料" class="headerlink" title="無料"></a>無料</h3><p>実はサイトの運営には一切お金がかかっておりません。<br>詳しくは、↓で書きたいと思います。</p><h2 id="このサイトの仕組み"><a href="#このサイトの仕組み" class="headerlink" title="このサイトの仕組み"></a>このサイトの仕組み</h2><p>何度か書いていますが、このサイトは <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> を利用して作られています。<br>Hexo とは、静的サイトジェネレーターで、<br>記事やテーマ、プラグインなどをもとに、静的なサイトを自動生成するものです。</p><p>その生成されたサイトが、<a href="https://github.com/shundroid/asterisks" target="_blank" rel="noopener">Github のレポジトリ</a>に送られ、<br>それが <a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> によってホスティングされています。</p><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a> のレポジトリを直接ホストする、<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> もありますが、<br>Netlify はよりパフォーマンスが良く、リポジトリをそのまま使えるので、使用しています。</p><p>Hexo による生成の処理は、ローカルで行っています。</p><p>Netlify の CI で自動生成もできるらしいのですが、タイムアウトがあるらしく、<br>15分以内にビルド＆デプロイできないと、強制停止されてしまうそうです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://photo-tea.com/p/17/netlify-github-pages-hexo/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>そのため、シンプルにローカルで生成するようにしました。</p><p>サイト全体のバージョン管理には、<br><a href="https://asterisks.netlify.com/2016/02/16/git-private-bitbucket/">無料で非公開リポジトリが作成できる</a> <a href="https://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjutOqO7brYAhVJhbwKHc-6DqMQFgg5MAA&amp;url=https%3A%2F%2Fbitbucket.org%2F&amp;usg=AOvVaw1dx8LgKM4mYI8whQ_0OU-L" target="_blank" rel="noopener">Bitbucket</a> を使用しています。</p><p>また、Github、Netlify、Hexo など、すべて無料で使用しています。<br>これがオープンソースの力よ！浮いたお金でいつかは独自ドメインとるぞ！</p><h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>自分でプラグインやテーマなどを作れるので、<br>どんどんカスタマイズして、自分らしいブログを作っていきたいです！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;あけましておめでとうございます。今年もよろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm5.staticflickr.com/4598/38755022294_89ab7bb022_o_d.png
      
    
    </summary>
    
      <category term="diary" scheme="http://asterisks.netlify.com/categories/diary/"/>
    
    
      <category term="hexo" scheme="http://asterisks.netlify.com/tags/hexo/"/>
    
      <category term="javascript" scheme="http://asterisks.netlify.com/tags/javascript/"/>
    
      <category term="wordpress" scheme="http://asterisks.netlify.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>【Spacechem-tips】Sync-2 交互に実行</title>
    <link href="http://asterisks.netlify.com/2017/12/31/spacechem-sync-2/"/>
    <id>http://asterisks.netlify.com/2017/12/31/spacechem-sync-2/</id>
    <published>2017-12-31T14:38:29.000Z</published>
    <updated>2020-03-17T02:25:18.653Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の２つ目です。</p><p>今回は Sync コマンドの応用の使用法の１つである、</p><p><strong>交互に実行</strong></p><p>について説明しようと思います。</p><p>具体的には、</p><p>１つのウォルドの処理が終わったら、もう１つのウォルドの処理を行う</p><p>というのを繰り返すことです。</p><h2 id="例-ヘーパイストスIV-KOHCTPYKTOP"><a href="#例-ヘーパイストスIV-KOHCTPYKTOP" class="headerlink" title="例: ヘーパイストスIV KOHCTPYKTOP"></a>例: ヘーパイストスIV KOHCTPYKTOP</h2><p>例として、ヘーパイストスIV のサイドストーリー、<br>KOHCTPYKTOP を見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4647/39401220871_085e944a50_o.gif" alt="spacechem-sync-alternate"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>ヒ素とホウ素を、１つずつ交互に ψ に出力しています。</p><p>これも Sync コマンドを使って実装しています。</p><p>どのように実装しているのか見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4680/27623938539_1832c5d166.jpg" alt="spacechem-sync-alternate-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>Sync コマンド２つが使われていますね。<br>これは前回、<a href="http://polaris-bear.lolipop.jp/shunroom/798" target="_blank" rel="noopener">「待機」としての「同期」</a>で説明したのと同じ方法で、<br><strong>片方の処理が終わるのを待機している</strong>、という意味です。</p><p><strong>注目すべきは Start ブロックの位置</strong>です。<br>赤のほうは Sync に挟まれて、<br>青のほうは Sync の手前にあります。</p><p>ここからわかるように、<strong>青のほうは赤の処理がすべて終わるのをまず待機していて、<br>その後、赤のほうは青の処理がすべて終わるのを待機している</strong>のです。</p><p>このようにすることで、交互に実行することができています。</p><h2 id="使い道"><a href="#使い道" class="headerlink" title="使い道"></a>使い道</h2><p>１つの物質を２つの反応装置へ分岐させたり、<br>あるいは２つの物質を１つの反応装置へ集めたりするときに使えます。</p><p>しかし、この方法は、後に出てくる Flip Flop で、<br>必要なくなってしまいます。<br>わざわざ２つのウォルドを使わなくても、１つのウォルドで交互に処理ができるようになるのです。</p><p>Flip Flop が使えるのはアトロポス基地以降なので、<br>それまではかなり使えて便利な解法パターンです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。&lt;/p&gt;
&lt;iframe class=&quot;hatenablogcard&quot; style=&quot;width: 100%; height: 155px; max-width: 680px;&quot; src=&quot;https://hatenablog-parts.com/embed?u
      
    
    </summary>
    
      <category term="SERIES" scheme="http://asterisks.netlify.com/categories/SERIES/"/>
    
      <category term="Spacechem-Tips" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/"/>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
      <category term="spacechem" scheme="http://asterisks.netlify.com/tags/spacechem/"/>
    
  </entry>
  
  <entry>
    <title>【Spacechem-tips】Sync-1 「待機」としての「同期」</title>
    <link href="http://asterisks.netlify.com/2017/12/31/spacechem-sync-1/"/>
    <id>http://asterisks.netlify.com/2017/12/31/spacechem-sync-1/</id>
    <published>2017-12-31T14:09:23.000Z</published>
    <updated>2020-03-17T02:25:18.653Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の１つ目です。</p><p>今回は Sync コマンドの使い道の１つである、</p><p><strong>「待機」としての「同期」</strong></p><p>について説明したいと思います。</p><h2 id="Sync-の基本の使い方"><a href="#Sync-の基本の使い方" class="headerlink" title="Sync の基本の使い方"></a>Sync の基本の使い方</h2><p>その前に、まずは Sync の基本的な使い方を説明します。</p><p>Sync は、基本的に</p><p><strong>２つのウォルドのタイミングを合わせる</strong></p><p>ために使います。</p><p>例として、アルコノストの１ステージ目「検出の基本」を見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4594/38692049194_d773d64f8c_o.gif" alt="spacechem-basic-of-sensing"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>このように、２つのウォルドが、自転車のペダルのように、<br>ぐるぐると回っていますね。</p><p><img src="https://farm5.staticflickr.com/4687/38692953324_2ca95715b4.jpg" alt="sync-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p><strong>２つのウォルドのタイミングを合わせることで、原子同士の衝突を防いでいるのです。</strong></p><p>２つのウォルドで操作すると、<br>速度は２倍になりますから、<br>クリアに必要なサイクル数は２分の１と、減らすことができます。</p><p>もちろん、タイミングを合わせるのは、結合時など、<br>これ以外の使い方もできます。</p><h2 id="「待機」としての「同期」"><a href="#「待機」としての「同期」" class="headerlink" title="「待機」としての「同期」"></a>「待機」としての「同期」</h2><p>それでは、本題に移りましょう。<br>Sync コマンドは、<strong>「待機」としての使い方もできる</strong>のです。</p><p>例として、ダノプスのサイドストーリー、実験：その場で入れ替えを見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4739/38692952924_fe26964343_o.gif" alt="sync-wait"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>いくつか Sync コマンドがありますが、下の Sync コマンドに注目してください。</p><p><img src="https://farm5.staticflickr.com/4733/27623557119_b0619281b9.jpg" alt="sync-wait-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>１ウォルドに２つずつ、Sync コマンドがありますね。<br>赤のウォルドが結合装置の手前に来た時に Sync して、<br>その後もう一度 Sync しています。<br>最初の Sync で、青のウォルドは結合の除去を開始していますね。<br>除去が終わったら再び Sync して、赤のウォルドを動かし始めます。</p><p>このように、Sync コマンドには、</p><p><strong>片方の処理が終わるまで待機する</strong></p><p>という使い方ができます。<br>このような場合、片方の処理を開始するため、<br><strong>通常２つ Sync をセットにして使うことが多い</strong>です。</p><p>この考え方は、ゲームの最後の最後まで使うことができるので、とても便利です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。&lt;/p&gt;
&lt;iframe class=&quot;hatenablogcard&quot; style=&quot;width: 100%; height: 155px; max-width: 680px;&quot; src=&quot;https://hatenablog-parts.com/embed?u
      
    
    </summary>
    
      <category term="SERIES" scheme="http://asterisks.netlify.com/categories/SERIES/"/>
    
      <category term="Spacechem-Tips" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/"/>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
      <category term="spacechem" scheme="http://asterisks.netlify.com/tags/spacechem/"/>
    
  </entry>
  
  <entry>
    <title>Spacechem の重要テクニック集！</title>
    <link href="http://asterisks.netlify.com/2017/12/31/spacechem-points/"/>
    <id>http://asterisks.netlify.com/2017/12/31/spacechem-points/</id>
    <published>2017-12-31T12:45:06.000Z</published>
    <updated>2020-03-17T02:25:18.653Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>最終ステージ「そして結末へ（End Of The Line）」をクリアすることができました！</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-cleared-end-of-the-line/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>そこで、今まで僕がクリアしていくうえで役に立った解法のポイントがあるので、<br>それらを紹介していこうと思います。</p><p>僕が大事だと思う解法のポイントは、ずばり３つ！</p><ul><li><strong>Sync</strong></li><li><strong>回転</strong></li><li><strong>Flip Flop</strong></li></ul><p>です！<br>それぞれについて紹介していこうと思います。</p><p>徐々に記事を公開していきます。<br>公開まで少々お待ちください。</p><h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><p><img src="https://farm5.staticflickr.com/4726/38521809415_900b55c71a_o.png" alt="spacechem-sync"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><!-- タイミング合わせ：検出の基本 --><ol><li><a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-1/">「待機」としての「同期」</a> <!-- タイミング合わせ、ではない → 実験：その場で入れ替え　の窒素 --></li><li><a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-2/">交互に実行</a> <!-- KOCH ヒ素・ホウ素 --></li><li><a href="https://asterisks.netlify.com/2018/01/04/spacechem-sync-3/">何回かに１回</a> <!-- KOCH ケイ素 --></li></ol><h2 id="回転"><a href="#回転" class="headerlink" title="回転"></a>回転</h2><p><img src="https://farm5.staticflickr.com/4646/39399934191_13d1e9f61a_o.png" alt="spacechem-rotate"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><ol><li>点対称な分子の生成 その１ <!-- 親玉の風格 回転の中心が真ん中 --></li><li>点対称な分子の生成 その２ <!-- KOCH ケイ素 回転の中心が移動する --></li><li>点対称な分子の生成 その３ <!-- Al-O 機会を超えた存在 --></li><li>点対称な分子の結合の除去 <!-- KOCH 二酸化ケイ素 --></li></ol><h2 id="Flip-Flop"><a href="#Flip-Flop" class="headerlink" title="Flip Flop"></a>Flip Flop</h2><p><img src="https://farm5.staticflickr.com/4590/38521809245_7a26e9419b_o.png" alt="spacechem-flip-flop"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><ol><li>スイッチバック</li><li>合流</li><li>何回かに１回</li><li>分岐（２の累乗）</li><li>分岐（その他）</li></ol><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><ol><li>正方形の生成 その１ <!-- KOCH ケイ素 --></li><li>正方形の生成 その２ <!-- 分子製造工場 セメンタイト --></li><li>核融合 <!-- 結合したままできる --></li><li>役割分担</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;最終ステージ「そして結末へ（End Of The Line）」をクリアすることができました！&lt;/p&gt;
&lt;iframe class=&quot;hatenablogcard&quot; style=&quot;width: 100%; height: 155p
      
    
    </summary>
    
      <category term="SERIES" scheme="http://asterisks.netlify.com/categories/SERIES/"/>
    
      <category term="Spacechem-Tips" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/"/>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/SERIES/Spacechem-Tips/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
      <category term="spacechem" scheme="http://asterisks.netlify.com/tags/spacechem/"/>
    
  </entry>
  
  <entry>
    <title>【Spacechem】最終ステージ「そして結末へ」クリアした！</title>
    <link href="http://asterisks.netlify.com/2017/12/31/spacechem-cleared-end-of-the-line/"/>
    <id>http://asterisks.netlify.com/2017/12/31/spacechem-cleared-end-of-the-line/</id>
    <published>2017-12-31T11:04:45.000Z</published>
    <updated>2020-03-17T02:25:18.653Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>2017 年も今日で最後ですねー。早いなあ</p><p>そして 2017 年中に、なんと、<br><a href="http://store.steampowered.com/app/92800/SpaceChem/?l=japanese" target="_blank" rel="noopener">Spacechem</a> をクリアすることができましたーーーー！！！！！！</p><p>今年の11月、オータムセールの直前に定価で購入しました。<br>そこから 148 時間プレイして、なんとかクリアに至りました。</p><h2 id="クリア時の映像"><a href="#クリア時の映像" class="headerlink" title="クリア時の映像"></a>クリア時の映像</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/ydxOkgKhcJ8" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><h2 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h2><p>クリアする確率を上げたかったため、クリア時の映像より貯蔵タンクが増えています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/TRFDdboUjh0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>基本は<strong>相手を動かさない</strong>ことです。<br>そのために高頻度でレーザーを発射して相手の動きを止め、<br>ミサイルもバンバン打ちます。<br>Ω原子が徐々にたまってしまうのが大変です。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>本当に難しかったです。</p><p><img src="https://farm5.staticflickr.com/4739/38520580595_6cd0b8e10e_o.gif" alt="end-of-the-line"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>最後のステージは、VGM レーザー反応装置内で、<br>Σ-エチレン と 炭素が３つつながったやつから、<br>Σ-疑似ベンゼンという物質を作るようにしたのですが、<br>これをそのまま６つの結合装置でくっつけても、<br>期待した結合通りにいきませんでした。</p><p>そこで、まず最初に炭素を６つ結合させて、<br>そこからΣ-エチレンを２つに分けたものをサイドにつけるようにしたら、<br>うまく結合してくれました。</p><p>このように、このゲームに必要なのは試行錯誤です。<br>トライアンドエラーの繰り返しで、正解が見つかります。</p><p>本当に難しかったです。</p><p>当初は受験勉強の合間に息抜きとしてやろうと思って買ったのですが、<br>受験勉強と Spacechem 、どっちが息抜きになったのやら・・</p><h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>一通りクリアしたので、今後 Spacechem については、<br>僕が解いていくうえで役に立った解法などを、紹介していこうと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。shundroid です。&lt;br&gt;2017 年も今日で最後ですねー。早いなあ&lt;/p&gt;
&lt;p&gt;そして 2017 年中に、なんと、&lt;br&gt;&lt;a href=&quot;http://store.steampowered.com/app/92800/SpaceChem/?l=ja
      
    
    </summary>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
      <category term="spacechem" scheme="http://asterisks.netlify.com/tags/spacechem/"/>
    
  </entry>
  
  <entry>
    <title>【Steam】Oxygen Not Included を 20% OFF で買った</title>
    <link href="http://asterisks.netlify.com/2017/12/30/bought-oxygen-not-included/"/>
    <id>http://asterisks.netlify.com/2017/12/30/bought-oxygen-not-included/</id>
    <published>2017-12-30T13:24:04.000Z</published>
    <updated>2020-03-17T02:25:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。メリークリスマス！（遅い）<br>Steam でついにウィンターセールが始まりましたね！（遅い）</p><p>そこで、何のゲームを買おうか精査してきたわけですが、<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/15/wants-in-steam-winter-sale-2017/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>今回、ついに買うゲームが決まりました！<br>そのうちの一つは、Oxygen Not Included です！</p><p><a href="http://www.flickr.com/photos/126344033@N06/24516168637" title="Steam Winter Sale ONI 20% OFF" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4598/24516168637_2852118f5f_o.png" alt="Steam Winter Sale ONI 20% OFF"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>今年の５月から我慢してきたゲーム、<br>20% OFF で購入できました！</p><p>早速プレイしてみたので、紹介したいと思います。</p><p><a href="http://www.flickr.com/photos/126344033@N06/39381344611" title="oni-screenshot" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4642/39381344611_b88e7a9e19_c.jpg" alt="oni-screenshot"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>45時間プレイしました。<br>45時間でまだ Cycle 48 かよ！と突っ込まれそうですが、<br>ここにはかなりの苦労があったのです。</p><h3 id="セーブデータ１つ目"><a href="#セーブデータ１つ目" class="headerlink" title="セーブデータ１つ目"></a>セーブデータ１つ目</h3><p>１つ目は、Cycle 90 くらいまで進んでいましたが、<br>まさかの、<strong>浄水をためていたところに失禁されてしまい</strong>、<br>食中毒が多発し、やっていけなくなってしまったのです。<br>ちょうどトイレがすべて使用中だったのですが、・・・そこでする？</p><p>ここから、</p><ul><li>浄水槽の上はふさいでおいたほうがいい</li><li>トイレはたくさん作れ</li></ul><p>という教訓を得ました。</p><h3 id="セーブデータ２つ目"><a href="#セーブデータ２つ目" class="headerlink" title="セーブデータ２つ目"></a>セーブデータ２つ目</h3><p>気を取り直した２つ目、実は Cycle 2 で死にました。<br>というのは、浄水槽を作っていたのですが、<br>そこにはしごを作り忘れていたら、水から出られなくなってしまい、<br>気づかずに就寝、その後・・・・・・・・予想通りです（涙）</p><p><a href="http://www.flickr.com/photos/126344033@N06/39351557902" title="oni-sleep-in-water" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4590/39351557902_477d9d729e_z.jpg" alt="oni-sleep-in-water"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑そこで寝ないでよ（涙）</p><p><a href="http://www.flickr.com/photos/126344033@N06/25511741298" title="oni-emergency" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4593/25511741298_8acf4e9736_o.png" alt="oni-emergency"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>ちなみに、このような非常事態は、右上の<br>「警報を切り替える」を押せば乗り越えられたらしいのですが、<br>そんなこと知らなかったよー・・</p><p>ここから、</p><ul><li>警報機能の重要さ</li><li>取り残される人が出ないよう、常に作業をチェックする</li></ul><p>という教訓を得ました。</p><h3 id="セーブデータ３つ目"><a href="#セーブデータ３つ目" class="headerlink" title="セーブデータ３つ目"></a>セーブデータ３つ目</h3><p>三度目の正直の３つ目、実はかなり安泰です。</p><p><a href="http://www.flickr.com/photos/126344033@N06/38673362614" title="oni-steam-geyser" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4590/38673362614_2588367a55_z.jpg" alt="oni-steam-geyser"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>コロニーの割と近くに<strong>蒸気間欠泉</strong>があり、水が無限に手に入るのですｗ<br>ここから、水以外にも酸素も無限に作り出せて、<br>また水素を作れるので、水素発電によりかなり電気も安泰ですｗ</p><p><a href="http://www.flickr.com/photos/126344033@N06/25511859068" title="oni-oxygen-factory" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4594/25511859068_fd467d81e9.jpg" alt="oni-oxygen-factory"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑酸素・電気メーカー</p><p><a href="http://www.flickr.com/photos/126344033@N06/38673355624" title="oni-much-oxygen" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4736/38673355624_e42f4b0513.jpg" alt="oni-much-oxygen"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑酸素状況はかなり良い</p><p><strong>藻が０なのに</strong>ずっと生活できます。水の大切さを知りました。</p><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/30/game-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑ で紹介したポイントに沿ってレビューしていきます</p><h3 id="独創性"><a href="#独創性" class="headerlink" title="独創性"></a>独創性</h3><p><strong>5（とても満足）</strong><br>キャラクターに指示を出して行動してもらうところは、Rimworld に少々似ていますが、<br>ゲームの根幹である「酸素がない空間で生き残る」というのは、<br>ゲームに張り詰めた緊張感を与えてくれて、独特です。</p><h3 id="サプライズ性"><a href="#サプライズ性" class="headerlink" title="サプライズ性"></a>サプライズ性</h3><p><strong>5（とても満足）</strong><br>買う前にかなり実況プレイを見たので、大体内容が予想できてしまうかと思っていましたが、<br>実際プレイしてみると全然想像をしていなかったことをしてくれるので、楽しいです。<br>（浄水槽の上で失禁されたり、顔の表情が想像以上に豊かだったり）</p><p><a href="http://www.flickr.com/photos/126344033@N06/27604386939" title="oni-no-oxygen" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4685/27604386939_93df0a2962_z.jpg" alt="oni-no-oxygen"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑呼吸不可の状況で苦しむカタリナさんとスティンキーさん</p><h3 id="やりこみ度"><a href="#やりこみ度" class="headerlink" title="やりこみ度"></a>やりこみ度</h3><p><strong>4（満足）</strong><br>いろんなところに探検しに行ったり、新しいバイオームを探したりと、<br>いろいろやることはありますが、<br>やはり酸素がないので、あまり自由に移動できないというのはあります。</p><p>また、一通り持続可能な社会ができると、そこから何をすればいいのか<br>迷ってしまうことがあります。</p><p>そのような社会を作るまでの過程はとてもやりがいがあって、楽しいです。</p><h3 id="難易度"><a href="#難易度" class="headerlink" title="難易度"></a>難易度</h3><p><strong>普通</strong><br>基本的なフローにのっとってやっていけば、コロニーのバランスは保てて、<br>いい感じにゲームが進んでいきます。</p><p>しかし災いは突然やってきますｗ</p><ul><li>一気にスペースを拡張しすぎると、酸素が足りなくて一気に終わる</li><li>浄水槽に失禁されると、きれいな水がなくなって、みんな食中毒になって、一気に終わる</li><li>石炭で電気を賄っていると、石炭がなくなった途端、酸素が作れなくなって一気に終わる</li></ul><p>というように、バランスが崩れると一気に雪崩のように危機がやってきます。</p><p>普通にプレイしていれば徐々にコロニーを拡張でき、簡単そうですが、<br>そこにバランスを常に意識しなければならないというハラハラ感があって、<br>いい感じに難易度を保ってくれている印象です。</p><p>ただ、バランスが崩れると取り直すのは結構難しいです。</p><h3 id="世界観"><a href="#世界観" class="headerlink" title="世界観"></a>世界観</h3><p><strong>5（満足）</strong><br>あまり「危機的状況から逃れろ！」というような怖い世界観ではなく、<br>むしろ個性豊かなキャラクターたちがコロニーづくりを頑張る、<br>結構<strong>ユーモアあふれる世界観</strong>です。</p><p><a href="http://www.flickr.com/photos/126344033@N06/27604386979" title="oni-massage" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4645/27604386979_669c53bc0b.jpg" alt="oni-massage"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑マッサージされるエイダさん</p><p><a href="http://www.flickr.com/photos/126344033@N06/24516168517" title="oni-名作" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4731/24516168517_781b9afae2.jpg" alt="oni-名作"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑これは名作</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>めちゃめちゃ面白いです！ハマります。<br>ただしずっとやっちゃいそうなので、休憩も忘れずに。</p><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://ch.nicovideo.jp/styleone/blomaga/ar1188649" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑かなり役に立ちます。ありがとうございます。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://www.youtube.com/watch?v=Co11ODPrEF0&list=PLX9vSr3tJGDV7FDtuwcXRPI4pvsZ0uEwu" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑BBDさんの実況でぼくは知りました。とても面白いです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/15/wants-in-steam-winter-sale-2017/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑この中からいくつか購入したので、また記事を書くと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。メリークリスマス！（遅い）&lt;br&gt;Steam でついにウィンターセールが始まりましたね！（遅い）&lt;/p&gt;
&lt;p&gt;そこで、何のゲームを買おうか精査してきたわけですが、&lt;br&gt;&lt;iframe class=&quot;hatenablogcard&quot; style=&quot;width: 
      
    
    </summary>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/Game/"/>
    
      <category term="Collections" scheme="http://asterisks.netlify.com/categories/Game/Collections/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="oxygen-not-included" scheme="http://asterisks.netlify.com/tags/oxygen-not-included/"/>
    
  </entry>
  
  <entry>
    <title>shundroid 式ゲームの評価ポイント</title>
    <link href="http://asterisks.netlify.com/2017/12/30/game-points/"/>
    <id>http://asterisks.netlify.com/2017/12/30/game-points/</id>
    <published>2017-12-30T12:33:16.000Z</published>
    <updated>2020-03-17T02:25:18.651Z</updated>
    
    <content type="html"><![CDATA[<p>みなさんこんにちは。shundroid です。<br>冬休みが始まりました。2017 年ももうあと少しですね。</p><p>ぼくは受験生なので、ものすごく勉強をしています。<br>これは冬「休み」なのか！？今までが休みだったかの如く勉強をしています。</p><p>そのためあまりブログの更新ができないです。ごめんなさい。</p><p>そんな中でも、Steam のウインターセールがやってきたので、<br>ゲームをいくつか買いました！（あまりできていませんが）</p><p>紹介したいのですが、その前にまず、<br>どのような基準でゲームを評価して、選んでいるのかを説明したいと思います。</p><h2 id="評価のポイント"><a href="#評価のポイント" class="headerlink" title="評価のポイント"></a>評価のポイント</h2><h3 id="独創性"><a href="#独創性" class="headerlink" title="独創性"></a>独創性</h3><p>ゲームの<strong>アイデアが独創的で、面白いかどうか</strong>を判断します。</p><p>誰も思いつかなかったようなアイデアだけど、とても面白いゲームを、<br>ぜひともプレイしてみたいですし、開発してみたいですねｗ</p><h3 id="サプライズ性"><a href="#サプライズ性" class="headerlink" title="サプライズ性"></a>サプライズ性</h3><p>ゲームをプレイしていく中で、予想通りのことしか起きないと平凡で、あまり面白みがなくなってしまうように感じます。<br>そこで、ゲームの中で<strong>「ええええええっ！？」というような、</strong><br><strong>開いた口がふさがらなくなることがよく起こるかどうか</strong>判断します。</p><p>ここは「飽き」にもかかわってくると思います。<br>非凡で常に刺激があるようなゲームだと、ずっと楽しめそうです。</p><h3 id="やりこみ度"><a href="#やりこみ度" class="headerlink" title="やりこみ度"></a>やりこみ度</h3><p>ステージが2つくらいしかないゲームだとすぐにクリアしてしまいます。<br>そこで、クリアできるまでに時間がかかったり、クリアしてからも楽しめることがあったりするなど、<br><strong>長く遊べるかどうか</strong>を判断します。</p><p>ここは「価格」もかかわってくると思います。<br>１００円くらいのゲームなら、ステージは１０個くらいでも十分うれしいですが、<br>１０００円だともっとたくさんプレイしたいですね。</p><p>他にも、自分でステージを作ったり、他人の作ったステージをプレイできたりすると、<br>ずっとプレイできそうですね。</p><h3 id="難易度"><a href="#難易度" class="headerlink" title="難易度"></a>難易度</h3><p><strong>難易度がほどよいかどうか</strong>を判断します。<br>しかし、難易度はひとによって違うと思うので、<br>僕にとって鬼畜すぎず、ぬるすぎないゲームかどうかになってしまいます。</p><p>ちなみにぼくは、マリオカートはかなり得意で、<br>友達と遊んで負けたことがありません。<br>しかし、スマブラはとても難しくて・・、<br>友達と遊んで勝ったことがありません。</p><p>このように人の得意不得意によっても変わってきますよね。</p><h3 id="世界観"><a href="#世界観" class="headerlink" title="世界観"></a>世界観</h3><p>ゲームのキャラクターデザインや音楽、ＵＩなどに統一性があって、<br><strong>一体感のある世界観が演出されているかどうか</strong>を判断します。</p><p>世界観といっても、ゼルダのように壮大でなければいけないというわけもなく、<br>バカゲーなら Funny な世界観が、ポップならポップな世界観ができていれば、<br>ゲームの世界に没頭でき、楽しめると思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これから買ったゲームを紹介していきますが、<br>これを基準に紹介していきます。</p><p>よろしくお願いします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;みなさんこんにちは。shundroid です。&lt;br&gt;冬休みが始まりました。2017 年ももうあと少しですね。&lt;/p&gt;
&lt;p&gt;ぼくは受験生なので、ものすごく勉強をしています。&lt;br&gt;これは冬「休み」なのか！？今までが休みだったかの如く勉強をしています。&lt;/p&gt;
&lt;p&gt;そのた
      
    
    </summary>
    
      <category term="Game" scheme="http://asterisks.netlify.com/categories/Game/"/>
    
    
      <category term="steam" scheme="http://asterisks.netlify.com/tags/steam/"/>
    
      <category term="game" scheme="http://asterisks.netlify.com/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>【2017年末】「マウスに触らない」Visual Studio Codeを目指して</title>
    <link href="http://asterisks.netlify.com/2017/12/16/dont-use-mouse-in-vscode/"/>
    <id>http://asterisks.netlify.com/2017/12/16/dont-use-mouse-in-vscode/</id>
    <published>2017-12-16T17:28:09.000Z</published>
    <updated>2020-03-17T02:25:18.650Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。インフルエンザはほぼ治りました shundroid です。<br>もう 2017 年も終わりですね。</p><p>そこで今回は今年が終わる時点での、<br>ぼくの Visual Studio Code の開発環境を紹介していこうと思います。<br>多分これから変わることはないと思いますので・・。</p><h2 id="コンセプト"><a href="#コンセプト" class="headerlink" title="コンセプト"></a>コンセプト</h2><p><strong>マウスを触らない</strong></p><p>もともとぼくは Vim というエディタで開発をしてきましたが、<br>auto-complete とかを入れまくったら、重くなってしまい、<br>ほかのエディタで Vim っぽくできないかと、Spacemacs や、Atom など試してきて、<br>そこで一番高速で高機能な Visual Studio Code に落ち着いた次第なのです。</p><p>マウスを触らない―それは究極の効率でコードを書くための手段。<br>キーボードから手を離すことによるタイムロスを防ぐことができます。</p><p>そのために工夫しているキーバインドやプラグインを紹介していきたいと思います。</p><h2 id="プラグイン"><a href="#プラグイン" class="headerlink" title="プラグイン"></a>プラグイン</h2><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=vscodevim.vim</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/vim.gif" alt></p><p>必須プラグインです。VSCode で Vim ライクなキー入力に対応します。<br>またこのプラグインにより後ほどキーバインドを設定していきます。</p><p>検索や保存も完ぺきにできます。<br>しかしちょっと <code>C-e</code> <code>C-y</code> によるスクロールのレスポンスが遅い気がします。<br>それはしゃーなし。</p><h3 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a>Trailing Spaces</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/trailing-space.gif" alt></p><p>行末のスペースを表示してくれます。<br>便利ですね。</p><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons</a></p><p><a href="http://www.flickr.com/photos/126344033@N06/27306929509" title="vscode-icons" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4684/27306929509_67f0a5f51f_o.png" alt="vscode-icons"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>VSCode をカラフルに彩ってくれます。きれいですね。</p><h3 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/setting-sync.gif" alt></p><p>来ました神プラグイン。<br>User Settings や Keybindings ファイルを複数の端末で同期してくれます！<br>同期には Gists を使います。ロマンあふれますね。</p><p>複数のパソコンで開発する人には必須ですね。<br>あれ、設定したはずのキーバインドが使えねえ・・あ、こっちで設定してなかっためんどっ<br>っていうのがなくなります。</p><p>ぼくも壊れかけのノートパソコンでもたまに開発するので、Sync するようにしています。</p><p>Gif では手動アップロードの方法を紹介しましたが、<br>なんと<strong>自動同期</strong>もしてくれるんです。なんてすばらしい・・・！</p><p>このプラグインにつきましては、↓の記事が詳しいので、続きはこちらをご覧ください。ありがとうございます。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://necojackarc.hatenablog.com/entry/2017/03/12/184557" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>Vue ファイルに対応する <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noopener">Vetur</a>、stylus に対応する <a href="https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus" target="_blank" rel="noopener">language-stylus</a>、<br><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="noopener">C/C++</a>、Git Log が見れる <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a>（ほぼ使用しない）を入れています。</p><h2 id="キーバインド"><a href="#キーバインド" class="headerlink" title="キーバインド"></a>キーバインド</h2><p>Vim（vscode-vim）で、 <code>&lt;leader&gt;</code> キーを使用したキーバインドができるので、<br>Space キーをリーダーキーにして、<br>マウスを触らず、<strong>手が疲れないキーバインド</strong>を実現！！</p><h3 id="lt-leader-gt-キーを使ったキーバインドの方法"><a href="#lt-leader-gt-キーを使ったキーバインドの方法" class="headerlink" title="&lt;leader&gt; キーを使ったキーバインドの方法"></a><code>&lt;leader&gt;</code> キーを使ったキーバインドの方法</h3><p>ふつう、キーバインドだと、Ctrl や Alt などを使うことが多いのですが、<br><code>&lt;leader&gt;</code> キーを使うことによって、Space キーなどでキーバインドを組むことができるようになります。</p><p>右側の USER SETTINGS に、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.leader"</span>: <span class="string">"&lt;space&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この行を追加します。（波かっこは不要です）<br>これで Space キーをリーダーキーにできました！</p><h3 id="NORMAL-MODE-のキーバインドを設定する"><a href="#NORMAL-MODE-のキーバインドを設定する" class="headerlink" title="NORMAL MODE のキーバインドを設定する"></a>NORMAL MODE のキーバインドを設定する</h3><p>設定とかを開きたいときって、Normal Mode のときですよね。<br>ステータスバーに <code>-- NORMAL MODE --</code> と表示されているときです。</p><p>vscode-vim だとその時のキーバインドでは、Other Modes という類に追加するそうなので、<br>ためしに、otherModes のキーバインドに、 <code>&lt;leader&gt; + p</code> でファイルを開けるようにしてみましょー。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.normalModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"before"</span>: [<span class="string">"&lt;leader&gt;"</span>, <span class="string">"p"</span>],</span><br><span class="line">            <span class="string">"after"</span>: [],</span><br><span class="line">            <span class="string">"commands"</span>: [</span><br><span class="line">                &#123; <span class="string">"command"</span>: <span class="string">"workbench.action.quickOpen"</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大事！（2018/08/07追記）</strong></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">直った！otherModesKeyBindingsじゃなくてnormalModeKeyBindingsNonRecursiveになったのね</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1018300970084720640?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月15日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>VSCode のバージョンアップに伴い、<code>otherModesKeyBindings</code> は<br><code>normalModeKeyBindingsNonRecursive</code> になりました。<br><strong>追記終わり</strong></p><p>これを設定して、保存（ <code>:w</code> でできます）して、<br>Normal Mode でないときは ESC を押してから、<br>Spaceキー + P で、ファイルを開く<strong>あれ</strong>が出てくると思います。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/c-p-644x433.gif" alt></p><h3 id="その他のキーバインド"><a href="#その他のキーバインド" class="headerlink" title="その他のキーバインド"></a>その他のキーバインド</h3><p>ほかに、ぼくは上の要領で、次のキーバインドを追加しています。</p><table><thead><tr><th>キー</th><th>動作</th><th>コマンド</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;</code> + w + l</td><td>右のパネルへ</td><td>after を <code>[&quot;&lt;C-w&gt;&quot;, &quot;l&quot;]</code> とする</td></tr><tr><td><code>&lt;leader&gt;</code> + w + h</td><td>左のパネルへ</td><td>after を <code>[&quot;&lt;C-w&gt;&quot;, &quot;h&quot;]</code> とする</td></tr><tr><td><code>&lt;leader&gt;</code> + o</td><td>Open Recent</td><td>workbench.action.openRecent</td></tr><tr><td><code>&lt;leader&gt;</code> + s</td><td>Show Commands</td><td>workbench.action.showCommands</td></tr><tr><td><code>&lt;leader&gt;</code> + f</td><td>プロジェクト内検索</td><td>workbench.action.findInFiles</td></tr><tr><td><code>&lt;leader&gt;</code> + d</td><td>フォルダーを開く</td><td>workbench.action.files.openFolder</td></tr><tr><td><code>&lt;leader&gt;</code> + b</td><td>サイドバーの表示・非表示</td><td>workbench.action.toggleSidebarVisibility</td></tr><tr><td><code>&lt;leader&gt;</code> + @</td><td>ターミナルの表示・非表示</td><td>workbench.action.terminal.toggleTerminal</td></tr></tbody></table><p>command の部分を書き換えることで、様々な動作に対応できます。<br>また、上２つは after を使っていますが、<br>after を使うと、キーの動きをさらにキーの動きにして返すことができます。</p><p>例えば１番上のだと、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.normalModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"before"</span>: [<span class="string">"&lt;leader&gt;"</span>, <span class="string">"w"</span>, <span class="string">"l"</span>],</span><br><span class="line">            <span class="string">"after"</span>: [<span class="string">"&lt;C-w&gt;"</span>, <span class="string">"l"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こうなるので、 <code>&lt;leader&gt; + w + l</code> で、<code>Ctrl + w + l</code> をシミュレートできるのです。</p><p>コマンドの種類は、keybindings.json に一覧が乗っているので、そちらを参照してください。</p><h2 id="ドヤる"><a href="#ドヤる" class="headerlink" title="ドヤる"></a>ドヤる</h2><p><img src="https://lh3.googleusercontent.com/8a-xdh-LqCOs9u4XAVlXCd8LI7tf7q65w00Mmj_bXxZAZSBxuk4bgcRIIgVwqX1RMXAFdu5vCDefVz_YXqSxB6LLqnOcDxk2l8lDaIviikG_rc-Zlq1Yh3xUUsbsARbm-08mIXaiV3bAXpT7bBsGa6Ykk9Q7ndbfIzQks73quioV2xnt3i7uQDb-q_pH5gqCCLp2v6FiKghbzR4g3rBEXsktEQLtxjoi3lwnkg8gSxHm3L3Jy38Bi-h5O77IS0SlN1MQCWTJpezzH5k9Xr3m3ROUgMZMUjK_S7e1Rz5oTbskdz32TsWNFK7vfIpQ36Vjdg7LYr30f9G5_G3pWtizaO2CMdAH2AZN7G7g4ZzUGeZW8BtznToWvBbj4HwwVb_g4TX_iyC57_moy51tZphnPnKmFF_1nEFZJtEMtmrVmOgZOQu3CyjBruZTGIh0Ezaf1FgyVXZipTvxtcuxFdSrxOiNPLB6ELAkmWRBu5fM_fS9mOhG47GgpdBK5JHT1L6TpxIxDQ_YlhQpAorOFHdO65Yso_H8tAjWlVra3j2iZZIjIrjzgRNDHfAsqHPonVVAPoGdZOXK7t0Lfj9-mEXdmxd-P3A8E0XORjDhsKE=w996-h746-no" alt></p><p>キーボードだけで操作しています。</p><p>実は左側のファイル一覧の画面も、Vim ライクな操作ができるんです。</p><p>あと、ステータスバーの色が insert 時変わっていますが、<br>それは次の設定を USER SETTINGS にすることにより変えられます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.statusBarColorControl"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"vim.statusBarColors"</span> : &#123;</span><br><span class="line">        <span class="string">"normal"</span>: <span class="string">"#005f5f"</span>,</span><br><span class="line">        <span class="string">"insert"</span>: <span class="string">"#5f0000"</span>,</span><br><span class="line">        <span class="string">"visual"</span>: <span class="string">"#5f00af"</span>,</span><br><span class="line">        <span class="string">"visualline"</span>: <span class="string">"#005f87"</span>,</span><br><span class="line">        <span class="string">"visualblock"</span>: <span class="string">"#86592d"</span>,</span><br><span class="line">        <span class="string">"replace"</span>: <span class="string">"#000000"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他にも、選択時・行・ブロック選択時・置き換え時も色を変えられます。</p><p>しかしまだ課題もあります。<br>いったん左側のサイドメニューやターミナルにフォーカスが当たると、<br>そこから自分で設定したキーバインドが使えなくなってしまいます。</p><p>それが直ればもうマウスとはおさらばですね！<br>実機テストのときはどっちみち使いますが・・・ｗ</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。インフルエンザはほぼ治りました shundroid です。&lt;br&gt;もう 2017 年も終わりですね。&lt;/p&gt;
&lt;p&gt;そこで今回は今年が終わる時点での、&lt;br&gt;ぼくの Visual Studio Code の開発環境を紹介していこうと思います。&lt;br&gt;多分これから
      
    
    </summary>
    
      <category term="Web Programming" scheme="http://asterisks.netlify.com/categories/Web-Programming/"/>
    
      <category term="Programming" scheme="http://asterisks.netlify.com/categories/Web-Programming/Programming/"/>
    
    
      <category term="gist" scheme="http://asterisks.netlify.com/tags/gist/"/>
    
      <category term="vim" scheme="http://asterisks.netlify.com/tags/vim/"/>
    
      <category term="vscode" scheme="http://asterisks.netlify.com/tags/vscode/"/>
    
      <category term="vscode-ext" scheme="http://asterisks.netlify.com/tags/vscode-ext/"/>
    
  </entry>
  
</feed>
