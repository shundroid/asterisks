<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue で Web Animations をかっこよく実装するライブラリを作ってみた</title>
      <link href="/2020/03/14/vue-animate-component/"/>
      <url>/2020/03/14/vue-animate-component/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>あけましておめでとうございます(遅)<br>10か月振りくらいの投稿ですね。</p><p>高校が休みになっているので、勉強・開発に励んでおりました。</p><p>そこで、Vue.js で <a href="https://jp.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Transition</a> だけでなく、<br>Web Animations を取り入れたい状況が出てきました。</p><h2 id="現状で-Vue-js-で-Web-Animations-を使う場合"><a href="#現状で-Vue-js-で-Web-Animations-を使う場合" class="headerlink" title="現状で Vue.js で Web Animations を使う場合"></a>現状で Vue.js で Web Animations を使う場合</h2><p>そこで次のようなコードを書いたのですが、<br>これは Vue.js としてはふさわしくないですよね。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rect"</span> <span class="attr">ref</span>=<span class="string">"rect"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; active ? 'Animating' : 'Stopping' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"active = !active"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      active: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch() &#123;</span><br><span class="line">    active() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$refs[<span class="string">'rect'</span>].animate([</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(0,0)'</span>, <span class="attr">offset</span>: <span class="number">0</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(100px,0)'</span>, <span class="attr">offset</span>: <span class="number">0.25</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(50px,0)'</span>, <span class="attr">offset</span>: <span class="number">0.5</span> &#125;,</span></span><br><span class="line"><span class="javascript">          &#123; <span class="attr">transform</span>: <span class="string">'translate(120px,0)'</span>, <span class="attr">offset</span>: <span class="number">1</span> &#125;</span></span><br><span class="line">        ], &#123;</span><br><span class="line">          duration: 1000,</span><br><span class="line"><span class="javascript">          easing: <span class="string">'ease'</span></span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#rect &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>どこがふさわしくないのでしょうか。 <code>ref</code> を使っている辺りが明らかに良くないですけど、<br>問題はそれ以上にあると考えます。</p><h2 id="「動作」で書くか「状態」で書くか"><a href="#「動作」で書くか「状態」で書くか" class="headerlink" title="「動作」で書くか「状態」で書くか"></a>「動作」で書くか「状態」で書くか</h2><p>事を大きくしすぎた気もしますが、根本的な問題はここにあると思います。<br>アニメーションのような <strong>一過性</strong> のものは、一般的には「動作」で書くのがふさわしいですよね。<br>そのため、 <code>.animate</code> という <strong>メソッド</strong> によって「動作」を記述しているのです。</p><p>ただし、Vue.js は伝統的に、「動作」による記述よりも「状態」による記述を好みます。<br>例えば、View上の文字を変更するのに <code>element.updateText(&#39;hoge!&#39;)</code> みたいに書いたりはしませんよね。<br><code>&#123;&#123; text &#125;&#125;</code> のような <code>text</code> という <code>data</code> の「状態」の記述によって、UIの変更を行っています。<br>インラインテキストだけでなく、属性やスタイルの変更、また <code>Transition</code> についても同様に、「状態」による記述を行っています。</p><p>これはどうしてでしょうか。Vue.js の存在意義を考えるとこれは明らかです。<br>先ほども少し触れましたが、「動作」というのは一過的な概念です。<br>つまり、一回「動作」してしまえば、それが長い間ずっと続くようなことはありません。<br>ただし、Vue にとっては、これが長い間続いてほしいんですよね。これはなぜか。<br>まさしく、<strong>双方向データバインディング</strong> を保つためです。<br>データのリンクは、動作のように一回一回の時のみかろうじてつなぎ留められているようではいけないのです。</p><p>このように Vue で「状態」が重んじられている背景を踏まえると、そこに「動作」で記述されたプログラムを書くのは、<br>なんだか異物感を感じるわけです。もちろん動きはするんですけど、ちょっと消化不良というか、そういう感覚です。</p><p>HTML(XML) は非常に「状態」を書くのに優れた(マークアップ)言語です。<br>対してJSは「動作」を書くのを主としているわけなので、<br>例え <code>.animate</code> メソッドの引数で渡されているオブジェクトが状態だ！と主張したとしても、<br><code>&lt;template&gt;</code> タグ内で書けた方がよいですよね。</p><p>というわけで、Web Animation を「状態」で記述するようにしたのが、このライブラリです。<br>コードを見てみましょう。</p><p>※ もちろん Vue でも動作を好む場面はあります。 <code>v-on</code> などに代表されますが、これらで実行される処理は <code>View</code> の背後の、ロジック的な部分であって、Vue でなくても別に良い部分なわけなので、ここをとって「Vueは動作による記述を好む」というのは言いすぎな気がします。</p><h2 id="「状態」で-Web-Animations-を記述する。"><a href="#「状態」で-Web-Animations-を記述する。" class="headerlink" title="「状態」で Web Animations を記述する。"></a>「状態」で Web Animations を記述する。</h2><p>インストールは、yarn または npm で行ってください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add vue-animate-component</span><br></pre></td></tr></table></figure><p>または</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save vue-animate-component</span><br></pre></td></tr></table></figure><p>コードは次のようになります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rect"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">animation</span> <span class="attr">v-model</span>=<span class="string">"active"</span> <span class="attr">:duration</span>=<span class="string">"1000"</span> <span class="attr">easing</span>=<span class="string">"ease"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(0, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(100px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0.25"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(50px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"0.5"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">keyframe</span> <span class="attr">transform</span>=<span class="string">"translate(120px, 0)"</span> <span class="attr">:offset</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">animation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; active ? 'Animating' : 'Stopping' &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"active = !active"</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Animation, Keyframe &#125; <span class="keyword">from</span> <span class="string">'vue-animate-component'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Animation,</span><br><span class="line">    Keyframe</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      active: <span class="literal">false</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">#rect &#123;</span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Web Animation をタグによって記述できます。 <code>v-model</code> が <code>true</code> になった時、</p><p>アニメーションの終了は <code>v-model</code> が <code>false</code> になったことを検知してください。今後 <code>@finish</code> などを実装するかもしれませんが。</p><p>詳細な利用法は、Github レポジトリをご覧ください。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/shundroid/vue-animate-component.git" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="今後の課題"><a href="#今後の課題" class="headerlink" title="今後の課題"></a>今後の課題</h2><ul><li><code>v-model</code> が <code>false</code> になった時、アニメーションを <code>pause</code> する</li><li><code>@finish</code> などのイベントを実装する(「動作」による記述を奨励するようですが…)</li></ul><h2 id="余談：実装がスッカスカな話"><a href="#余談：実装がスッカスカな話" class="headerlink" title="余談：実装がスッカスカな話"></a>余談：実装がスッカスカな話</h2><p>この実装は Github で見られるんですけど、スッカスカなので試しに <code>keyframes.vue</code> を見てみましょう</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123; &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">div &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>えっ()</p><p>つまりそういうことなんです。察してください。<br><code>animation.vue</code> のほうでは、自分と子要素の <code>$attrs</code> をそのまま <code>.animate</code> の引数に丸投げしているだけです。</p><p>そんな意味あることなの？と思われるかもしれませんが、大事なのはその変換過程ではなく、<br>状態は <code>&lt;template&gt;</code> 内で書く、という役割分担がはっきりすることと、<br>またアニメーションの開始を <code>v-model</code> による状態変化で行えることであってほしいです(希望)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>「キャンベル生物学」を読んで</title>
      <link href="/2019/05/01/campbell/"/>
      <url>/2019/05/01/campbell/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>新年度・新時代が始まりましたね。</p><p>さて、昨日「キャンベル生物学」という太い本を読み終わったので<br>その感想をまとめようと思います。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>キャンベル生物学 原書11版は1444ページ、目測でA4サイズくらいの本で、<br>生物学の幅広い分野の基礎が学べる本です。</p><p>「高校生にとっても最適の教科書」とありますが、まさにその通りで、<br>解説が非常に丁寧でわかりやすかったです。(英訳だからか独特の言い回しがありますがそれは慣れます)</p><p>わざわざどうしてこの本を読んだのかといいますと、高校の生物の先生に勧められたからです。</p><p>最初は割と緩く読んでいたんですけど、このままだといつまでたっても読み終わらない気がしたので、<br>4月あたりからスパートをかけました。グラフにも必死さが現れていますね()</p><p><img src="https://lh3.googleusercontent.com/Yx2AA2EbhD7MKZxEbxISUAVXWIvzcQJ-6Z6POhSC9BDaPS4VgJ5JiDgGODObO4LEl1Gh3md205nD-_eyA4qYRutgg0RxbpCRAH3fZaI5qUvHDcFlu5VeUehu2NRap2Fp_13MY1EKKFz7UisjnznbChWyJJqs4rkyCy4crEh-8O58KJRrkdqm7GjO0j0S1m4vBZbv0MSNlgLqT9iTvOZLM-90-w3fP6cr5lhROrb0BZQ2md8CBAxGFH_AsTG7kKkGs5hveETBooVnbaWiC02cVHYQNE7vx9Wr0h7-21kbFBP4UjPX0-E2fUrnV2M5PTqM8ICXtLKo17-XA8h3y1f2TS1fu6SgftVwuXeDEE_BcHXTC0SAUL5dU_AwGrLx2nX2-AnygeXS3IEO18GLdXw1cbrEoegmA0GmCJTOu0JV45mWf3VSKOty6pDeqZc9FhGA8PSTPkiauTcIQ49H9Ox99vKB2wj5rim4FII4eGMNxxDtPn14oZkPzoVqOFB8tWgNTgupM2euub9WpGuCMeBkOmfabqDqz8QZHXmPjmc4S4Y1IZev6c3yvv_olRx5Wcyos1QsFYb2xiHKi6z1t97KDCg-HbhjtthBE421A7fEzDowAlTeSx7lYoD7buVghH2psskyO_PgvCzPVNu_1bWFJdUMWtDsCMiPJqnV8p-SHNjA0IUH69OF-J_JNn5h0VBEeN3hX2b0aLHnVutknZLZgi5xQw=w773-h464-no" alt></p><h2 id="キャンベル生物学のよさ"><a href="#キャンベル生物学のよさ" class="headerlink" title="キャンベル生物学のよさ"></a>キャンベル生物学のよさ</h2><p>全体的には「学校で習った分野」と「そうでない分野」に分かれていました。<br>前者は動物の形態と機能などで、復習になったほか、新たな概念などを取り入れて学びを深めることができました。<br>後者は生命史などで、少し負荷はありましたが、そこでも既習分野との関連性や相似性が見えてきて面白かったです。</p><p>次に、それぞれのテーマについて感想を書きたいと思います。</p><h3 id="ミクロ・マクロの視点の推移が面白い"><a href="#ミクロ・マクロの視点の推移が面白い" class="headerlink" title="ミクロ・マクロの視点の推移が面白い"></a>ミクロ・マクロの視点の推移が面白い</h3><p>「空間としての推移」では、生体分子の構造という非常にミクロな視点から、<br>細胞小器官の構造、細胞の構造、組織、器官、個体、個体群、群集、生態系、と、マクロな視点に移っていく様子がよく理解出来ました。<br>「時間としての推移」では、遺伝的変異の頻度変化（小進化）がどう種分化（大進化）につながってくるのかとして、<br>「ミクロ」と「マクロ」のつながりが捉えられました。</p><p>少しそれますが、進化と生態系は相互作用するので、ここで「空間」と「時間」のつながりも生まれます。<br>生物学は空間にも時間にも広がりを持っているのが強く認識できました。</p><h4 id="生命のフラクタル"><a href="#生命のフラクタル" class="headerlink" title="生命のフラクタル"></a>生命のフラクタル</h4><p>そこで気づいたことがあります。<br>生命が「フラクタル」のようであるということです。</p><p><img src="https://lh3.googleusercontent.com/Q66Ghm9nKn0aSNRN2K8MHkEjel-IOChZd63N3Qu0aac4oK143XDmhBGk2ToHvBZhCTNlz0ArFgFn1LNSUhDNHGj-zzgi-L-u1IrkzpFHwvZa7ZXQ08r0k5A861p8eY5QpM_87HtVlHAw9L3OP4f240YkvgOAHiCfISCe-Xx5j2csiwc0t156QqKJgEdBP5vIb8RzDFYYkrzY1_8PAah_ucDFVGUavz9mvO_hBriZPDTNFZ9uhJcvIFdTwV9NHiIPEA04U6NutIY7vkyCt50a0EwoGA5IBQV8Qo7KmKUKAF4IdzIE91Nha2PNYNWZEMWFcldsW-I-BzE64PHpzJFPCqEAVfjOH2CAN7QkYyjppZIamr_XbrFvG-2fE00YwDPxeE-kWkqNLMk9wqptCIZeAswY0DIuXlflDaX2Ug1lbYiAUPOZRmwB_fpPhSpxwSazqoyj2lEvbzlBC_axjGU-XHy9GN-SC-KhODIkPfECn7_jjbs1QQhwO8Gr_mQfrqdblXoXxUtMeiS9hStBMwUFUiqMZCPW-wvIA9eDtNWj3tZ3x-17U_tgyNuMyGq-M-TFrzW9YIMh-BKdxELJX6_9moCAcqRhNWlCfM9AAMkIYS05d-9K4WhR_EVvjREPesFsvYr8I6O1Iag7eD3ze0NXJjvNeL4jeU6xYKE4-o50eiMP6ET5k3s0Q29O6gU_Mucs-Kpp8XHjo-Pq-s_C_chxlW8yvQ=w704-h966-no" alt><br>(部活の先輩が作ってくださいました、マンデルブロ集合)</p><p>フラクタルとは Wikipedia によると、「部分と全体が自己相似」になっているもののことだそうです。<br>これは生物を通しても言えると思います。</p><p>例えば、空間としてのフラクタルを見てみましょう。<br>ミクロな視点で原子に注目します。原子は光を吸収して熱を放出することが<strong>多いです</strong>。<br>これをマクロな視点で考えると、生態系全体としても、やはりこのようなことが起きています。<br>生産者である主に緑色植物が光を吸収します。そのエネルギーは生態系内では化学エネルギーとして循環しますが、<br>生態系の外に出される形はやはり熱が多いです。</p><p>時間として考えてみてもこのことが当てはまります。<br>少し広い例となりますが、細胞は分裂し、死にます。また個体は誕生・死亡します。<br>同じように種は分化・絶滅します。<br>これらは同じような表し方がされています。p1194の細胞系譜や、よくある家系図、また種の系統樹は似た形をしています。<br>固有の例ですがミツバチはその個体群自身が一つの個体のようにふるまいます。女王バチが生殖細胞に当てはまったりします。</p><p>無限に続くフラクタルというわけではないですが、部分が全体に対応付けできます。<br>あくまで見方の１つですが、どうしてこのような見方ができるのか思うと不思議です。<br>１つ思っているのは、「全体」は「部分」より後にできるので、「部分」が環境に適合していた形態が、そのまま「全体」にも引き継がれるのかなっていうことです。<br>これも環境適合的な選択圧を受けているのでしょう。</p><p>本書にはこの視点の推移で「組織化」や「創発特性」という概念が取り上げられています。<br>創発特性は抽象度が上がる（＝よりマクロになる）ことで新たに特徴が生まれるということです。<br>例えばニューロン一本ではこうやってブログは書けませんが、組織化して脳となることでブログが書けるようになっています。<br>組織化により個々の特徴が再び現れること（＝フラクタル）と、新たな特徴が現れること（＝創発特性）の２つがあって、<br>それぞれ大切なのだろうと思います。</p><h3 id="分野横断的な学習ができて面白い"><a href="#分野横断的な学習ができて面白い" class="headerlink" title="分野横断的な学習ができて面白い"></a>分野横断的な学習ができて面白い</h3><p>読み進めるにあたって、生物学は様々な分野と連係しているのだと気づかされました。</p><p>例えば、統計などでは数学、化石記録などでは地学、バイオームでは地理、代謝には物理、環境保全では社会系、<br>シミュレーションなどでは情報、といった感じです。</p><p>生物学から見ると様々な分野とつながって、分野のカバー範囲の広さを感じさせられますが、<br>逆から見ると、様々な分野から生物学につながっています。<br>これは、私たちの生活の様々な場面に生物学が絡んでくるからなのでしょう。事実私たちは生物です。</p><h3 id="個々で興味を持ったこと"><a href="#個々で興味を持ったこと" class="headerlink" title="個々で興味を持ったこと"></a>個々で興味を持ったこと</h3><p>色々あります。</p><p>最初の方では<strong>代謝</strong>がエネルギーの吸収・放出で表せる感じが楽しかったです。<br>化学エネルギーって（少なくともここでは）電子の位置エネルギーなんですね。<br>ATPがどうして高エネルギーを持っているのか、そのエネルギーをどうやって酵素等に付与するのかがわかって<br>もやもやが消えました。</p><p><strong>ハーディ・ワインベルグ平衡</strong>や<strong>個体群生態学</strong>では数学とのつながりが個人的に好きでした。</p><p>最後に<strong>ガイア理論</strong>です。（本文中ではガイア仮説）<br>これは結構気になっています。先ほどフラクタルの話をしましたが、なんと「地球全体」を１つの生命体と捉えて、<br>そこでも恒常性を維持する働きがあると考えるそうです。賛否両論あるそうですが。<br>これから調べてみたいと思います。</p><h2 id="まとめ・これから読む人にアドバイス"><a href="#まとめ・これから読む人にアドバイス" class="headerlink" title="まとめ・これから読む人にアドバイス"></a>まとめ・これから読む人にアドバイス</h2><p>ただ知識を広げさせてくれるのではなく、それをもとに色々考えさせてくれたりする本でした。<br>忍耐力と読解力も上がったでしょう。</p><p>これから読む人へ<br>多分本気で読めば1か月くらいで終わります。僕は半年かかっちゃったんですけど()<br>あと、個々の章の話をそこで完結させないで、他の分野とのつながり、を意識して読むと見えてくるものが変わります。<br>結構疲れますが得られるものは大きいので頑張ってください(小並)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nuxt v2 のビルドが重すぎるので軽くする</title>
      <link href="/2019/04/01/nuxt-v2-speed-up/"/>
      <url>/2019/04/01/nuxt-v2-speed-up/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。<br>記事を書くたびにお久しぶりになりますねw</p><p>早いもので高校に入学してから1年になります。<br>この1年はプログラミング以外のことにもいろいろチャレンジして、<br>充実した高校生活を送ることができました。</p><p>クラス替えがドキドキ…</p><p>さて、今回は割と今年(少ない機会でも)愛用した <a href="https://ja.nuxtjs.org/" target="_blank" rel="noopener">Nuxt</a> のビルド速度を<br>向上させる方法を紹介します。</p><p>あ、そだそだ、今年はプログラミングを目的にしてプログラミングすることは少なかったんですけど、<br>割と学校の発表で(Nuxtを使って)デモアプリを作ったり、ディベートの授業で電子投票用のシステムを作ったりと、<br>「手段」としてプログラミングをすることが多かったです。</p><p>プログラミングのスキルを身に着けておいて、できることが広がったので、<br>2020年プログラミング必修化で、よりプログラミングが普遍的なものとなり、<br>学校での学びが深められるようになるとよいと思います。</p><h2 id="使うもの"><a href="#使うもの" class="headerlink" title="使うもの"></a>使うもの</h2><p>Webpack の <a href="https://github.com/mzgoddard/hard-source-webpack-plugin" target="_blank" rel="noopener">hard-source-webpack-plugin</a> です。<br>これを使うことで、ビルド時のキャッシュを取ってくれるので、二回目以降のビルドが爆発的に速くなります。</p><p>下の「参考」の記事では、DllPlugin というものも紹介しています。<br>しかし使ってみたものの、hard-source-webpack-plugin と比べると効果が少ないので、<br>今回は割愛したいと思います。</p><h2 id="ポイント"><a href="#ポイント" class="headerlink" title="ポイント"></a>ポイント</h2><h3 id="webpack-config-js-を-nuxt-を通していじる"><a href="#webpack-config-js-を-nuxt-を通していじる" class="headerlink" title="webpack.config.js を nuxt を通していじる"></a>webpack.config.js を nuxt を通していじる</h3><p>実際に上のリンクの readme を見ることで、生の webpack への導入手順は分かります。<br>が、今回は nuxt v2 で行いたいです。つまり、webpack の config を、nuxt を通していじる方法を知ることが大事になってきます。<br>これが分かれば、おそらく DllPlugin の導入方法もわかるでしょう。</p><h2 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h2><h3 id="プラグインの導入"><a href="#プラグインの導入" class="headerlink" title="プラグインの導入"></a>プラグインの導入</h3><p>yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add --dev hard-source-webpack-plugin</span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -D hard-source-webpack-plugin</span><br></pre></td></tr></table></figure><p>※ <code>i</code> は <code>install</code>、 <code>-D</code> は <code>--save-dev</code> の省略形</p><h3 id="nuxt-config-js-の変更"><a href="#nuxt-config-js-の変更" class="headerlink" title="nuxt.config.js の変更"></a>nuxt.config.js の変更</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pkg = <span class="built_in">require</span>(<span class="string">'./package'</span>)</span><br><span class="line"><span class="comment">// 以下、追加</span></span><br><span class="line"><span class="keyword">const</span> HardSourceWebpackPlugin = <span class="built_in">require</span>(<span class="string">'hard-source-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// ここまで</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Build configuration</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> build: &#123;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   ** you can extend webpack config here</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  extend(config, ctx) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 以下、追加</span></span><br><span class="line">    config.plugins.push(<span class="keyword">new</span> HardSourceWebpackPlugin())</span><br><span class="line">    <span class="comment">// ここまで</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>予想以上に簡単でした。今回薄いな(確定)</p><h2 id="やってみた"><a href="#やってみた" class="headerlink" title="やってみた"></a>やってみた</h2><p>yarn:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn dev</span><br></pre></td></tr></table></figure><p>npm:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h3 id="１回目（キャッシュ未反映）"><a href="#１回目（キャッシュ未反映）" class="headerlink" title="１回目（キャッシュ未反映）"></a>１回目（キャッシュ未反映）</h3><p><img src="https://lh3.googleusercontent.com/sFFqfshR7YA3_V95ObkPaZk0cCXpgHdIK16XA4nVFX4iIYY5Ii3XoWnCoIPbJAAqRWnuiXvHHoDYWH6LkaOjN46XCV6KWPMbtpr-QwFKvvCraXZ7JJ0Jwu3wPjRxBYqBjIQvmSyzTReSSNT1oPOPqpf0VLJIYO_ywYOM9hj3gRcmuY13N1MKlvb-fa6Aq6A7tL9Whi-xGJn1e_KKfY6PCZqpwNHTWBgt67R-ie8ewsv9wfYegGSLC2Bj8YS2988m4ju3Q9OxCJBTnlm4sBzGIQnLjCmEkmQ3Izd7o2pKCW90ip01Am95NPN4lm1jsEKy1-djQcG32gnhx02_eI3PIMa4_AxH1EAqNE8c2H6ZNlR5SEoIZEUOxaPahXC-_D-Okc4lmfw5tRQOFwU6gu6KYKGxfNYXoYljtHUdmWSCPRN38RoN28HVQ2JkX8bmRACZDAm24sE29HYS19dYCBfrcDm32l-mTKB_4tdsGhUiXb4T2CF8X04D6oWDt3rjq3a6VeGBs_Q4uOWXQSml6Q5EebhHiBbrd-BihgjiRyyWP3UVJOxkWVRQzcHO67dlw0asrsh9iZ4QDjJZkNQJ2E8_Fi8mEdg5mahhjt2CuXMQzA6PKmioBst5sQ_wlFa28Bu_nqn1XlHfF1Xzfi5Qr3pNqFIQsL_719Zno179I1FK7KscZTXZ0RmyQ1KMle3O2JgagI_PCVexW5KFmesVhNKmgQ7C=w592-h324-no" alt><br>Client 側が 1.27<strong>m</strong> です。単位はm。つまり分です。<br>Server 側が 58.34s です。遅いですね。</p><h3 id="２回目（キャッシュあり）"><a href="#２回目（キャッシュあり）" class="headerlink" title="２回目（キャッシュあり）"></a>２回目（キャッシュあり）</h3><p><img src="https://lh3.googleusercontent.com/YUsf51JNmr84RQXr3ubQRNWIo4nmTcVEATw0FIynuA8O1wUGI_iE7iNGzi0mepc1mJQa38rXKn9s8LllAQpV4oSHhtoqVfieBEuBE6ZPUj9kcRqPv-aR14KBuDMiCPA-7wvoPO0jbcSfAoqBIUxVmTyQQIODbATgwXhXK7V7RJZuXaRse3evEeewSRp5o83fq_82xRjrwBREXCeiuaP4e6e-raAHSFutOspADJey3GQfAWYZGzwRMv5NeHziKuK_he-Bbe1JVyXecy4hEg4FJhyT2dZkQsuXUgqIyguNbHXgj_2ynmbrvABbiO99ALHwv3gl4hD5IdERhp-UiNsgxuu_xTAbG3j4F-DSeU_GA362mpJWjwdts9pF44Q0myss37edNkGeL6yuX56c8G5kqaKYfb8okR-5lRQm0VZM07EbGyvGqBqHiCixh2Q3ycrNOPCvY2-7ftRy4PuiOJ_xcN6XQl3YZTe9fZxq37wdHnuwEY9ko5xIejQRbHS9p5FQUOyZgQ_Y_W0x5Yp-hOLMgrXpIUHzuVK6S1F09wHAWqP7kv4IsdVe7d5C5ndUVx6UqoyHhY_L1cc3KeRYmdIT5jdmkRLVA_xq3dbsDLuUz5Y8vpjDPsVZnExWnhJIMMA4PuXhzbUHFgslhRHHOg3F6JTas-Ad9mm3hM6m1Njtpxdl_E2vYfODb00g7BBghkDzVre1YwPnPCfgTYDwXG4oboL8=w550-h301-no" alt><br>えっ速い<br>Client 側が 2.14s、Server 側が 34.45s です。<br>かなり速度が上がっていることがわかります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これは頼もしいですね。<br>Nuxt は SSR にしてくれるのもありますが、<br>実際 express のサーバーをセットアップしてくれるのがずいぶん楽なので、<br>使っています。</p><p>これでより良い Nuxt ライフとともに、新学期を迎えられそう！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://qiita.com/kmdsbng/items/d23f9b5f5fbc8869baad#fnref1" target="_blank" rel="noopener">https://qiita.com/kmdsbng/items/d23f9b5f5fbc8869baad#fnref1</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>フリーで使えるクラウドIDE「Codenvy」を使って Vue.js の開発を始めてみる</title>
      <link href="/2018/11/09/codenvy-vue-starter/"/>
      <url>/2018/11/09/codenvy-vue-starter/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>高校生活が本格的になってきました。楽しいですが忙しいですね。</p><p>さて、今回は、友人とアプリを１つ開発することになりました。<br>そこで、環境構築などを友人の pc で行うのは手間がかかるため、<br>その必要がない、クラウドIDEを用いることにしました。<br>使い方などを記録しておこうと思います。</p><h2 id="サービス・ライブラリなど"><a href="#サービス・ライブラリなど" class="headerlink" title="サービス・ライブラリなど"></a>サービス・ライブラリなど</h2><ul><li><a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a> : Web アプリ開発のフレームワークです。最近ホットになってきてうれしいです。</li><li>クラウドIDE : クラウド上で動くIDEです。環境構築の手間がいらないので、スマホで動作するものもあります（codeanywhereなど）</li><li><a href="https://www.eclipse.org/che/" target="_blank" rel="noopener">Eclipse Che</a> : クラウドIDE の一種です。あの Eclipse の「Next-Generation IDE」だと公式サイトには書いてありますね。</li><li><a href="https://codenvy.com/" target="_blank" rel="noopener">Codenvy</a> Eclipse Che をホストしているサービスです。</li></ul><h2 id="Codenvy-と他サービスの比較"><a href="#Codenvy-と他サービスの比較" class="headerlink" title="Codenvy と他サービスの比較"></a>Codenvy と他サービスの比較</h2><p>同等のクラウドIDE サービスとして、AWS Cloud 9 と codeanywhere が有名です。<br>それぞれのサービスの特徴をあげておいます。</p><ul><li>AWS Cloud 9 は一番有名なクラウドIDEなのではないでしょうか。Amazon が買収して<strong>無料で使えなくなりました。</strong></li><li>codeanywhere は「anywhere」というだけあって Android などスマホ版のアプリがあります。しかし無料では１日2時間までしか使えないという制約があります。</li></ul><p>Codenvy は無料でわりと高機能に使えて、さらに友人と開発するのに必要な「チーム開発」機能があったので選びました。ただしバグが少しありますね…。</p><h2 id="Codenvy-を始めてみる"><a href="#Codenvy-を始めてみる" class="headerlink" title="Codenvy を始めてみる"></a>Codenvy を始めてみる</h2><p><a href="https://codenvy.io/site/login" target="_blank" rel="noopener">https://codenvy.io/site/login</a></p><p>ここにアクセスして、アカウントを取得します。</p><p><img src="https://lh3.googleusercontent.com/fgn2IlNpZzRnc2cxbqLFx5ZVn3ncPLhzZZWXA0FKULyCWJHpz084pmQAlEPRTJlPg3qUy1jFnjhzQ9hpOnPHOmsY0IPrrb-tGKuqwizXsVqb7TUHKuUeOQU9RpxH57NMNUtHZfOGJtPMs4TqjCgOj7mMz7HHa51s997Je-aYcbkWGE3JWLqZR12nZDJnfB-CzrGzOwKwZp2gCOVBKs-5iJYZ9KMu2Eq7AYXdj2nBmRzWh-8YihneVD9rNk73Olo5SsaGMG-wo0cLdjTqjKphTWBAPvuFyg-VSN-CgCNT1GP9M97ehNVh9YIjdbG9tnkD56hNv8LPYR0Rk7vdq_5St0NF5bqBoFx6VP5dfXMt5Fg2Cdi8grFIbB7Au6T_JLUKHC30Aj1agEpLbKGGLa368SeJxSUGiX_tA54F_lPvsWBaOY4k73GZV8MhSgDmQAuy7tDiz81GU4oaY5GaisqrIt7rrrMITIQW1RmXJIEs8sjguf9m2kffA2zqAcv4NdYys7XMBv8YR-WHnppaE3KYlGtcLnZ8z5s8gfICs2msiwIzUDJhBUTm2C06r4qD6zOtlgWkoAI4XMb_YIdAReGj4Gjx__AniU5vCAGde4iROcIIjgaVUrqXHQwZeyco8inC9nW5k148UGV61ELvyLU2A_1_zlPUASAdqZKadxdABLD2ZJjJmzWI2PVKEj01PTtV9xJ6auRI-91Owgb2g7eNR5eL0fMabcXgM4nk=w1304-h814-no" alt></p><p>そうするとこのような Dashboard が開きます。</p><h2 id="Team-の作成"><a href="#Team-の作成" class="headerlink" title="Team の作成"></a>Team の作成</h2><p>今回は友人との開発なので、まず Team を作ります。<br>一人でしか使わない方はこの節は飛ばしてください。</p><p>左側の「Create Team」をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/team/create" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/team/create</a></p><p>に移動します。</p><p><img src="https://lh3.googleusercontent.com/NWGxSw6vjq6KxtNYgsqgt68mpxi9hyL-cq3M5rWtsmRyQqWDEsaumnuqNmAs-07Ctc0F1358IxskVNC6OuCnbqBkbASif3ZZMAmuoWxoHfM0B8-6-xcW9rwUu7VqO45zz7oS5ImAn_LvuaIg1p6WMqDrKAU7HezXdlVN9kUnSjaOQrkGx-4iWIRlpPoVd3C56MSKq6rHtQCaFZglOxdxuKPrl6q_Bui3yELU1-FgvTHXJDL9mAi6YW_a2-2NELVW5trk1fwS30ls4Ih1SqbjVYbbR21KzhPR1ZPZUBUbUYvte8t-KC49gSK_e0C4ejzwiZR0G3iggYTs6MncUAwZppD5reMEQcKZl1O4rjO9jcd7xMQymgX6wqr__fVx7Lh4G70Q9Rswjs6UBWCrjeoidLI1TaOYzFb2xpoertmnRm0u48Hadb8isaQXSIt_lzHFv17DGjVsrlQuaYSDwvcItF2wHrJg4_GuRO4bDbo3n9_8IIF-Fyh0YTfcNLdaYnXhETvjXJhQTJreqyv_mtvvBBdwnd1HpULk3SpwMLWTo5cY-PtPI_pN_LJxprpdSYcuAyPrFkzLNOVbtFZpLhT_-YR_h2oNOjBSaUyA7JXaU16Z31v283DAoe_FkjxfmQC_0pOme_-8uEDNDi5ADUjQSiXOvKSWe4f69FscyAXE4o1rLRm_6zHt07YMBPgqp6RP_5tmjzrikt7oA2BZMUGbnZiiy4q_vV8jJRl4=w955-h484-no" alt></p><p>チーム名を入力したら終わりです。簡単。<br>メンバーは後から追加可能です。</p><h2 id="Workspace-の作成"><a href="#Workspace-の作成" class="headerlink" title="Workspace の作成"></a>Workspace の作成</h2><p>左側の「Create Workspace」をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/create-workspace" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/create-workspace</a></p><p>に移動します。<br>後はウィザード通りに進めればよいのですが、<br><strong>チーム開発をするときにとても気を付けなければならないところがあります。</strong></p><p><img src="https://lh3.googleusercontent.com/m71ZlwbQKpO7yVfswBNm4UIiu373h2-XNvjZjGFk7EdhFUN4VRrAevCR5zNm_rE9aS8ZylB8PlRJ8aa_7ESHJMg0WhoUg-aSxio4L6KfPOYjE2AT7lPNp9tquu8Kkt1-qGPB7a0jPn6PTHGKPj9DjL1sjdb0uEEJj4j4VRxKlinJxPnCgYRuBDuR6QV1EI_B5m3ZODPBk6TtXgm3Be0oSVEzKUNYP4vHHhdRyE-pZ6rcRnJMUr4gW25udmBACmf1jGrY0h_Sf937w1DzE4GMYSXg2GZ9oSY-j1YzurTlUr8PdXkP9XcPKlbsJWhd_F6HKIoipdyn0eJ61FhDV7nOtgpd1TKXTBC-_42qZCX4lTjk5mvjCi0uRAVonN9TeMSqI9qvOd2L0udkXR2NhK_zW0nFQDUF3SGYDOtGLDcVYyp7WvLr1az_7dI8Dzd_qThPazp2jt8oTyXX_iPzHdt6Y5nSBUgYqVSRKe3GAzzCcGlSurbTS0yCD8soFxRIjRV_Cf_whdF8ltZFDra_ueGU4We--rIJJGeYhhYGU4VQ6FYwxLXO7Dy9ed5GyBOgaVk0yPkOt1oQJJRWBkau5FUTI90EwhgzspEIW5e5FQDjT_w3ayQmBbJBxx7WchEK8psd02dz-jBUO14dsfTPbbLmvNTVnro6JVFI7RkNMg0GumFfILoZinHqys_-P8UJiSiuDDZkwO80P33U_wPgQALW9NOoU7rap9wbollw=w477-h125-no" alt></p><p>ここでWorkspaceを紐づけるTeamを決めることですね。なぜかこれは後から変える方法が見つからなかったので、ここでミスるとWorkspaceを作り直す必要があります。</p><p>Stack は Vue.js なので <strong>Node</strong> を選択してくださいね。</p><p><img src="https://lh3.googleusercontent.com/i7_xvQYr6BRphI4eEChaNCkdYoFnEG-k7RGjBHQ9WH3ZbiTEdhoZbn7VztMpbua0bAPp13HCSespKJUObOivB7f8mXNOPlW2watZ-BUWJl5Doy10bPdAb_VpApRJbuY_pAv9_3cwTj6BJbwAx6Km0v_F1w2gHkld5brLadeFyqsOWoVoM9arSjKF5srP-iE62soaWkIdxY01TC0AUp8rh4a6zqGdwOAKCawshYRtWje9pTIoT4RqLyFGv4uvfEMtDNZA4_RNkpWsmH9EQSR3vuKRYc9hqGzvTLR9Od7M15M3g5Xnv232vKQnw5X3G0qZdq__05_CCUKLu2ip3OzchCdwwGx7sq6GtuFPsbADWnRigexxdAphAV2GGMxO5ehKa7HcpSe5aSQM11YpjlIDQuh_YOKd9JZ5U7MYjDFx2rR7YWQUnzhrYs8YqtvLtpPWlc55I314cMkfGq4H-vwIdhvNM4qLKgSHcMTXeDjQJgrVr6oJnqOx3NHVLz4BxDeiHFi7oPBGODH0Sg0Uy-MmcVXd0I6NCr0rSFS-IQ7MbcOEdkjZ6F7wkI9dmbKT6-PlXOnwQl9mI3o3vU9vyOSYbURWydW8tdgcsO5h610y1ycSOS2AxTC14PgJ6j9d9bvEUNcyaUo3h0ezNjvb3sxpPXQAxUFG3oIAjqnpPrYoXJCXsZWc2ZH8syZjJTfJuOc19IcS-Q5xJpJgHGnQdsmhuIBN5xHnvPh2JFyc=w1079-h207-no" alt></p><p>なお、この Projects のところからは Github のリポジトリをインポートしたり、<br>Git を選択すると非公開の Bitbucket のリポジトリをインポートしたりすることもできます。</p><p>Project は後から Workspace に追加したり、作成したりすることも可能です。</p><h2 id="Workspace-を-Share-する"><a href="#Workspace-を-Share-する" class="headerlink" title="Workspace を Share する"></a>Workspace を Share する</h2><p>チームで Workspace を使う際、なんと Workspace を Team に紐づけるほかに、<br>Share という設定を変える必要があります。</p><p>左上の Workspaces をクリックして、</p><p><a href="https://codenvy.io/dashboard/#/workspaces" target="_blank" rel="noopener">https://codenvy.io/dashboard/#/workspaces</a></p><p>に移動します。</p><p>Workspace を選択して、設定に移ります。</p><p><img src="https://lh3.googleusercontent.com/IDGXYtM7u6K19ChPjiLnXPe-aoNqGNXedy6i88yqCLPj9t92a4QpkeNKsbGIWKqknx7NFlX19nG6WYYEKnGi7B5b28S9488_p7oHet9sEFgMKUMpIdGxgGnwgzOa0WRw2nP9wlyYDY0UkvMus3STZ1nOVfGRjZfrqZoQRR8-sjOQvl0f9YuJGtNdcmCDimE3bs4eUuxjc72e5B85ziGjqoazOcaIc_b5l_3Dvz7eiFceEIGosEaroPVkn--RC31yaBnRkAUwkhtLyoUBfgqwH_O19l3vugEWZC0Qw2dLBZDkLzHItYPwEOEFaRw7QWA5MNvjiKGqL8hwJp5lAR25nnzFcOM_L4EhyQM78dBJEASwOMdK6-zNElbhDLboblRoORSj-p4wPdiuku_pfLd9SJOgVYGf8MhuwDUq9tb8LJ-YLNxrHxQkObPtr5ogAT2bqPdxtcCttZR4cyzyFPct2QyIeeAdKPSUhwgJG1ns-d_Lx0SxPerBpqweLHkK50xY_F-Ci_VlZOyVxjKidweR6PBCJj2M57YbIFU7nvssWSO49SxwqpW9r3QKe2Fzih-WMSR-FClK11rZLoLjXx5ZShza3jWl-kM0Dc0PxGKTjCyZXynNHKGG7RKodkIMDIeyFkzEgc75nxNlSSFk-B5cKJke8VuGUNxsTkHRzVfR0cwH2zgRatIpWrXlMKg_MuL0CQlmRvrkNgKjEaUoMHtkfFy10OqKSfwa6vCS=w887-h386-no" alt></p><p>Share → Add Developer を選択して、Workspace を使う User を追加してください。</p><p>ここにつまづいて１時間くらいとられました…</p><h2 id="Port-の開放"><a href="#Port-の開放" class="headerlink" title="Port の開放"></a>Port の開放</h2><p>Codenvy ではどうやらポートごとにサーバーが割り当てられるそうです。<br>例えば、9000 番ポートにアクセスするため、3000 番ポートにアクセスするため、・・・という風にそれぞれサーバーが設定されています。</p><p><img src="https://lh3.googleusercontent.com/qwvXsXdnG4HjbxNkoxDPBCBVd8x7y-Dxz67jU1Tuz4I9h4mj-15QzcEdhvmzMxBQFEwXpLmGZjDN1eEsOKo7CVLpbXoYGwu0lRk2I6YFYbN0UrUNr3Xgo6zvlWsfzUmmemiTxDFjhpvQGq7jdH2EC-h6vQlyIrAU_L1i2NZ98uPNIzzBchH2a1fZXvYIwye08CWq30BRtqYkVbqLS57E8fgKL5LksAHDDsxtgIkDbB5NJ8PiNvsK7kM7KmihUxAm5Od6JPFES3ZeJ-68R6AcSsNuAJ00ulwP-ZvpMEnMzKT09kuKa4ktL9Q9hXbAjdyeLX0lGNPuthCn2UpCsx3u3Q9xxnB7nq_eyUtfiQNN7wUUvGwgNh8CpDomi2EL_2fpomiDlc-JOOPDzZO7-kFumNAUDwiBuwvuRFhAv9WLDhu_eNrKAozoLt9eumzHiz-LiLMoAf0V3DkEq9vlnEBTtIqTqXNVi5bag7Ggz66HSQQaBy63olBdLo9PAzWJ6KdrBq2dZqGcQ7skZvt4XR3BcrbJSCVObATM2yV61b3X0uIaC0qRBThxOICsJDAKF7vNETRDu0laDeboQqv2fyDsjeWnH37y63ear5elREO67YUWXDN59TuAFb__vKQbslqF-yld-Noie0IiGuUlFvCGINgR5M1nUn8rn-JPib7vuLV4mJnbD1wRgFOIzCVlLajOxfuMyFvNsS07mQoEn7GZuI741AR-NQQcredq=w561-h713-no" alt></p><p>デフォルトでは 9000 番や 3000 番が開けられています。他のポートを利用したい場合は、追加する必要があります。</p><p><img src="https://lh3.googleusercontent.com/iWE_qQl-G7F5yqujX08qyXPKSWHCW0pm3kSn8CtXgvkMlNT-9xUhHYgK978tRmpLPwBXh6sZcoT66NCU1nuUcNLh5SHMzui7tUROAQxAJnJEOffFnNOjAEDibv47LAMBm-woC88RExopg4-9qbR2fCNt-xQArBBEoRMN-MLob5rA1qqUnOE9lhYu_43k7-ty6NqeFuTgDz0oDyRhPuo_7sH5ccM8VnC333HEcajE9SAaZFTA-zLApw5k3bdFSvHci9GDSOYJuFOzpOv91Xe_-85A2aWYLXTCQW32ZvuXTd7ACHmmVOCFayoZGcfiWzQbahEXT0OCikZ9OSXjjU6LuLHecgBUAF0Y3_F2P0TPD_YXpfbgVYvfO6boV672CNES5MY01BE-qBAuO9f13GYNH2jUZWviNMZ5rx1Q2V330Y5u9968zC-WvMSG8akNI-AsWrwjTgZdtbLhkondhsMm3p-zLLPkYZV8Bij97lb-CjwKqjNMLWE5tQosE7OuFoIZr06GGXu4cpfxOjvrwfLKCNwZnDRkf4EwEWgvytD6aOBZOpal0u2bvXXv_mHVQmcEB_Nlj0-cimLHWtROdXQ_lPVw9JevPqNuwZIuikjlwk3J2JL6u1IN4Y67qLrhday2UxQU90Bipp1LUBbsSls_M6Ht5BLmxfG_GxVSmRLl_2gOiQER4LGdpZgUA3kVJXcEp3zb6S0kgYcUyEiN8dNQ7KMuyb9fMtVl_npB=w895-h202-no" alt></p><p>Workspace を Share するときの設定画面に移動して、「Server」→「Add Server」から追加します。</p><p><img src="https://lh3.googleusercontent.com/Co_2szRNmm1XNSqYEuQ4ea9BVBbS4y89Ghkn7KZ48hAXROlzpox9Id66sXWASijTTYjFfj-jogw7xDiU55ium-9UYQKObg4wma3elzExZgD3h1CGMHLsLd7XzKocvzT7IuMKhF1jbQQPqFPYNb3C-XQE7jJoJCE7mLFAK_lSRLCNj4a-qI60gDjQ2jU4VEpqrosU5hsTnoD8lJc-z9B45eAN9NsVT0uyGcCSBuzbb8ktGb67w5KcELo1KLLZszWHsDKIx1Xt2SQJ-XdCwhC8Y9_oC4UaBsddR4V_bLse2EWipX_Oo165L_e4I0aYbvK7wRFxRPImmtk78qlNxTsiosEahukBY0oSJs3LzCV6vgwGNy60tfmlB27uN-_HZ-jfzokb0v_AsE8PerSpT6cYqYpl4NGkBZz5ghzKptHqy4WhJsma8mt8qtjwST9_J6ycUGPQNqN8g0iHUcvB-_1mNBOGHPMm8zcImVbiNC5jKx9Jxu_ir50ls4ezkmif17wVrj-WBOdXJSaCR-cVOzBcGLuIaInnnR-arTybA0NtWby9NiAPnx0RrcyFBn_yjS70nfETGJqpxqS46GOL7HoZdTD06qzZdcB9zS_b4FcNof6bkMMgGPkCqN_HbEga5ITq0nLN6ABgz8wMYLrCNdLWnCIBzzhrDbmOMN-7mioIr1rrcklAj6y0KInN3zmrG0c9FvLK37oGrev6hY0CqTxDOvpnbFacIaJVnHf7=w595-h290-no" alt></p><p>Reference は何でもいいんですけど例えば「node-8080」、portに開放したいポート番号を入力します。（8080など）</p><h2 id="Webpack-の設定の変更"><a href="#Webpack-の設定の変更" class="headerlink" title="Webpack の設定の変更"></a>Webpack の設定の変更</h2><p>※ここは vue-cli v3 を利用して生成されたプロジェクトについての話です。そうでない場合は適宜なんか補ってください。</p><p>僕は Bitbucket から Project を import しているので、それがそのまま codenvy で使えているのですが、codenvy 上で vue-cli を利用してプロジェクトを作る場合は、ターミナルを開き、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i vue-cli</span><br><span class="line">$ ./node_modules/.bin/vue init webpack &lt;プロジェクト名&gt;</span><br></pre></td></tr></table></figure><p>を実行してください。<br>ターミナルは下のほう、もしくは Run → Terminal から開けます。</p><p>Codenvy で Webpack を利用して、App を実行するために必要となる変更は次の通りです。</p><ul><li><code>host</code> の変更</li><li><code>disableHostCheck</code> を <code>true</code> にする</li><li>(<code>port</code> の変更)</li></ul><h3 id="ホストを変更する"><a href="#ホストを変更する" class="headerlink" title="ホストを変更する"></a>ホストを変更する</h3><p>デフォルトでは <code>localhost</code> や <code>127.0.0.1</code> になっているかもしれませんが、外部からのアクセスを可能にするため、 <code>0.0.0.0</code> にします。</p><p>&lt;プロジェクト名&gt;/config/index.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="disableHostCheck-を-true-にする"><a href="#disableHostCheck-を-true-にする" class="headerlink" title="disableHostCheck を true にする"></a>disableHostCheck を true にする</h3><p>ここはハマりました。このままでもアクセスは可能なのですが、<br>「Invalid Host Header」というレスポンスがされてしまいました。</p><p>&lt;プロジェクト名&gt;/build/webpack.dev.conf.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> devWebpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    disableHostCheck: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>あまりジェネレートされたファイルは変更したくないのですが、仕方がないですね。</p><h3 id="ポートを変更する"><a href="#ポートを変更する" class="headerlink" title="ポートを変更する"></a>ポートを変更する</h3><p>先ほど Port の開放で、「8080」ポートを開放しているなら大丈夫なのですが、<br>9000 や 3000 ポートを利用したい場合はこの作業が必要です。</p><p>&lt;プロジェクト名&gt;/config/index.js を、次のように変更します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  dev: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    port: <span class="number">9000</span> <span class="comment">// or 3000, 8080, ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h2><p>下のターミナル（出ていない場合は Run → Terminal）で、次のように実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /projects/&lt;プロジェクト名&gt;</span><br><span class="line">$ npm i</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>こうすると、0.0.0.0 でアプリが実行されます。</p><h2 id="URL-の確認"><a href="#URL-の確認" class="headerlink" title="URL の確認"></a>URL の確認</h2><p>この 0.0.0.0 にアクセスする方法ですが、先ほどの設定画面、「Server」より、それぞれのポートに対応する Server の Url が貼られていて、確認することができます。</p><h2 id="できているはず"><a href="#できているはず" class="headerlink" title="できているはず"></a>できているはず</h2><p><img src="https://lh3.googleusercontent.com/cwEfndrkCCfKIE4UWJ851A3acX2oDelqIxsJv77w1IJyHUTCwW95V_8SOXLlTgCeVMoUuutEy0LDDOrmW_RAiATEGGrND3A-dNz-dCCK8_idPXf2z_T8saZh9I-4LfDm67d-XnZD3stv3k9L8bDeQ0E1GsCLCL9WdMjNgs4gSyPMaGTuMlVxdpmWCBuwKqOP1GtwOdCIDHmd4kdF9qCp9V6d5fiePWZJGYsPuNZkMhtgELf10HFOnXOIJgRjp_QyxWY1Lz96S2KYlSB9ALGBayCqtl28w_jWpXxuYY9ZwHqHC8gI_uo7hvlTJeQwDUz5h3sRY_BDMw2HmDigXGqe7A0xiIPLoC9NorBkDmX00YeuHVXE0nCLdJgGel9qedS7RivtdF3gB72Ln7klwM1ZCunyIK9zmgG1Ru-Agl0jTXGdPzJgzJ4pV5XuM29Q1eBw1AFOoxnJbFMzbZYbiulIj35DyLcjwswN6Uvw-MX2RkCX2tZAy8pD5Jo9S_pe3TrtVGLEG6VXfmP0epSYmEEqnJl_ofDC5w7w2Y_2EMBulWkFGKip7BJfaltDkhWcaX7dMHMT5MsNv2hxQiGb9Z1j-Kz6K2_o8hEOjrSalhyj9bot1LBDBVwdB4fsTkJ1k0HUQhQ_dA71iwiZ7zPysQOTTv1AQVCPZR9Mmjdj1F3D6IGtKBTCzI99ZwEfjztD0qXaudEKBTmYU08GaTXQwGJj7KkNN9NUa7p2b02w=w995-h607-no" alt></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Codenvy は便利ですが、情報が少ない面もあり、なかなか大変です。無料なので仕方がないのですが…</p><p>最後の URL の確認のところは、Commands という機能があって、それを利用すると手間が省けます。</p><p>それについてはいつか書くかもしれません。</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> codenvy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twitter で誤凍結されてから解除されるまでの道のり</title>
      <link href="/2018/09/30/twitter-frozen/"/>
      <url>/2018/09/30/twitter-frozen/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>昨日、本垢の Twitter アカウントが、なぜか凍結されてしまいました。</p><p>正直かなり焦ったのですが、今日の朝、凍結解除のお知らせが入っていました。<br>今回は、その道のりについて書きたいと思います。</p><h2 id="凍結の種類"><a href="#凍結の種類" class="headerlink" title="凍結の種類"></a>凍結の種類</h2><p>まず、Twitter の凍結の種類について書きます。</p><h3 id="警告凍結"><a href="#警告凍結" class="headerlink" title="警告凍結"></a>警告凍結</h3><p>一番軽いやつです。本人確認したら解除されます。</p><h4 id="c-f-ロック"><a href="#c-f-ロック" class="headerlink" title="c.f. ロック"></a>c.f. ロック</h4><p>「ロック」というものもありまして、僕が調べた限り、<br>ロックと警告凍結の違いがよくわかりませんでした。<br>わかる方は教えてください。</p><p><img src="https://lh3.googleusercontent.com/3VveY6CumlrQlwgweSX_TkFtRZy96qyAsDa_qTKfoCYdAKtjuvkSJnAzYMQXaD-K6ZMWDMhy3H2pA03iHJpyyNfb-QlGGGjBe-P0EKF0yExcsLn1LHdcmD5a24Dn5MDZ0axk05SUqJfvEb1A9kzWnIWrXsrdGNJtIGSzFnu3N7YuZsky4FM9dq0Ap_8Yp00MV2KZcb1CkzXXTfubDjjB5SnEk2-1ytixw-y5nre9J248Pam2Ks9-Lmq7Whk7jfegbF0o04hYOREMw4rxJNnCE-3v9hzc4srR-lwvvtwJjEqhRCL3fcc6vJUPPX188tE1ZxCvfY4eqyprpUz_xcKZTECXQqfofAi_q6QybABbJ48WPhULb74ucOYbJYEgCX_J7eycERhan_YMlLy7xmXghNhahu-MDe7mMO0x5t_fnd49AHx0oeAWTgUIW61GrVbrSCDqpKU9HMHQb3r7BC0Whn_4h_3CQ2DfWWUTdeSJXq9Y8KBHtzkPmrA-XPVO4kjP4hFTde2ml1T0-lTP0aK9dEN9MP_dh6UKhz2bmhtTlVYBQFwiuJyn_yqUVpufRRl2LjRzCbGo2trMguqSXpvQVsA6HkLaPCAu8Iq0mb3D7RsHUcRLzN9Pca1xFRTbFKgoQGEb0kBqfLuWL_489_JkcNPEeQQ7-no42tjgmV9tQoA8vu56ubXzAnWe=w660-h494-no" alt></p><p>画像は本垢が凍結されたとき、別垢を作ったらなぜかロックされたときの物です。<br>短時間にフォローをしすぎたのか「自動化」が引っ掛かったそうですね。</p><p>友達によると、最近はアカウントを作るとほぼ確実に最初にロックされるという情報もあるそうです。</p><h3 id="凍結"><a href="#凍結" class="headerlink" title="凍結"></a>凍結</h3><p><img src="https://lh3.googleusercontent.com/3HZh5t7UyeqaN_jsd6z0cLI1K2aA2J7Z3FaGtG45CA-Nzo_YLA_7iROEAt4UUHJchcIkwNceTgmERyHobFrRdBjrOLsCRMEZtYfVDe6Jl8X5Y80gYdHYIx1GWEJJpSrsouWLADXHeLatV91BQxvIRx2SHAcYShyYibHHfZIP9pSRY-UFJm_HuHrxQRVh-3daP2jCeOPbq96tIqOsUqB4s4yTmWNHPvp4CNF10S-9yjW5oBPBvfcA4MLihjhaTAtIdGRwyoCHC3JvIdeSAPkjSNIoydKEwQJgNAru8gPPKUXumpNwS4wDmdKgL1x81pmWgEqYJPyKvEM3Ktgej7Nf9cVznXyvlWDqXABZvLkO8qO6ghMk_lz3T_4wu_3gOg8M8KoexJEHk1YpJayX76ZaWasQvHi-A7Y-YJIavKCvaZ19wTq-f9NhbjQMI16Sdzx-kXmJHglq3YTRA5-3UFRkxWKctjgPBVVc9bi0MR982_NrtcQdPaHjwpTJWoCvE-wSxo5WxFlnKB1GgfTw2-yLhX4pu4htKd9hgpPU-oxG9qZvnwEK8EPyuuV6jQwrRK17Bu7vWz1MSTWeenrfYd1XjSEZ9kDptMtiJhPSVyLMYoUrEE8s-xvwk8a4F6LLiJQGUZm72yA8D9qS8DQ7O7xUPgxU3MoAfyqRN4oCwP6GGR1HBCPaRfHvEdT8=w662-h320-no" alt></p><p>今回僕の本アカがされたやつです。<br>ロックのように、本人確認だけでは解除できません。<br>異議申し立てをした後、メールのやり取りをして、<br>運が良ければ解除されるそうです。</p><h3 id="永久凍結"><a href="#永久凍結" class="headerlink" title="永久凍結"></a>永久凍結</h3><p>スプラトゥーンが上手なた〇じさんがやられたやつですね。<br>基本復活しないそうですが、解除されたって言っている人もネット上にはいますね。<br>僕は体験していないので詳しく述べることはできないです。</p><h2 id="今回の流れ"><a href="#今回の流れ" class="headerlink" title="今回の流れ"></a>今回の流れ</h2><h3 id="凍結-1"><a href="#凍結-1" class="headerlink" title="凍結"></a>凍結</h3><p>夕ご飯を食べた後、Twitter を見たところ、<br>なんか画面の上の方に赤いバーが・・・</p><p><img src="https://lh3.googleusercontent.com/x4SyhA2rn5dAbmBa1HD1hlV9XmRmhh2kcNlcJidew0xpe2orQ5hyCZ1kVp4dJOeLNlZsbhvOi7JXUT3FsMYYZyH4MjSblSROTR-tD7G9XCHDG94i6oEn3k09s5ZNrtgGJsSCUl3kmgwWqUfMtWrlMtKJ5x_-vNUkEvv1dYO8xfOEaUmRNCm4qebEPGV_Ypi_n8eCEYv_BN91m-tnRw6G6sPrM_88MuOTiWfqmNec_e0IUJSOucjzZZmnPiraZCN2BRD5MfmHOnyqvKGSFyFsyNsNRXC85qMzIOelOgUsxpUYyYc0efdI5OHlLecvyM30_1DVSVEk3mi1g6Cu5mnXb7qfeG8uxiHTO5Ft4K7X-SU7LLhPnFb-hsrPziRDQd9Q3Q952RC2c6trLXIrum8Kj7ldEmQ1Mn924EB4I_B51eQKz1te6OVw1PNL5ZohN4lMZFMF5ioHhM_vzlKUyHvzlhvN4tL7Hei39V8u3sw04B5Fpj3oJJBO36EqZj_eb0RccdraUrVYWpo_ojKkmrYca0TWZU4UiizgePp3sk-n1WG4DGYs5dYKSvUBabnHlmfuHJJh4cL04FCVxCfilu7aTCe1cRS9wPjiWJOvV3XMB2trJyaz3NiOYGbT5m4tv7XTS1L7_jW-UPA-LmKPpwPuY6lsunzv-gPrtC5SCF75AWpRHfgLeqoVOVaT=w865-h48-no" alt></p><p>えっ・・・凍結？</p><h3 id="異議申し立て"><a href="#異議申し立て" class="headerlink" title="異議申し立て"></a>異議申し立て</h3><p>思い当たることがないので、リンクをたどって、<br>異議申し立てをしました。</p><p><img src="https://lh3.googleusercontent.com/PibFx3Dh4DItqqGcMNflCG1tXBaOvwkxWbqvlrk6uuIknfRnyXdaeB8PO73SjtACkJEPxpkh5YH-9iTShF9E7fpSEem-Avh_qxEKPGkIA9vZDTdVuoiBUDVeSBvzh4Q2730Uv7xkTkWAJgZ26M49jvYszYcfyFT3UjbJlXHJ6yy3JRhvJdrvvagLLBlpiUwliQIoPl-K0MGzvIsm_Py_rXu53UifeYMO_dlpx10m3PVBB2ehL0Gows-2ekJlA-LcOdkfl8QLB9otysUsyx_UtW-ng0llkUhQj8fMZufE70RafXqMA_VPK4bSTllIvKP4DC8vBurFsTBPNbdvm9sxYdIFx39x18X-p9n_j9lmuq-P9tUxm5Muysw6o2wo6IWzjHW_sUKks-C86CckuGXRpyJHRuR5CLnYBa5RK_QMWFtJXrikaXG4KgJLYTTLvbArGFCQro36tcJCVjTBMBawL9ka1DS14J7qTEJMvvu66IGWVCF0DSE_yGnUo8k7JcDx15lYm_WNGUHrB-oHjNFV3V8AVQzLYHvr2b2kyGE69XSmd-fFpd3FCnJ-FSOBGkN4jFp9yXEHbbH1cqf80v05CnrqDXW6gqdpDUw1eg4V5e-2DDxMtIPAxHMiv58KZxEdQEWfjtUnQBaOWK--glO42r0hzQoHw8kN9LfoHkkqd__IE93c7rAuKqLI=w925-h700-no" alt></p><p>図のようなフォームに、必要事項を入力して送信しました。</p><h3 id="自動応答っぽいメールが届く"><a href="#自動応答っぽいメールが届く" class="headerlink" title="自動応答っぽいメールが届く"></a>自動応答っぽいメールが届く</h3><p>数分で届きました。なぜか英語でした。</p><p><img src="https://lh3.googleusercontent.com/79sNNljp1fXwIEelurVpwhHdl6ozq9RChffPY7V1t-PksqgGpStTNK-UZ0nxb_3LV-kub504p0LepVaebYWlfWtWT0v5fdm0gzomblMyUMY13yHaH1lHBDJTlEcvRPI4dKvkNmXXVVI02XoeXXq7SXPFWXlKQJ06nuC0TtODO_tDf-e1-0FPHOaacuC4HQ4GLdWPh5w5UgerwoX-BZfqWtqAKoOLYgk2Iz3LRbNbW_IuXUtuJWbMXgmh8i92t9kbHDq4ZUfuPN3S-ehKOxzqHZtBE-zx6hc4Z4EdvbeiOmDCoydzkBsc7t5zvk9RIupSxBX5RlWKkCzRsQsCZNvLmd0ONIETTj9yv8YC4LHrzcunuu-8rbGfn-fUW6tjqbPwly7BsADQ_Kr7u33MBvGS-bmShlnVwLw_rPqWiP45Kzo39x8uqBlqsidjbOQMaKzQYS-pXQNdB_wMubJ39uYaTiiGDkm5kdJX0rC7BCThVOkbdoNKRYP1xm2h9rVolri_HtYyTFnRpW8zF_RlBbcKNS_U97dEUpn3stwznUHjkm7KWyKcOwOhOVEXk1z1kjkn1zb45lwzqccfkKl6lHnQHW4UDla4orvEv8eRRNk1T8SdC5pw531ZdoEbbd-3loUCN_Qv5IQ0cEWB0urSVJKND0pEfM4Sm1ovDxREaCYUSL1u0QPhLtKZ9B0Y=w973-h276-no" alt></p><blockquote><p>It appears that your account is in violation of Twitter’s Rules.</p></blockquote><p>Twitter のルール違反があるそうですね。</p><h3 id="返信を書く"><a href="#返信を書く" class="headerlink" title="返信を書く"></a>返信を書く</h3><p>返信をしました。</p><p><img src="https://lh3.googleusercontent.com/AgiZsyIH_IShMkCQS1QI28aT0X_iNyDRtKXB1vmDq51pzI0VLc0YGKN1okZCXgW9Y3pOsLxlXwVsRMPAoyfLGhLkkkX7qm3rCaFRDWi_8X67uNqe22fjAbrm5H1oqBE9ovnhTOJXbTvmxQfKck9Y7AbZf3DRCGLS8xdzI5KScYaXSvcn8k6FYjy5_6WUaWRgb7FppoNK6zeH1ouGgYYeZspwsdNf8BAJKC_47sQhrBtJd9d4KS7_usQUDj45MGWcGbzoyAmOoQV8h0Lwb_vwXk72qdDV6qKHNDakmE78xDjUtTYcpNDOwouJ5GefJGiQ89m20a6On9Y3S3h1k4IsjCyI-x8zRppndvuRU4mI7xrNP3U5lfV_Lmp4fRKLl2L40-jVYaile-3AQA87Q53iNhIOd85CAI7M6HCeBMAr4Z1dBC1a1eqFA6F0FBcLQ2lheCKvCm2ZFKEORKq9Tt4qIsBiwAPnHpLCNNznHbtCaajIf6nPRaPLl1VHRqlNlGjQL4Cy67eMoVvGtKTz_dVzGZO8ldwiKM-ku7tbT0sS9ub4c_QC0GHxwsUZVeoJjeiDhD9Luvp4eJZQHNYO6cDpNjvoFxpoksU5VIItXZBHLpnXhL36i-mWChSEnVho2dm11vD2dCpqfaKQ78TNBIJOKlgc3DAANLTovB9i8ashwB1juQ8RNTMg-d0-=w756-h777-no" alt></p><p>最後「アカウントを解除」は正しくは「凍結を解除」ですね。<br>訂正します。</p><p>日本支部があるはずなので日本語で書きましたが、<br>一応最初に英語で少し書きました。</p><p>ルール違反はしていないはずですが、どこがルール違反に当たるのか<br>少し推察をして、それがルール違反でないという反論を書きました。</p><h3 id="c-f-新アカウント準備"><a href="#c-f-新アカウント準備" class="headerlink" title="c.f. 新アカウント準備"></a>c.f. 新アカウント準備</h3><p>その間に、新しいアカウントを準備しましたが、<br>ロックされました。↑で書いたのはこのタイミングです。</p><h3 id="返信が届く"><a href="#返信が届く" class="headerlink" title="返信が届く"></a>返信が届く</h3><p>翌日。朝起きるとメールが届いていました。</p><p><img src="https://lh3.googleusercontent.com/Z0-uezx2jKJbx0rMKAbRvm7L5mxxd4UDpGUwWy0-brwmRj9f_uc1fEwxhKRHJLCOY34WOdj0p6BS_e1kJWQTMf4h0x8uTIfWrPMawfcRZjFA10l6DnyJ1NnZmbh3phewVVtKKRh2vFh5aZxRwTsJISKg8mpVt093sKSwmvoUbIy2NMILeSFDUIZMy0RU9wi0LX45kmYpJXbyWrhGRZSr70fnvsaGl43_grLlNyxijy-a5gywBDRWioo9eiBt5M64qQD39OzVGK42VWNh-JbLp7jbhOp0oIsSVscbnrQbalE1chUFKIdQlGZ9Nf-XoydhyCnvfTfUDxo8O8EfS54uIk-CBZuPs3GQgG64otBl6BeGQKnxaM-6l-0ftSw1uMhVM9UeqRrSUbaQpNh4FAjTYuQq2zqO0y-kRG3VP4zFeCju9P53c0K3c6PMXLMM8qIBbTcDmgj4vUCPEjRuP59ivdE95QDRwnG9oxOs8Uuk3A-j1b1WPwoscQWSH1lF25dkCQbI-8tiBphi3-kDFe5Gy6BSvfXA3-i4C9tuEBweSUuWUiVgQfF7u45KvuS16EVeD1Y7BaNsSne6Sn5IZ5zPAcRInrrX3Uv5B17jyqECq6CdreXkFEF2CZC32IcLiIqAMyeGWbgfcPzAGM5Ds9YwCqRsPNg-1qWAgB_FEQIv4Gj_riMktHpJZBOK=w954-h230-no" alt></p><blockquote><p>さらなる調査の結果、ご利用のアカウントはTwitterルールに違反していないと思われるため凍結を解除しました。</p></blockquote><p>誤凍結だったようでした。</p><p>無事 Twitter のアカウントを開いて解除されていることを確認できました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回は凍結が無事解除されたのでよかったですが、<br>友達には「何をやらかしたんだい」とか「なんで？」とか<br>色々聞かれました。</p><p>しかし「なんで？」と言いたいのは僕自身ですよねw<br>わからないとしか答えようがなかったです。</p><p>実際本当に<strong>何もやっていなかった</strong>ようですし…</p><p>というわけで、周りに凍結されてしまった人がいる場合は、<br>あまり悪く思わないであげてくださいｗ<br>誤凍結という可能性もあります。</p><p>とりあえず凍結解除されてよかったです。<br>ありがとうございました。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>僕がプログラミングを始める人に、「言語なんて何でもいいのだ」という理由</title>
      <link href="/2018/08/23/for-programming-beginner/"/>
      <url>/2018/08/23/for-programming-beginner/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>夏休みが終わりに近づいてきました。</p><p>この夏にプログラミングを始めようという友達がいて、<br>どのようにプログラミングを教えるのが効率的なのか、<br>改めて色々考える機会がありました。</p><p>そこで思ったことを今回は書きたいと思います。</p><h2 id="プログラミングを学習するときに大切なこと"><a href="#プログラミングを学習するときに大切なこと" class="headerlink" title="プログラミングを学習するときに大切なこと"></a>プログラミングを学習するときに大切なこと</h2><p><img src="https://lh3.googleusercontent.com/RSoro3rvGbaP6BjzlvTuXGdtnUGI9pS7JAD8aJhHfkUVQkLJCJIVtBaP9CdmnDtkOxLVD2SJXIzklzxDKlRN0EczVeD0xzZ0kYQxdihnYqjzn3EL_ZL20xdE5tS6S2sUZjFXsBfauCDvtvEH8zRz1qvvVjtD18Xf4YqwoBGuLIs5IiNb4mOG0kDH-_ysF9oBryG429NGCwXHhku9nIiw7arEjV6N1q_itnKsGTRneENi4kRupfdpL9ETv1T07NMTOmIv2AfV4z4d85ybkOGmhDWUnct7MrWHxsgIHIwq5fkQG8gO7JDFrSB64Dlj_NUCFvvdbWtWbc400492kC16Z5hbCIVlMgzjgV-EBcDjwqRlwB7rl1GVrnQlymk_Pbfg7SesRa5gfzoh20a3Zdwaz3yQBFsbw4TBHCjYUEp0wnCCKoI_LuvgJRQgDYpWWW3Ix4l5IOO9H3w2PpDBzEErJ8ZYvsQBZcquMNdHbVQOYmsgyBXyxqmWik1zNjppK0op2ZEkOcXyV-pV8u0CVYwvgiLJePN2ikVcv-aE5-U_2ymfNgsWZq_PmZNysHdy5IMPPb8KDL3htjphRVkPdT5Q3kBXzGP8uylt5jmCddV_gg3lA-zmthyEBitQVQQg15Vd2zR1jfCZ5WKSHeR25uYAkhdYLeNMrVSLUPph5zwmzvdLe5xne1UBgmU2=w640-h425-no" alt></p><p>よく「Python がおすすめだ」とか「Unity できるやつかっこいい」とかいう言葉を聞くことが多いのですが、<br>僕はこれらの意見はプログラミングを始めるにあたってはそれほど関係ないと思っています。</p><p>これらの意見の根拠で、例えば「構文が簡略だ」というのであれば、僕は Scratch をおすすめすればいいじゃない、と思います。</p><p>また、「Python は深層学習などに強いから」というのもよく聞きますが、<br><strong>果たしてプログラミングを始めた初心者は、本当にAIや深層学習の仕組みを理解し、自分で構築するレベルまで達するのでしょうか。</strong></p><p>「プログラミングをやったことがある」と言う人たちでも、<br>サンプルコードを写して実行してできただけ、あるいは小規模なアプリを作っただけ、ということもあります。</p><p>これらの人たちは、本当に Python を学ぶことのメリットを享受できているのでしょうか。</p><p>他にも、「今流行だから」というのもよく聞きますが、<strong>流行はよく変わります。</strong><br>流行に乗って選んだ言語でプログラミングを始めた人たちがその思考法を習得したころには、<br>もう流行はその言語ではなくなっているかもしれません。</p><p>だから、僕は、誰かが「この言語がいいぞ」などということは、そこまで重要なことではないのだと思います。</p><p><img src="https://lh3.googleusercontent.com/db62jWzDVHz26c2BXGbvyzqZaON7Cd7dPA3cbP7NWdVpnL-KSO5NLebrC32KUlRBGdI7sBfQKAwf2IWtcyjtoLiE9Fg4yRB8LFR7hsCbIKeC4rFFX_nhXFtkwa5aAdu-oD9XGQ3fyMHP7rl9RnBzK-wxKXLki9hdhEKGCV6TTuRRkEO5Se37F_u-U42AiREc0-b6xAoaobhcYb4iwXYF9kqaQA2qqkVGKSqZ57-472stKtIqSNPgWwHQdcPezezpfUi6n8d_yk11vHBINuKtxx9ZJi4JqiVxMFB-ae3tkNNiVKPbz4zYDKLllmDXStMHl2-QkZyKqyTvKQcHKddPRvELBoWt5SWfFdW1IyF_GvoFBBrFsWzU1lu5DGFm6XqRvB42pD8jN3E1kjA6I0glrxxtmHWY8R5EVv0qrxWTM35TdWVprv_wICWCYXZSwgIp8e5wIvRp0QkbG9xnb81ctk15D7RWe3GllSMYE5Gv6rWR6T8H-3yB4BfenwzvuZgpKMrhaFvQF0cP_5w4b7mAfh247IDo8c9Mug0MXX2wzAredByW2xXfytpBQkxUhidTYdeNcwjmxIMhgTA4MRN_db2P2UBz6Z4PyN-NNYQ62SkAIzgx4YMp3fzrgO91pTaJ2ZvCTdkl_P_fVpG0jM_5j77GFFNKWWYVBEFyBDC3YydFWWFm9L9l08Cd=w640-h427-no" alt></p><p>本当に大事なのは、<strong>プログラミングを通じて、自分が何を作りたいか</strong> ということです。</p><p>ゲームが作りたいわけではないのに Unity をおすすめするのは適していません。</p><p>スマホ向けアプリを作りたいなら、Java か Swift かを学んでみる、<br>自分が人工知能を作ってみたいなら Python を初めてみる、<br>Web サービスを作ってみたいなら HTML+CSS+JS を学んでみる、など。</p><p>プログラミングは <strong>目的ではなく手段</strong> なのです。<br>プログラミングを始めるにあたって、まず何を作るかを決めるのではなく、<br>言語を選び始める、というのは、僕は適切な手順ではないと思います。<br>言語ありきでプログラミングをしてはいけないと思います。<br>その意味で、僕は「言語なんて何でもいいのだ」と言っているのです。</p><h2 id="自分の作りたいものを形にしていく過程で、思考法を習得していく"><a href="#自分の作りたいものを形にしていく過程で、思考法を習得していく" class="headerlink" title="自分の作りたいものを形にしていく過程で、思考法を習得していく"></a>自分の作りたいものを形にしていく過程で、思考法を習得していく</h2><p>先ほど「プログラミングは目的ではなく手段」だと書きました。<br>これは、プログラミングを学んでいく姿勢にもつながります。</p><p>例えば、変数や関数の概念や構文について、座学のようにネット上の記事を読んで理解したり、<br>ネット上のサンプルコードをコピペして動かしたりしているだけでは、<br><strong>実際に思考法を身に着け、応用していく力には結びつかない</strong>と思っています。</p><p>「プログラミングって何なのか知りたい」という人で、割とそのような人がいるかもしれないのですが、<br>そのような学習方法をとっていると、進捗が生まれないか、あるいは挫折します。<br>また時間が空いて、ちょっとプログラミングしてみよっかなと思ったときに、忘れていたりします。</p><p>そこで、自分の<strong>作りたいものを開発しながら</strong>、プログラミングの基盤となる思考法を習得していく方法が、<br>最も効率の良い方法だと考えています。</p><p>もちろん、最初から壮大なアプリを作るわけではありません。<br>まずクイズアプリや Todo アプリなど、こういうのも作れるのだということを提示して、<br>それを自分なりにカスタマイズしながら製作していくうちに、プログラミングの「勘」がついていくものだと思います。</p><p>実際、僕も様々なアプリを製作していきながら、プログラミングを学んできました。<br>そこで学んだベースとなる考え方は、今も生きていると感じています。</p><h2 id="プログラミングができるというのは、写経して正しく実行できる能力ではない"><a href="#プログラミングができるというのは、写経して正しく実行できる能力ではない" class="headerlink" title="プログラミングができるというのは、写経して正しく実行できる能力ではない"></a>プログラミングができるというのは、写経して正しく実行できる能力ではない</h2><p>さて、少し話題が変わりますが、「プログラミングができる」と名乗っていいのは、<br>どれくらいのレベルの人以上だと思いますか？</p><ol><li>Hello, world! が実行できる</li><li>ネット上のサンプルコードをもとに、簡単なアプリを作れる</li><li>他人のサンプルをカスタマイズして、機能を追加したりできる</li><li>自分でアプリを設計して、中規模程度のアプリを作れる</li><li>有名なデザインパターンを駆使して、可読性やパフォーマンスの高いアプリの開発を目指せる</li><li>自分でアーキテクチャを組み立て、大規模なアプリを開発・運用できる</li><li>それ以上</li></ol><p>人それぞれだと思いますが、僕は <code>3.</code> 以上だと思います。<br><strong>「自分の考えているものを形にするプロセス」がプログラミング</strong>です。<br><code>1.</code> <code>2.</code> にはそのプロセスは含まれていないと思います。</p><p>誰かが書いたコードをコピペするのは誰だってできます。<br>それで正しく動いたとしても、そこには自分のクリエイティビティは入っていません。</p><p>何かを初めて自分の力で作れるようになった時、プログラミングができるようになったと言うのだと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今まで僕は、小学生から大学院生、また社会人など、<br>色々な人とプログラミングをさせていただきました。</p><p>その中でお互いの持っている知識や考えていることを伝え合ったりする機会もありました。</p><p>今回このように友達にプログラミングを本格的に教えるということを通じて、<br>そこで考えていたことを明確にすることができ、</p><p>「教える」ということは本当に自分自身にも学びをもたらすのだと分かりました。</p><p>ご意見・ご感想などありましたら下のコメント欄にお書きください。</p><p>※今回はやけにまじめですね。これで終わります。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ノートパソコンを直した話</title>
      <link href="/2018/08/08/fixed-my-note-pc/"/>
      <url>/2018/08/08/fixed-my-note-pc/</url>
      
        <content type="html"><![CDATA[<p><strong>※今回の記事の内容を実践することは本当に自己責任になります。というか分解しないことをおすすめします。</strong></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">ちなみにPC落としてから突然電源が落ちる問題が発生していたけど分解したら内部でねじが緩んでいたことが発覚しそこをきつくしたらなんと電源が落ちなくなりました。<br><br>つまりノートパソコン直した―――――――やったーーーーーーーーーーー</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1026795556696281090?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月7日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>こんにちは。shundroid です。<br>2年前の夏、ノートパソコンを落としてしまい、<br>そこから<strong>突然電源が落ちる</strong>ようになっていた僕のノートパソコンが、</p><p>この度、なんと、<strong>直りました！</strong><br>今回はその報告です。</p><p>ノートパソコンが壊れた話は前も↓の記事でちょろっとしましたね。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/08/15/serialport-without-vs/" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/14/report-i-bought-my-pc/" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="分解した。"><a href="#分解した。" class="headerlink" title="分解した。"></a>分解した。</h2><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">PC分解できたーー<br><br>落としたのもあって左上のねじ穴が死んでたけど、外側のケースをひねってナットを固定したらねじが外せた。そこが一番難しかった。 <a href="https://t.co/gBQRLNdyPG" target="_blank" rel="noopener">pic.twitter.com/gBQRLNdyPG</a></p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1026735996694454272?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年8月7日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>PC は Sony 製 VAIO の SVE14A3AJ なのですが、<br>裏面のねじをすべて外したら簡単にケースを外すことができました。</p><p>確か分解したら Sony での修理が受けられなくなった気がするので、<br>本当に試すなら自己責任でお願いします。</p><h2 id="分解したままPCを起動したらひらめいた"><a href="#分解したままPCを起動したらひらめいた" class="headerlink" title="分解したままPCを起動したらひらめいた"></a>分解したままPCを起動したらひらめいた</h2><p><img src="https://lh3.googleusercontent.com/5dhIoadZDBsZlroft2R85r80BsVqpPEzvBpEKSf0PaNseAl7EVWNfpStKmlcAAUb6aUDWWDFQgIk2MZfNSLKRCkjpSFsFveyuz1TDpdF62PFl3xApeZC1GOq6qhHDnYQcCW-9t0v_ZkTQ5v-R1yomYOUA5E5bspNEQd94gGnLWEwevhAwdcyeEZ7cOws6cVKsB68tmepKfj4W6x9uo3Z5eUx1Cy0xFfKzCy4BD0fahXgjl3NTnOmu0lsoAtYietqZQRlgkN74qbqzXlOx83voOc9ljWZ3GH5IfJre7IY68xCJtVp0XExYbqqdBiZrR8jphLk55qafYHg8EaNNbl-JF2Q0vBji-BjSrByKoyebkvX1T9OnwQ3-F9QE81t4rOIPEriW5gEqCct760IVkWB4JFHKKlAApKmYLpVSokGsD4rmkGw2QvYga3yNOBMd2xJyF151TcxmieEDXkf3pTRByibwdyj0AiBOZ_HJobVEed6GJcaiw4s7_zIm2QKDJNbQNqz_cUBXp4SD6SCBZ2_Y0JUECE_ZVh93aVwRdj3VREo3zkrSPTaFN0-Fs1i4NxZxTqs2vdb5OxKpG-Phx6yJVkb48tJ0_5xWIMwpqXy5Jy7S-pEoVIi2ToiZ9B5SjB8aslKbqmBICyNVECWInwL9j5714f0d9SylSPPDNEfUwY2I-INHCBNWHra=w1718-h966-no" alt></p><p>この部分が落とした時に一番ダメージを受けたらしく、<br>ケースにも穴が開いていました。</p><p>そこは、分解するときにもナットが空回りしちゃって<br>ねじがなかなか外せない難しいポイントだったのですが、<br>それはいい感じの角度にケースを固定したら外せたのでまあよかったっす。</p><p>そしてこの分解した状態でPCを起動したとき、あることに気づいたのです。</p><p>ーこの部分の形が変形したときに、電源が落ちると。</p><p>どうやらここの部分の２つのねじがゆるんでいたようで、それをきつくしめてあげました。</p><p>そしたらなんと、電源が落ちなくなりましたーーー</p><p>復活です。やったーー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>以上です。<br>まだ電源が落ちなくなってから１日しかたっていないので、<br>また再発するかもしれませんが、今のところいい感じです。</p><p>分解にはリスクも伴いますので、真似しないことをお勧めします。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>先生の名言を画像にして排出するだけの、誰得かわからないLINE BOT を作った話</title>
      <link href="/2018/07/14/line-teacher-bot/"/>
      <url>/2018/07/14/line-teacher-bot/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。<br>期末考査も終わって、一段落したところです。</p><p>何かひと書きしてみたいところだったので、<br>クラスメートみんなで使える、何かを作ってみたいと思いました。</p><p>そこで LINE BOT の開発をしてみることにしました。</p><h2 id="作ったもの「某先生と会話bot」"><a href="#作ったもの「某先生と会話bot」" class="headerlink" title="作ったもの「某先生と会話bot」"></a>作ったもの「某先生と会話bot」</h2><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">bot完成しました。近日中に仕組みをブログに公開します。 <a href="https://t.co/oxhvmIq1fe" target="_blank" rel="noopener">pic.twitter.com/oxhvmIq1fe</a></p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1017964016885424130?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月14日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>「（名前）、○○」と話すと、某先生の写真と文字を合成した画像を返すbotです。<br>特徴はただ一定の画像を返すのでなく、「○○」の内容によって文字が合成されるので、<br>新たに名言が生まれても画像と合成できるようにしていることです。</p><h2 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h2><p>次のようになっています。</p><p><img src="https://lh3.googleusercontent.com/UwtQILPQZAXev82RZIzZ3Oz8zacwiw8Fsyu77PSw5dMSgFjT0wkkwlplbOt929sGDFNER0rDLtUcohDDK23MTlQSlrFF14gJmtSsnSu5VHtm-ltLUGSIBO4MWevje_iBXZK9_4jFfiuLsNtmeuNZIHQ7HjezlbhYporWsEUlZww7MSlMsesYth6-L--8aH52zl0Mp49PK21BKj6d4AZnvXu8CU_lIJEUEz-wIUARip90ZeU1PJNptv57irMpslTLXwPSXqkUCdWZkmHngRfUl5TCvq8onJ2pdgcNGAy1zna7NzbmIIHwB81jACYNIPBhMr79T6k8ANdsTkd93hXIPLzwnxwDTG2uzcS5g-7BootW5jTl6tPuWcN0ylc7GN1F6QMOJne3ndiIIXIkxH7uJlYPmWMxdvlKG3WfKMoUZ84tNBu2r7beFxwSoYJh3s46Ktwo11AN5_yKToWCQ1TJnknpPe83L7vfnEvJ3bG1zAODWQWLqKNgdRKPxOn1Y7qiav09aPrlrDHciMyN8xRWQQQOdyBxYe2utl0EXNR_WYZVgM_Z3TVo2CBg9TftD1U4WuX8wMlYFp0leWUoTpEdAy5phPC2KYWkec2gY0HSiXqK2E_WGE54MUr9WacsjlU=w1073-h303-no" alt></p><h3 id="①②-メッセージ送信"><a href="#①②-メッセージ送信" class="headerlink" title="①② メッセージ送信"></a>①② メッセージ送信</h3><p>LINEユーザーがメッセージを送信します。</p><p>これを bot 側は、Messaging API のメッセージイベントとして受け取ることができます。</p><p>そして、bot 側で登録した Webhook URL に POST リクエストが飛ぶので、<br>それを使って Heroku でデプロイしている node.js アプリケーションにメッセージを送信します。</p><p><img src="https://lh3.googleusercontent.com/GEnuN3Dy8-0JCKzGfS8oaZ0ylqyJacZe45EbwTLVGs5g2sb4HrtiA5JJKJKo_xtLYIHlXXEEf7qz8a52clL4MMXjuxC7lWTedw3hJRkYr5l_ILsoYDxXuXOO9xcdTkYgwoUNcRqgUL3QmvBekYkE1jaROfhgq5RJH7ha0Aoc8zIRQF_V856f8dXAAK1MoAwel0pYmJZk_DOW7j89xTWO3qh3CLv2ZHYnex-6wPmPZNtP913Cr8nRtcelid2vuFYsTFERPVC2L4a5vn4DGca_yNBusjA2sjailKDXwEEBEUPLC4x5eC-utVUS2iU87rPS2jcO3tO5aeMYpVHKY3SPACsw_G84EvrNV344dCRockD7IZ4CoE7_FmEuOPR1kHiy_r04ugOgyUO9EO2u-KUJeDzFgAO93JHNFV9M96uUuf5zsHlg8up8DohWrNMxdSaOZU3uFh90-j0WWfZZy7HLVoslH0hoiNKLNReZD04KPDn_-qHlRVpZZjkevONaDn7tycEjaQMaoLyaMMJCsvf9KXFjJAmGG5XnbtttZDDdu4wOi6tg4-0_Lb6Zz2XS0CY6BtOeJpS-XoRCY569vgufcZgLW0ilcKIcRKcJZdsoTGk4JGGP00n06WMx918gZOA=w537-h85-no" alt></p><p>ここですね。</p><p>node.js のほうとしては、LINE の <a href="https://github.com/line/line-bot-sdk-nodejs" target="_blank" rel="noopener">Node.js SDK</a> を使うと簡単に書くことができます。<br>内容も example の中身を少し変えただけなので、<a href="https://github.com/line/line-bot-sdk-nodejs/tree/master/examples/echo-bot" target="_blank" rel="noopener">そっち</a>を参考にしてもらったほうがよいでしょう。</p><p>Express を使っています。</p><p>ちなみに、ここはどうでもいいかもしれないんですけど、<br>最初は <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a> というのを使おうとしていました。<br>しかし、これだと後ほど出てくる node-canvas をなぜかコンパイルしに行き、失敗するということをするので、</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">now 使おうとしたけど node-canvas をなぜかコンパイルしに行き失敗しちゃうから初めてトンネリングツール使ってみたけどかなり便利</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1017971362927820800?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月14日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p><a href="https://localtunnel.github.io/www/" target="_blank" rel="noopener">localtunnel</a> というトンネリングツールで自分のPCに直接アクセスするようにしました。<br>しかしこれだと自分の PC がついていないとだめなので、Heroku を使うようになった次第です。</p><p>初めて Heroku 使いましたけど、かなり便利ですね。すごい。</p><h3 id="③-メッセージ応答"><a href="#③-メッセージ応答" class="headerlink" title="③ メッセージ応答"></a>③ メッセージ応答</h3><p>画像形式でメッセージを送ります。<br>Messaging API の<a href="https://developers.line.me/ja/reference/messaging-api/#anchor-42120f44e51aa176dd60c34dc3719ff4fccc4b21" target="_blank" rel="noopener">リファレンス</a> を参考にして、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"image"</span>,</span><br><span class="line">  <span class="string">"originalContentUrl"</span>: <span class="string">"https://example.com/original.jpg"</span>,</span><br><span class="line">  <span class="string">"previewImageUrl"</span>: <span class="string">"https://example.com/preview.jpg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こういう形式で作ります。</p><p>ここで気を付けなければならないのは、画像の形式とサイズですね。<br>どちらも<strong>JPEG</strong>でなければなりません。なんと。<br>サイズは originalContentUrl のほうが<strong>1024x1024</strong>まで、<br>previewImageUrl のほうが<strong>240x240</strong>までです。</p><p>ここでの URL は今回は（original…、preview…どちらも）次のようにしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxxxx.herokuapp.com/image/&lt;名言&gt;</span><br></pre></td></tr></table></figure><p>後で URL を参照したとき、名言の文字が入っていないといけないからです。</p><h3 id="④-画像-URL-送信"><a href="#④-画像-URL-送信" class="headerlink" title="④ 画像 URL 送信"></a>④ 画像 URL 送信</h3><p>さっき作ったメッセージを送りますね。<br>これも example と同じなので<a href="https://github.com/line/line-bot-sdk-nodejs/tree/master/examples/echo-bot" target="_blank" rel="noopener">そっち</a>を見てください。</p><h3 id="⑤-画像-URL-参照"><a href="#⑤-画像-URL-参照" class="headerlink" title="⑤ 画像 URL 参照"></a>⑤ 画像 URL 参照</h3><p>bot 側が URL を参照してきます。ここで初めて画像の合成をするようにしています。</p><p>先ほど名言は URL に含まれていたので、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/image/:text'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>というようにパラメーターで指定しておきます。<br><code>:text</code> には <code>req.params.text</code> としてアクセスできます。</p><h3 id="⑥-画像合成・⑦⑧-画像送信"><a href="#⑥-画像合成・⑦⑧-画像送信" class="headerlink" title="⑥ 画像合成・⑦⑧ 画像送信"></a>⑥ 画像合成・⑦⑧ 画像送信</h3><p>HTML5 Canvas みたいな感じで合成出来たら手軽だと思ったので、<br><a href="https://github.com/Automattic/node-canvas" target="_blank" rel="noopener">node-canvas</a> というものを使いました。</p><p>使い勝手はほんとに HTML5 Canvas そっくりです。すごい。</p><p>はまりかけたところはまずフォントですね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; registerFont, createCanvas &#125; = <span class="built_in">require</span>(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> ctx = createCanvas(<span class="number">100</span>, <span class="number">100</span>).getContext(<span class="string">'2d'</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">registerFont(<span class="string">'&lt;フォントファイル&gt;.ttf'</span>, &#123; <span class="attr">family</span>: <span class="string">'&lt;フォント名&gt;'</span> &#125;)</span><br><span class="line">ctx.font = <span class="string">'17px &lt;フォント名&gt;'</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>このような感じで使えます。</p><p>あと、JPEG 画像として返すところですね。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createCanvas &#125; = <span class="built_in">require</span>(<span class="string">'canvas'</span>)</span><br><span class="line"><span class="keyword">const</span> canvas = createCanvas(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">app.get(<span class="string">'xxx'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  canvas.createJPEGStream(&#123; <span class="attr">quality</span>: <span class="number">100</span> &#125;).pipe(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>こんな感じですね。createJPEGStream で Stream を作ったのを<br>pipe して res に渡すだけでおｋでした。</p><p>Express こんな方法にも対応しているのですね。さすがー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本当に誰得かわかりませんが面白いものができました。</p><p>でもこういうものを通じて、今回は express、LINE bot の作り方、<br>Heroku、now、localtunnel、node-canvas など、様々なものについて学べました。</p><p>そして bot 作り自体はそこまで難しくなさそうですね。<br>これなら、身近な LINE ですし、プログラミングの入門としてもいいかもしれません。</p><p>今度部活のみんなでbot作ろう会をやってみよっかな。</p>]]></content>
      
      
      
        <tags>
            
            <tag> javascript, nodejs, line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ガロア理論ジェネレータを作った</title>
      <link href="/2018/06/03/galois-gen/"/>
      <url>/2018/06/03/galois-gen/</url>
      
        <content type="html"><![CDATA[<p><em>Dear Mr. Tomohide Suzuki</em></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr"><a href="https://t.co/rXsQJEGyF7" target="_blank" rel="noopener">https://t.co/rXsQJEGyF7</a><br><br>できた！！！！</p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002877350265012224?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>こんにちは。お久しぶりです。shundroid です。<br>高校生になりました。</p><p>いやー忙しい。最近もテストがありましたが、<br>テスト範囲が広すぎて本当に大変でしたー。</p><p>そこで疲れを癒やしたいのもあり、１つサービスを作ってみました。<br>ガロア理論ジェネレーターです。</p><p><a href="https://galois-gen.netlify.com/" target="_blank" rel="noopener">https://galois-gen.netlify.com/</a></p><p>製作期間は２日です。<br>今回はどうやって作ったかなどを紹介したいと思います。</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">これを入れておいたから許していただけるだろう <a href="https://t.co/ytq0QWOQCR" target="_blank" rel="noopener">pic.twitter.com/ytq0QWOQCR</a></p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002737176591794176?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p><a href="https://github.com/shundroid/galois-gen" target="_blank" rel="noopener">https://github.com/shundroid/galois-gen</a></p><p>Github に上げておきました。参考にしてみてください</p><h2 id="基本構造"><a href="#基本構造" class="headerlink" title="基本構造"></a>基本構造</h2><p>スマートフォンやPCなど、多くのデバイスで動作させたいため、<br>Web アプリとして制作しました。</p><p>MVVM であり、<a href="https://jp.vuejs.org/" target="_blank" rel="noopener">Vue.js</a> で書いていますね。<br>いやーほんとに Vue はシンプルで素晴らしい。</p><p>仕組みとしては、既存の表紙の画像の上に、<br>文字を HTML 要素としてのっけてって、<br>エクスポートするときに <a href="https://html2canvas.hertzen.com/" target="_blank" rel="noopener">html2canvas</a> を使って画像にするようにしています。</p><p>UI は <a href="https://vuetifyjs.com/ja/" target="_blank" rel="noopener">Vuetify</a> で作りました。</p><h2 id="苦労したところ"><a href="#苦労したところ" class="headerlink" title="苦労したところ"></a>苦労したところ</h2><h3 id="レスポンシブルデザイン"><a href="#レスポンシブルデザイン" class="headerlink" title="レスポンシブルデザイン"></a>レスポンシブルデザイン</h3><p>スマートフォンでもPCでも動くようにしたかったので、<br>避けては通れぬ壁でした。</p><p><img src="https://farm2.staticflickr.com/1725/40717252540_6ff959e6e8_o_d.gif" alt></p><p>表紙の画像のサイズが可変なので、それに合わせて文字などを<br>相対的な座標で表す必要がありました。<br>em とか % とか使っていますね。</p><p><img src="https://farm2.staticflickr.com/1727/41802654054_aedac85cc2_o_d.png" alt></p><p>margin で em を使う日が来るなんて思いもしなかったですね。</p><p>ちなみに em は親要素の font-size に応じて自由にサイズ調整ができるので便利ですよ<br>これはサイズを要素間の比率を維持したまま一括変更したいときに、font-size を変えるだけでいいので<br>非常に便利です。ここの話は聞き流してもらっても構いませんでした。はい。</p><h3 id="html2canvas-のバグ"><a href="#html2canvas-のバグ" class="headerlink" title="html2canvas のバグ"></a>html2canvas のバグ</h3><p>HTML の要素として作られた冊子を画像に変換するときに、<br>このライブラリを使うんですけど、マジこれバグありすぎー</p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">縦書き死亡 <a href="https://twitter.com/hashtag/html2canvas?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#html2canvas</a> <a href="https://t.co/6aJjlB1Yfk" target="_blank" rel="noopener">pic.twitter.com/6aJjlB1Yfk</a></p>&mdash; shundroid (@shundroid_k) <a href="https://twitter.com/shundroid_k/status/1002863670982918144?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年6月2日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>writing-mode で縦書き指定してたら作者名が死にました。</p><p>そのせいで縦書きにするのに苦労しなければならなくなりました。</p><h3 id="作者（日本語）"><a href="#作者（日本語）" class="headerlink" title="作者（日本語）"></a>作者（日本語）</h3><p><img src="https://lh3.googleusercontent.com/TzWNseX1biEXeqSUri4tmHDAChPCdHDlueiX4JMq8vWwyGqvKyG8RjjKAFIONaGDinspH8-keoDWz2PUEPsl8_d3dv3zmRf1-7IecHe04sh8bakDOIl1rCUgkLSl8hndQWufKS8xeGdRuaOHWTyMf7KPvAxnICKc6nXD6p9_lkEZB5xagEAMOM2DsrF7iHtRZAfPEdVhGSulngHYSEMBJ7EuaYSGfP5Y7EuEUQ-ih8qYeg-v9kwDXT-Zs6uLgtSewQF9DT1MkxMdCt321hFc18queFEjowNMfEaO1nsPNfNIYo0ole0inQrFcZXopA2-1X5K40yq2LES2PD74cpsSxun3rNiNc8xtJT8ZtfD9ow7WLIOGkRdCSfFMGXVSQ2jlJnv-VDHdQ0f45TOqylnZomaagj5luERgSwfmBGCEo1m3Deps6ctuDa36GNFPvixm6EOIQkrfV05GsaFpN9Z46kf3Xqjz2KqXg9UOYDsY2l589JMDBXYrWg6yxiydQDzcJ9bZXu8YLlaBm-MCm-U69uya7fAcwmRdwRaPywvjOAhL11_xJ7VP72fQzbs2l1PptIcrEGQ1p32nLtaYzG6MyQuM78pJ5o76iBlQuM=w473-h16-no" alt></p><p>これはもう１文字ごとに <code>&lt;br /&gt;</code> を打ち込むようにしました。<br>仕方がないですね。お許しください。<br>字間は line-height で調整ー</p><h3 id="作者（英語）"><a href="#作者（英語）" class="headerlink" title="作者（英語）"></a>作者（英語）</h3><p>英語はなんと、<strong>文字を回します</strong></p><p><img src="https://lh3.googleusercontent.com/AJnVEFyftBo_bGwf5pJyvPNb9MllnFySLdgu2RdDOEQcgkKBYrTrrrG0n1Z8ES4tJEohzAmbyixMwqs1v3EyNwFwGAz_ZsqRMtk97-_258IdbwGz3h5vTrju60DdqYz6tZzeXJHXrIXeVvuI_ChFWhy-Sindn86pFho9sgSX4AjF7Fra-TO_yk-z-39-15oZMXtc3euH5GZM59k6Q7T0f32ju3T1o7yua31oC5QNk1e8AEItnB12C4JSg9hJAcpMPDUOeymXN3ToJoB-1VumRClZUlyaHz2bgdwk6UW6hCItomu47PbK3CZHLFFwAiPUYt4wKPzhpkoX9VdIfhH1O6Yb5QHVlZfin8ifHHEZnN5JlJcn52IGUUGNZ5RyHVdyhvvY_Ir4ixZyQ47ZdZA6FHYrexF0UeMCd7PoyIFZBPtxxgCyEycH0G2DX7UvvJj3J1gHWTu7EFv6cO8oF_8dw0y8AFQKoN8MYBsxZ0CZz2ImH1OFA11f6Abf9p1GZErQhKDqR8haONmfXY7v0mwNIWhY5Zf-g-lyf7OH5dHW5lUGVDDXK-BgLuLCVsuo7L7kj0bp-dTNikEOdtdDU15a1xe8aS-QDW874It25qM=w87-h276-no" alt></p><p>あーこれ writing-mode つかえないとか<br>transform 使わなきゃいけない感じじゃねーと察しますよね。</p><p>そうなんです。使うんです。</p><p><img src="https://lh3.googleusercontent.com/tILl96040Ut24MNi0T5RbGGpel7--12LSMM529bftxuFFpQsUXykILLCh2YIutvQqFQsCSTHfMZ2vHy5Dwo2frQwJzdG1nyjcWFMDVw4LZGCTR52nZgsGO5gAsvfBYwN7_FhsivRpPdAPQ41t8JmdiGklsRfYD_xY0NTyfAB9Ywxb6FdTFIvYmbNS7QGnB4jbdirBfS1zbaGEiytdHKmxxcgoVLHogDpPI6jWqkZfJ5Y1LnUQ4XbN2YJm9F5VytzUAJcWmHA5_F5uP17dbrkQPYDhZh5MNFtRRn_CwoyWBSfSlA1wIhyaSlO0YcBfiuLDLfZqM83IfMEIoNewjllrKA9DhvqWUb4o3-8iSKVzqOUS54acV-SIN3MjEZVY6PEm4znLBGfxW0daXiKL5V5NUJpOHVtXr9XwwUrHI-BdpbmqUEHjE8IWmYFSTi5H1ddL0-ufx1thnnMocYEU9jC8NLpPKfK8mITDwXktiGMSYujXEWgy1DLZzLSw4mLqbroS07rwNoDpLcMCL8cfsowD4loSWNzS0nb1tlNLGIc4bgvGlvWgtn5sNoY_mWQga7yW3loxBl7XC-NAVdL9cx8hGFRS2_NL4G2hZKK8m4=w263-h54-no" alt></p><p>回しました。<br>最初は pivot がおかしくなりそうで苦労していましたが、<br>調べてみたら transform-origin とかいう神プロパティがあるそうで</p><p>それで意外とかんたんにできましたー。やったー</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>皆さんガロア理論の本おすすめです。</p><p><a href="https://amzn.to/2LUYNHh" target="_blank" rel="noopener">https://amzn.to/2LUYNHh</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo で検索結果を表示するページを生成するプラグインを作った。</title>
      <link href="/2018/02/07/hexo-search-result/"/>
      <url>/2018/02/07/hexo-search-result/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。お久しぶりです。</p><p>今回は新しく作った Hexo のプラグインについて、<br>仕組みや工夫したところなどを書きたいと思います。</p><h2 id="追記：2018-02-08"><a href="#追記：2018-02-08" class="headerlink" title="追記：2018/02/08"></a>追記：2018/02/08</h2><p>client 側の工夫したところが消えましたｗ<br>多分 vscode-vim で insert モードを解除せずに消しちゃったからかな<br>とりあえず大まかには書いておきました。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p><a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> で生成された search.xml を使って、<br>検索結果を表示するページを作成します。</p><p>このブログでも使用しています。<br>サイドバーの検索ボックスで検索すると、このプラグインで生成されたページが表示されます。</p><h2 id="リポジトリ"><a href="#リポジトリ" class="headerlink" title="リポジトリ"></a>リポジトリ</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/shundroid/hexo-search-result" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search</span><br></pre></td></tr></table></figure><p>続きは<a href="https://github.com/shundroid/hexo-search-result" target="_blank" rel="noopener">上のリポジトリのREADME.md</a>に書いてあります。</p><h2 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h2><p>空のページを作成し、そこに <code>{% search_result %}</code> と書くことで、<br>ページが表示されるようにしています。<br>このタグが読み込まれると、そこに <code>&lt;div&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code> が<br>挿入されるようになっています。</p><h3 id="Hexo-側"><a href="#Hexo-側" class="headerlink" title="Hexo 側"></a>Hexo 側</h3><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'hexo-fs'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSearchResult</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.all([fs.readFile(path.join(__dirname, <span class="string">'./client.js'</span>)),</span><br><span class="line">    fs.readFile(path.join(__dirname, <span class="string">'./style.css'</span>))]).then(<span class="function"><span class="params">contents</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;div id="plugin-search-result"&gt;&lt;/div&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;script&gt;'</span> + contents[<span class="number">0</span>] + <span class="string">'&lt;/script&gt;'</span> +</span><br><span class="line">      <span class="string">'&lt;style&gt;'</span> + contents[<span class="number">1</span>] + <span class="string">'&lt;/style&gt;'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register(<span class="string">'search_result'</span>, insertSearchResult, &#123;</span><br><span class="line">  <span class="keyword">async</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>script、style の読み込みは、webpack などをつかってもよかったのですが、　<br>今回は小規模に作りたかったので、単純にファイル読み込み＋inline 出力で実装しました。</p><p>この時、タグの中身に非同期プロセスを含みますので、<br><code>tag.register</code> には引数で <code>{ async: true }</code> を渡しています。<br>また、fs は代わりに <a href="https://github.com/hexojs/hexo-fs" target="_blank" rel="noopener">hexo-fs</a> を利用して、それが <a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> を返してくれています。<br>2ファイル読んでいるので、<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Promise/all" target="_blank" rel="noopener">Promise.all</a> を使用して並立にしています。</p><h3 id="ブラウザ側"><a href="#ブラウザ側" class="headerlink" title="ブラウザ側"></a>ブラウザ側</h3><p>ここで読み込んでいる script は、ブラウザ側で動作しますね。<br>そちらも見てみましょう。</p><p>流れは、</p><ol><li>hexo-generator-search で生成された search.xml を xhr で読み込む</li><li>そこから検索</li><li>検索結果を dom として生成</li></ol><p>という感じです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>このような感じでプラグインを作りました。<br>よろしければ使ってみてください。<br>バグ・機能要望などは <a href="https://github.com/shundroid/hexo-search-result/issues" target="_blank" rel="noopener">Github Issues</a> へ。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spacechem】Sync-3 何回かに１回</title>
      <link href="/2018/01/04/spacechem-sync-3/"/>
      <url>/2018/01/04/spacechem-sync-3/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の３つ目です。</p><p>今回は Sync コマンドの応用の使用法の１つである、</p><p><strong>何回かに１回</strong></p><p>について説明しようと思います。</p><p>具体的には、</p><p>１つのウォルドが何回か実行するたびに、<br>もう１つのウォルドが１回処理する</p><p>というのを繰り返すことです。</p><h2 id="例：-ヘーパイストスIV-KOHCTPYKTOP"><a href="#例：-ヘーパイストスIV-KOHCTPYKTOP" class="headerlink" title="例： ヘーパイストスIV KOHCTPYKTOP"></a>例： ヘーパイストスIV KOHCTPYKTOP</h2><p>例として、ヘーパイストスIV のサイドストーリー、<br>KOHCTPYKTOP の、ケイ素の分子を作り出すところを見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4599/24624685777_5bc4763e5b_o_d.gif" alt></p><p>めちゃくちゃ長い処理になってしまったので、<br>早送りしていますが、</p><p>赤のウォルドで２回輪の形をしたケイ素の分子を作った後、<br>青のウォルドで１回３×３の正方形を作っています。</p><p>ここでは、「２回に１回」という仕組みが使われています。<br>どのような仕組みになっているのでしょうか。</p><p><img src="https://farm5.staticflickr.com/4593/25621590808_81ec3c9a12_o_d.png" alt></p><p>このように、赤のウォルドに sync が２つあるのに対し、<br>青のウォルドに sync が４つあるので、<br>赤が２回回らないと、青が１回回らない、<br>つまり「２回に１回」が実現しています。</p><p><img src="https://farm5.staticflickr.com/4730/39491358761_9f5e8448fd_o_d.gif" alt><br>↑単純化してみました。</p><p><img src="https://farm5.staticflickr.com/4601/39491359011_707e89184f_z_d.jpg" alt><br>横が時間軸、赤と青が処理するウォルドを表しています。</p><h2 id="Sync-の数"><a href="#Sync-の数" class="headerlink" title="Sync の数"></a>Sync の数</h2><p>公式っぽくすると、</p><p><strong>赤がn回処理した後、青が1回処理する場合、</strong><br><strong>赤に sync を２つ、青に sync を 2n 個つける</strong></p><p>と、３回に１回、４回に１回、…でもできます。</p><h3 id="「交互に実行」も同じ"><a href="#「交互に実行」も同じ" class="headerlink" title="「交互に実行」も同じ"></a>「交互に実行」も同じ</h3><p>前回の<a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-2/">交互に実行</a>も、<br>今回の公式っぽいのを使えば、「１回に１回」として sync の数がわかります。</p><h2 id="何回かに１回、同時に処理を実行"><a href="#何回かに１回、同時に処理を実行" class="headerlink" title="何回かに１回、同時に処理を実行"></a>何回かに１回、同時に処理を実行</h2><p>こっちのほうが言葉通りな気もします。</p><p>何回かに１回、同時に実行します。</p><p><img src="https://farm5.staticflickr.com/4683/24624690747_b618d5ecf5_o_d.gif" alt></p><p><img src="https://farm5.staticflickr.com/4647/24624691107_2e601248dd_o_d.png" alt><br>２回目で重なって実行されます。</p><p>この２つ、何が違うのでしょうか。</p><h2 id="Sync-の位置が大事"><a href="#Sync-の位置が大事" class="headerlink" title="Sync の位置が大事"></a>Sync の位置が大事</h2><p>実は Sync の位置がとても重要になっています。<br>Sync の位置により、この２つの動作が変わってきます。</p><h3 id="１回処理するウォルドのどちらかに奇数個の-Sync-がある場合"><a href="#１回処理するウォルドのどちらかに奇数個の-Sync-がある場合" class="headerlink" title="１回処理するウォルドのどちらかに奇数個の Sync がある場合"></a>１回処理するウォルドのどちらかに奇数個の Sync がある場合</h3><p>この例でいえば青のウォルドの上下左右どれかに、奇数個の Sync があれば、<br>何回かに１回、別々に実行する、<br>先に書いたほうの動きをします。</p><h3 id="１回処理するウォルドのどちらかに偶数個の-Sync-がある場合"><a href="#１回処理するウォルドのどちらかに偶数個の-Sync-がある場合" class="headerlink" title="１回処理するウォルドのどちらかに偶数個の Sync がある場合"></a>１回処理するウォルドのどちらかに偶数個の Sync がある場合</h3><p>この例でいえば青のウォルドの上下左右どれかに、偶数個の Sync があれば、<br>何回かに１回、同時に実行する、<br>後に書いたほうの動きをします。</p><h3 id="左右にある-Sync-の数によって、タイミングが変わる"><a href="#左右にある-Sync-の数によって、タイミングが変わる" class="headerlink" title="左右にある Sync の数によって、タイミングが変わる"></a>左右にある Sync の数によって、タイミングが変わる</h3><p>次のような動きをするにはどうすればよいでしょう。<br>赤１回、青１回、赤１回、を繰り返します。<br><img src="https://farm5.staticflickr.com/4592/39491358871_f58233136b_z_d.jpg" alt></p><p>赤と青が同時に処理しないので、先に述べた方法で、<br>奇数個の sync が青の両側にあります。</p><p><img src="https://farm5.staticflickr.com/4636/24624691367_2a3ccb1529_o_d.gif" alt></p><p>そして、その sync の配分を替えると、タイミングが変わります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こんな感じで、Sync を使えば、様々な処理を自在にできます。<br>かなり奥深いです。ぜひ実践してみてください！</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Spacechem-Tips </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
            <tag> spacechem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wercker を使って Hexo の deploy を自動化する</title>
      <link href="/2018/01/04/automatically-deploy-wercker/"/>
      <url>/2018/01/04/automatically-deploy-wercker/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。</p><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> にブログを移行しましたが、<br>一回一回記事を上げるごとに、<code>git commit</code> して <code>hexo deploy</code> するのは<br>めんどくさいですよね。</p><p>そこで、今回は <a href="https://www.wercker.com/" target="_blank" rel="noopener">wercker</a> を使って git commit されると自動で<br>デプロイしてくれるようにします。</p><h2 id="目指す運営形態"><a href="#目指す運営形態" class="headerlink" title="目指す運営形態"></a>目指す運営形態</h2><p><img src="https://farm5.staticflickr.com/4635/24621049717_501df4a1cc_z_d.jpg" alt></p><p>上のような形を目指し、今回 Wercker に関するところを作っていきます。</p><p>間に通しすぎじゃないか！？と言われるかもしれませんが、それぞれ意味があります。</p><ul><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a>: ブログ全体の非公開リポジトリ。</li><li><strong><a href="https://wwwwercker.com/" target="_blank" rel="noopener">Wercker</a>: Bitbucket の更新をチェックし、自動で Github にデプロイ</strong>←今回作ります</li><li><a href="https://github.com" target="_blank" rel="noopener">Github</a>: 生成されたサイトのリポジトリ。</li><li><a href="https://netlify.com" target="_blank" rel="noopener">Netlify</a>: Github の更新をチェックし、サイトをホスト。</li></ul><p>Github がいらなそうですが、<br>ぼくはこのサイトを、パスワードなどを含めない部分はオープンソースにして、<br>構造などを公開したいと思っているので、いります！</p><p>Netlify じゃなくて <a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> でもよさそうですが、<br>性能が Netlify のほうがいいので、そっちを使っています。</p><h2 id="wercker-yml-を作成"><a href="#wercker-yml-を作成" class="headerlink" title="wercker.yml を作成"></a>wercker.yml を作成</h2><p>プロジェクトのルートディレクトリに、<br>wercker.yml を次のような内容で作成します。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">box:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm-install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">echo</span> <span class="string">nodejs</span> <span class="string">information</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"node version $(node -v) running"</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"npm version $(npm -v) running"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">configure</span> <span class="string">git</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&lt;Github</span> <span class="string">メールアドレス&gt;</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&lt;Github</span> <span class="string">ユーザー名&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install</span> <span class="string">theme</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/shundroid/hexo-theme-chan.git</span> <span class="string">themes/chan/</span> <span class="string">--depth=1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">install</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">script:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">deploy</span> <span class="string">to</span> <span class="string">github</span></span><br><span class="line">        <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">          <span class="string">hexo</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></p><p>build のほうはデフォルトから変えていません。（デフォルトはあとで登場します）<br>deploy 側が独自です。ここには僕がハマった経験がたくさん詰まっています。</p><h3 id="テーマの-clone-を忘れずに！"><a href="#テーマの-clone-を忘れずに！" class="headerlink" title="テーマの clone を忘れずに！"></a>テーマの clone を忘れずに！</h3><p>deploy 内で、install theme していますね。<br>これなのですが、テーマをクローンし忘れると、<br><code>WARN No layout: xxx</code> というエラーが出まくり、<br>空のブログが作成されますw</p><p>ちなみに、 <code>--depth=1</code> を入れると、深く log を取らないので、<br>パフォーマンスの改善になります。</p><p>ご自分のテーマに合わせて、クローン元・クローン先を変更してください。</p><h3 id="hexo-はグローバルインストールしなければならなかった"><a href="#hexo-はグローバルインストールしなければならなかった" class="headerlink" title="hexo はグローバルインストールしなければならなかった"></a>hexo はグローバルインストールしなければならなかった</h3><p>プロジェクトにインストールされている hexo を、<br><code>./node_modules/.bin/hexo</code> として実行しようとしましたが、全く反応しなかったです。<br>npm scripts にコマンドを追加してもやってみましたが、同様でした。<br>仕方なくグローバルインストールしました。</p><h2 id="Github-から-Personal-Token-を取得"><a href="#Github-から-Personal-Token-を取得" class="headerlink" title="Github から Personal Token を取得"></a>Github から Personal Token を取得</h2><p><a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">https://github.com/settings/tokens/new</a></p><p>↑にアクセスして、Token を作成します。<br>チェックは、public_repo にのみ入れてください。<br>トークンができたら、暗記してください（大嘘）</p><p>というか暗記できるくらいの記憶力が欲しいよ――</p><h2 id="チェック：プロジェクトは非公開になっていますか？"><a href="#チェック：プロジェクトは非公開になっていますか？" class="headerlink" title="チェック：プロジェクトは非公開になっていますか？"></a>チェック：プロジェクトは非公開になっていますか？</h2><p>これから、プロジェクトにトークンを書き込みますが、<br>この時、プロジェクトが公開されていると、かなりセキュリティ的に危険です。<br>非公開にしましょう。※ブログを非公開にするのではありません</p><p>Github は学生でなければ非公開リポジトリは作れませんが、<br>Bitbucket は<a href="https://asterisks.netlify.com/2016/02/16/git-private-bitbucket/">無料で作れます</a>。ぼくは Bitbucket を使っています。</p><p>また、プロジェクトを公開しなければならない場合は、<br>Wercker 側にトークンを非公開で設定し、それを使うという方法もあるそうです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://yuukichi.hatenablog.com/entry/2014/08/16/Hexo%2BGithub%2BWercker%E3%81%A7%E3%83%96%E3%83%AD%E3%82%B0%E6%A7%8B%E7%AF%89" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="config-yml-を変更"><a href="#config-yml-を変更" class="headerlink" title="_config.yml を変更"></a>_config.yml を変更</h2><p>プロジェクトのルートディレクトリにある、_config.yml を変更します。</p><p>deploy のところですね。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://先ほどのトークン@github.com/ユーザー名/リポジトリ.git</span></span><br></pre></td></tr></table></figure><h2 id="Wercker-で-Application-を登録"><a href="#Wercker-で-Application-を登録" class="headerlink" title="Wercker で Application を登録"></a>Wercker で Application を登録</h2><p><a href="http://www.wercker.com/" target="_blank" rel="noopener">http://www.wercker.com/</a></p><p>↑にアクセスして、Sign up しておいてください。</p><h3 id="Git-connections-を設定"><a href="#Git-connections-を設定" class="headerlink" title="Git connections を設定"></a>Git connections を設定</h3><p><a href="https://app.wercker.com/profile/connections" target="_blank" rel="noopener">https://app.wercker.com/profile/connections</a></p><p>ここにアクセスして、プロジェクトが使っているリモートのサービスとリンクしましょう。<br>ぼくは Bitbucket なので、Bitbucket とリンクしました。</p><h3 id="Application-を作成"><a href="#Application-を作成" class="headerlink" title="Application を作成"></a>Application を作成</h3><p><a href="https://app.wercker.com/applications/create" target="_blank" rel="noopener">https://app.wercker.com/applications/create</a></p><p>ここにアクセスして、アプリを作りましょう。<br>といっても超シンプルです。</p><p><img src="https://farm5.staticflickr.com/4730/27712999959_dcd673bd0a_z_d.jpg" alt></p><p>まず SCM を選びます。これはプロジェクトが使っているやつですね。<br>ぼくは Bitbucket なのでそれを選びました。<br>選んだら Next</p><p><img src="https://farm5.staticflickr.com/4636/24622953277_97c4afdca5_z_d.jpg" alt><br>リポジトリを選びます。これはそのプロジェクト自体ですね。<br>選んだら Next</p><p><img src="https://farm5.staticflickr.com/4690/24622954397_a245b5079b_z_d.jpg" alt><br>その次は deploy key に関するやつですが、recommended でいいので Next</p><p>その次は公開したいなら Make my app public ですが、<br>どっちでもいいです。</p><p><img src="https://farm5.staticflickr.com/4639/39458968172_e3a1a4b027_z_d.jpg" alt><br>これで完了です。<br>色々出ていますが、すでに wercker.yml は作っているので気にしなくていいです。</p><h3 id="Workflow-の設定"><a href="#Workflow-の設定" class="headerlink" title="Workflow の設定"></a>Workflow の設定</h3><p>あと少し！</p><p><img src="https://farm5.staticflickr.com/4681/38780826214_2977ef6400_z_d.jpg" alt><br>上のほうのタブの「Workflows」を押します。</p><p><img src="https://farm5.staticflickr.com/4601/38780827854_30ef8c496b_z_d.jpg" alt><br>「Add new pipeline」します。</p><p><img src="https://farm5.staticflickr.com/4599/39489549651_1e10f837f0_z_d.jpg" alt><br>写真のように、Name も YML Pipeline name も deploy でお願いします。<br>Create を押します。</p><p><img src="https://farm5.staticflickr.com/4681/38780826214_2977ef6400_z_d.jpg" alt><br>色々出るので、もう一度 Workflows を押します。</p><p><img src="https://farm5.staticflickr.com/4595/24623007457_cf7630a9aa_m_d.jpg" alt><br>Editor の + を押して、<br>Execute Pipeline を deploy にして、Add しましょう。</p><p>これで、build 後に deploy が走るようになりました。</p><h2 id="commit-amp-push-する"><a href="#commit-amp-push-する" class="headerlink" title="commit &amp; push する"></a>commit &amp; push する</h2><p>さて、これでコミットしてプッシュしたら、<br>deploy されるはずですね。</p><p>ローカルで、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">&lt;wercker.ymlが追加されていることを確認&gt;</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"added wercker.yml"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>ブランチ名、リモート名は自分の環境に合わせ変えてください。<br>コミット名は何でもいいですよ。</p><h2 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h2><p><img src="https://farm5.staticflickr.com/4681/25619668058_872b259928_z_d.jpg" alt><br>こんな感じで build、deploy ともに成功すれば多分おｋです。</p><p><img src="https://farm5.staticflickr.com/4687/25619626518_4335bee8f5_z_d.jpg" alt><br>Github のほうにも push されていることを確認しましょう。</p><h3 id="できていなかったら・・・"><a href="#できていなかったら・・・" class="headerlink" title="できていなかったら・・・"></a>できていなかったら・・・</h3><p>ぼくがハマったポイントを改めて書いておきます。</p><ul><li>テーマはあっていますか（wercker.yml）</li><li>Token は正しいですか（_config.yml）</li><li>git config の設定はできていますか（wercker.yml）</li><li>Pipeline の設定は正しいですか</li></ul><h2 id="今後：Wercker-の良さを最大限活かす"><a href="#今後：Wercker-の良さを最大限活かす" class="headerlink" title="今後：Wercker の良さを最大限活かす"></a>今後：Wercker の良さを最大限活かす</h2><p>さて、これで自動 deploy ができました。<br>しかし、まだ改善点はあります。</p><p>hexo を毎回グローバルインストールするのもあれなんで、<br>すでに hexo が入った box を使いたいですね。</p><p>wercker らしい感じもします。</p><p>やろうと思いましたが、ちょっと疲れちゃって挫折しました。<br>とりあえず現状で動くので、将来的に直します。</p>]]></content>
      
      
      <categories>
          
          <category> Blog Management </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> wercker </tag>
            
            <tag> ci </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ブログ移転しました！</title>
      <link href="/2018/01/03/moved-blog/"/>
      <url>/2018/01/03/moved-blog/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>あけましておめでとうございます。今年もよろしくお願いします。</p><p><img src="https://farm5.staticflickr.com/4598/38755022294_89ab7bb022_o_d.png" alt></p><p>さて、ブログを WordPress から <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> に移転しました！<br>ここではブログ移転の経緯などを説明していきたいと思います。</p><h2 id="今までメールアドレスで購読していただいた方"><a href="#今までメールアドレスで購読していただいた方" class="headerlink" title="今までメールアドレスで購読していただいた方"></a>今までメールアドレスで購読していただいた方</h2><p>いつもありがとうございます。<br>Hexo ではデフォルトでメールアドレスによる購読ができません。</p><p>今後プラグインを使い、対応させていくかもしれませんが、<br>それまで、前のサイトでも使っていた、<br><a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a> などの RSS リーダーによる購読をよろしくお願いします。</p><p><a data-flickr-embed="true" data-header="true" data-footer="true" href="http://www.flickr.com/photos/126344033@N06/25591704648" title="asterisks-feed" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4640/25591704648_47d880f8c0_z.jpg" alt="asterisks-feed" class="alignnone"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><h2 id="移行の背景"><a href="#移行の背景" class="headerlink" title="移行の背景"></a>移行の背景</h2><h3 id="重かった"><a href="#重かった" class="headerlink" title="重かった"></a>重かった</h3><p>WordPress は、ページを表示する際、動的にサーバー側でいろいろするので、重いんです。<br>それに対し、このサイトでは、すでにある Web ページをただ単に表示しているだけなので、処理が少なく、軽いんです。</p><h3 id="自分の専門分野"><a href="#自分の専門分野" class="headerlink" title="自分の専門分野"></a>自分の専門分野</h3><p>WordPress は、プラグインの作成やテーマの編集に、php を使っていました。<br>Hexo では、すべて自分の専門分野である JavaScript で開発できるので、すごく楽なんです。</p><p>もうすでに１つ独自プラグインを使用しており、テーマも自分好みにがりがり改造しています。<br>それについても記事を上げたいと思います。</p><h3 id="URL-が単純に"><a href="#URL-が単純に" class="headerlink" title="URL が単純に"></a>URL が単純に</h3><p>今まで <code>polaris-bear.lolipop.jp</code> と、謎のドメイン名でしたね。<br>これは、母のサイトのドメインを使って、僕のブログをやっていたので、<br>こういう名前になってしまっています。<br>しかも lolipop って打ちにくいですよねｗ右手の薬指と小指がｗｗ</p><p>今回は URL が単純になります。ご安心ください。</p><h3 id="セキュリティが万全"><a href="#セキュリティが万全" class="headerlink" title="セキュリティが万全"></a>セキュリティが万全</h3><p>サーバーサイドで記事を追加したり削除したりできないので、<br>不正ログインなどの概念が（Github を除けば）なくなります。</p><h3 id="無料"><a href="#無料" class="headerlink" title="無料"></a>無料</h3><p>実はサイトの運営には一切お金がかかっておりません。<br>詳しくは、↓で書きたいと思います。</p><h2 id="このサイトの仕組み"><a href="#このサイトの仕組み" class="headerlink" title="このサイトの仕組み"></a>このサイトの仕組み</h2><p>何度か書いていますが、このサイトは <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> を利用して作られています。<br>Hexo とは、静的サイトジェネレーターで、<br>記事やテーマ、プラグインなどをもとに、静的なサイトを自動生成するものです。</p><p>その生成されたサイトが、<a href="https://github.com/shundroid/asterisks" target="_blank" rel="noopener">Github のレポジトリ</a>に送られ、<br>それが <a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a> によってホスティングされています。</p><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a> のレポジトリを直接ホストする、<a href="https://pages.github.com/" target="_blank" rel="noopener">Github Pages</a> もありますが、<br>Netlify はよりパフォーマンスが良く、リポジトリをそのまま使えるので、使用しています。</p><p>Hexo による生成の処理は、ローカルで行っています。</p><p>Netlify の CI で自動生成もできるらしいのですが、タイムアウトがあるらしく、<br>15分以内にビルド＆デプロイできないと、強制停止されてしまうそうです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://photo-tea.com/p/17/netlify-github-pages-hexo/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>そのため、シンプルにローカルで生成するようにしました。</p><p>サイト全体のバージョン管理には、<br><a href="https://asterisks.netlify.com/2016/02/16/git-private-bitbucket/">無料で非公開リポジトリが作成できる</a> <a href="https://www.google.co.jp/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjutOqO7brYAhVJhbwKHc-6DqMQFgg5MAA&amp;url=https%3A%2F%2Fbitbucket.org%2F&amp;usg=AOvVaw1dx8LgKM4mYI8whQ_0OU-L" target="_blank" rel="noopener">Bitbucket</a> を使用しています。</p><p>また、Github、Netlify、Hexo など、すべて無料で使用しています。<br>これがオープンソースの力よ！浮いたお金でいつかは独自ドメインとるぞ！</p><h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>自分でプラグインやテーマなどを作れるので、<br>どんどんカスタマイズして、自分らしいブログを作っていきたいです！</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> javascript </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spacechem-tips】Sync-2 交互に実行</title>
      <link href="/2017/12/31/spacechem-sync-2/"/>
      <url>/2017/12/31/spacechem-sync-2/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の２つ目です。</p><p>今回は Sync コマンドの応用の使用法の１つである、</p><p><strong>交互に実行</strong></p><p>について説明しようと思います。</p><p>具体的には、</p><p>１つのウォルドの処理が終わったら、もう１つのウォルドの処理を行う</p><p>というのを繰り返すことです。</p><h2 id="例-ヘーパイストスIV-KOHCTPYKTOP"><a href="#例-ヘーパイストスIV-KOHCTPYKTOP" class="headerlink" title="例: ヘーパイストスIV KOHCTPYKTOP"></a>例: ヘーパイストスIV KOHCTPYKTOP</h2><p>例として、ヘーパイストスIV のサイドストーリー、<br>KOHCTPYKTOP を見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4647/39401220871_085e944a50_o.gif" alt="spacechem-sync-alternate"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>ヒ素とホウ素を、１つずつ交互に ψ に出力しています。</p><p>これも Sync コマンドを使って実装しています。</p><p>どのように実装しているのか見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4680/27623938539_1832c5d166.jpg" alt="spacechem-sync-alternate-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>Sync コマンド２つが使われていますね。<br>これは前回、<a href="http://polaris-bear.lolipop.jp/shunroom/798" target="_blank" rel="noopener">「待機」としての「同期」</a>で説明したのと同じ方法で、<br><strong>片方の処理が終わるのを待機している</strong>、という意味です。</p><p><strong>注目すべきは Start ブロックの位置</strong>です。<br>赤のほうは Sync に挟まれて、<br>青のほうは Sync の手前にあります。</p><p>ここからわかるように、<strong>青のほうは赤の処理がすべて終わるのをまず待機していて、<br>その後、赤のほうは青の処理がすべて終わるのを待機している</strong>のです。</p><p>このようにすることで、交互に実行することができています。</p><h2 id="使い道"><a href="#使い道" class="headerlink" title="使い道"></a>使い道</h2><p>１つの物質を２つの反応装置へ分岐させたり、<br>あるいは２つの物質を１つの反応装置へ集めたりするときに使えます。</p><p>しかし、この方法は、後に出てくる Flip Flop で、<br>必要なくなってしまいます。<br>わざわざ２つのウォルドを使わなくても、１つのウォルドで交互に処理ができるようになるのです。</p><p>Flip Flop が使えるのはアトロポス基地以降なので、<br>それまではかなり使えて便利な解法パターンです。</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Spacechem-Tips </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
            <tag> spacechem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spacechem-tips】Sync-1 「待機」としての「同期」</title>
      <link href="/2017/12/31/spacechem-sync-1/"/>
      <url>/2017/12/31/spacechem-sync-1/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Spacechem の解法、Sync の１つ目です。</p><p>今回は Sync コマンドの使い道の１つである、</p><p><strong>「待機」としての「同期」</strong></p><p>について説明したいと思います。</p><h2 id="Sync-の基本の使い方"><a href="#Sync-の基本の使い方" class="headerlink" title="Sync の基本の使い方"></a>Sync の基本の使い方</h2><p>その前に、まずは Sync の基本的な使い方を説明します。</p><p>Sync は、基本的に</p><p><strong>２つのウォルドのタイミングを合わせる</strong></p><p>ために使います。</p><p>例として、アルコノストの１ステージ目「検出の基本」を見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4594/38692049194_d773d64f8c_o.gif" alt="spacechem-basic-of-sensing"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>このように、２つのウォルドが、自転車のペダルのように、<br>ぐるぐると回っていますね。</p><p><img src="https://farm5.staticflickr.com/4687/38692953324_2ca95715b4.jpg" alt="sync-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p><strong>２つのウォルドのタイミングを合わせることで、原子同士の衝突を防いでいるのです。</strong></p><p>２つのウォルドで操作すると、<br>速度は２倍になりますから、<br>クリアに必要なサイクル数は２分の１と、減らすことができます。</p><p>もちろん、タイミングを合わせるのは、結合時など、<br>これ以外の使い方もできます。</p><h2 id="「待機」としての「同期」"><a href="#「待機」としての「同期」" class="headerlink" title="「待機」としての「同期」"></a>「待機」としての「同期」</h2><p>それでは、本題に移りましょう。<br>Sync コマンドは、<strong>「待機」としての使い方もできる</strong>のです。</p><p>例として、ダノプスのサイドストーリー、実験：その場で入れ替えを見てみましょう。</p><p><img src="https://farm5.staticflickr.com/4739/38692952924_fe26964343_o.gif" alt="sync-wait"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>いくつか Sync コマンドがありますが、下の Sync コマンドに注目してください。</p><p><img src="https://farm5.staticflickr.com/4733/27623557119_b0619281b9.jpg" alt="sync-wait-description"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>１ウォルドに２つずつ、Sync コマンドがありますね。<br>赤のウォルドが結合装置の手前に来た時に Sync して、<br>その後もう一度 Sync しています。<br>最初の Sync で、青のウォルドは結合の除去を開始していますね。<br>除去が終わったら再び Sync して、赤のウォルドを動かし始めます。</p><p>このように、Sync コマンドには、</p><p><strong>片方の処理が終わるまで待機する</strong></p><p>という使い方ができます。<br>このような場合、片方の処理を開始するため、<br><strong>通常２つ Sync をセットにして使うことが多い</strong>です。</p><p>この考え方は、ゲームの最後の最後まで使うことができるので、とても便利です。</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Spacechem-Tips </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
            <tag> spacechem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spacechem の重要テクニック集！</title>
      <link href="/2017/12/31/spacechem-points/"/>
      <url>/2017/12/31/spacechem-points/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>最終ステージ「そして結末へ（End Of The Line）」をクリアすることができました！</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-cleared-end-of-the-line/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>そこで、今まで僕がクリアしていくうえで役に立った解法のポイントがあるので、<br>それらを紹介していこうと思います。</p><p>僕が大事だと思う解法のポイントは、ずばり３つ！</p><ul><li><strong>Sync</strong></li><li><strong>回転</strong></li><li><strong>Flip Flop</strong></li></ul><p>です！<br>それぞれについて紹介していこうと思います。</p><p>徐々に記事を公開していきます。<br>公開まで少々お待ちください。</p><h2 id="Sync"><a href="#Sync" class="headerlink" title="Sync"></a>Sync</h2><p><img src="https://farm5.staticflickr.com/4726/38521809415_900b55c71a_o.png" alt="spacechem-sync"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><!-- タイミング合わせ：検出の基本 --><ol><li><a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-1/">「待機」としての「同期」</a> <!-- タイミング合わせ、ではない → 実験：その場で入れ替え　の窒素 --></li><li><a href="https://asterisks.netlify.com/2017/12/31/spacechem-sync-2/">交互に実行</a> <!-- KOCH ヒ素・ホウ素 --></li><li><a href="https://asterisks.netlify.com/2018/01/04/spacechem-sync-3/">何回かに１回</a> <!-- KOCH ケイ素 --></li></ol><h2 id="回転"><a href="#回転" class="headerlink" title="回転"></a>回転</h2><p><img src="https://farm5.staticflickr.com/4646/39399934191_13d1e9f61a_o.png" alt="spacechem-rotate"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><ol><li>点対称な分子の生成 その１ <!-- 親玉の風格 回転の中心が真ん中 --></li><li>点対称な分子の生成 その２ <!-- KOCH ケイ素 回転の中心が移動する --></li><li>点対称な分子の生成 その３ <!-- Al-O 機会を超えた存在 --></li><li>点対称な分子の結合の除去 <!-- KOCH 二酸化ケイ素 --></li></ol><h2 id="Flip-Flop"><a href="#Flip-Flop" class="headerlink" title="Flip Flop"></a>Flip Flop</h2><p><img src="https://farm5.staticflickr.com/4590/38521809245_7a26e9419b_o.png" alt="spacechem-flip-flop"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><ol><li>スイッチバック</li><li>合流</li><li>何回かに１回</li><li>分岐（２の累乗）</li><li>分岐（その他）</li></ol><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><ol><li>正方形の生成 その１ <!-- KOCH ケイ素 --></li><li>正方形の生成 その２ <!-- 分子製造工場 セメンタイト --></li><li>核融合 <!-- 結合したままできる --></li><li>役割分担</li></ol>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Spacechem-Tips </category>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
            <tag> spacechem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Spacechem】最終ステージ「そして結末へ」クリアした！</title>
      <link href="/2017/12/31/spacechem-cleared-end-of-the-line/"/>
      <url>/2017/12/31/spacechem-cleared-end-of-the-line/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>2017 年も今日で最後ですねー。早いなあ</p><p>そして 2017 年中に、なんと、<br><a href="http://store.steampowered.com/app/92800/SpaceChem/?l=japanese" target="_blank" rel="noopener">Spacechem</a> をクリアすることができましたーーーー！！！！！！</p><p>今年の11月、オータムセールの直前に定価で購入しました。<br>そこから 148 時間プレイして、なんとかクリアに至りました。</p><h2 id="クリア時の映像"><a href="#クリア時の映像" class="headerlink" title="クリア時の映像"></a>クリア時の映像</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/ydxOkgKhcJ8" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><h2 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h2><p>クリアする確率を上げたかったため、クリア時の映像より貯蔵タンクが増えています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/TRFDdboUjh0" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>基本は<strong>相手を動かさない</strong>ことです。<br>そのために高頻度でレーザーを発射して相手の動きを止め、<br>ミサイルもバンバン打ちます。<br>Ω原子が徐々にたまってしまうのが大変です。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>本当に難しかったです。</p><p><img src="https://farm5.staticflickr.com/4739/38520580595_6cd0b8e10e_o.gif" alt="end-of-the-line"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>最後のステージは、VGM レーザー反応装置内で、<br>Σ-エチレン と 炭素が３つつながったやつから、<br>Σ-疑似ベンゼンという物質を作るようにしたのですが、<br>これをそのまま６つの結合装置でくっつけても、<br>期待した結合通りにいきませんでした。</p><p>そこで、まず最初に炭素を６つ結合させて、<br>そこからΣ-エチレンを２つに分けたものをサイドにつけるようにしたら、<br>うまく結合してくれました。</p><p>このように、このゲームに必要なのは試行錯誤です。<br>トライアンドエラーの繰り返しで、正解が見つかります。</p><p>本当に難しかったです。</p><p>当初は受験勉強の合間に息抜きとしてやろうと思って買ったのですが、<br>受験勉強と Spacechem 、どっちが息抜きになったのやら・・</p><h2 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h2><p>一通りクリアしたので、今後 Spacechem については、<br>僕が解いていくうえで役に立った解法などを、紹介していこうと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
            <tag> spacechem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Steam】Oxygen Not Included を 20% OFF で買った</title>
      <link href="/2017/12/30/bought-oxygen-not-included/"/>
      <url>/2017/12/30/bought-oxygen-not-included/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。メリークリスマス！（遅い）<br>Steam でついにウィンターセールが始まりましたね！（遅い）</p><p>そこで、何のゲームを買おうか精査してきたわけですが、<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/15/wants-in-steam-winter-sale-2017/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>今回、ついに買うゲームが決まりました！<br>そのうちの一つは、Oxygen Not Included です！</p><p><a href="http://www.flickr.com/photos/126344033@N06/24516168637" title="Steam Winter Sale ONI 20% OFF" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4598/24516168637_2852118f5f_o.png" alt="Steam Winter Sale ONI 20% OFF"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>今年の５月から我慢してきたゲーム、<br>20% OFF で購入できました！</p><p>早速プレイしてみたので、紹介したいと思います。</p><p><a href="http://www.flickr.com/photos/126344033@N06/39381344611" title="oni-screenshot" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4642/39381344611_b88e7a9e19_c.jpg" alt="oni-screenshot"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>45時間プレイしました。<br>45時間でまだ Cycle 48 かよ！と突っ込まれそうですが、<br>ここにはかなりの苦労があったのです。</p><h3 id="セーブデータ１つ目"><a href="#セーブデータ１つ目" class="headerlink" title="セーブデータ１つ目"></a>セーブデータ１つ目</h3><p>１つ目は、Cycle 90 くらいまで進んでいましたが、<br>まさかの、<strong>浄水をためていたところに失禁されてしまい</strong>、<br>食中毒が多発し、やっていけなくなってしまったのです。<br>ちょうどトイレがすべて使用中だったのですが、・・・そこでする？</p><p>ここから、</p><ul><li>浄水槽の上はふさいでおいたほうがいい</li><li>トイレはたくさん作れ</li></ul><p>という教訓を得ました。</p><h3 id="セーブデータ２つ目"><a href="#セーブデータ２つ目" class="headerlink" title="セーブデータ２つ目"></a>セーブデータ２つ目</h3><p>気を取り直した２つ目、実は Cycle 2 で死にました。<br>というのは、浄水槽を作っていたのですが、<br>そこにはしごを作り忘れていたら、水から出られなくなってしまい、<br>気づかずに就寝、その後・・・・・・・・予想通りです（涙）</p><p><a href="http://www.flickr.com/photos/126344033@N06/39351557902" title="oni-sleep-in-water" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4590/39351557902_477d9d729e_z.jpg" alt="oni-sleep-in-water"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑そこで寝ないでよ（涙）</p><p><a href="http://www.flickr.com/photos/126344033@N06/25511741298" title="oni-emergency" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4593/25511741298_8acf4e9736_o.png" alt="oni-emergency"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>ちなみに、このような非常事態は、右上の<br>「警報を切り替える」を押せば乗り越えられたらしいのですが、<br>そんなこと知らなかったよー・・</p><p>ここから、</p><ul><li>警報機能の重要さ</li><li>取り残される人が出ないよう、常に作業をチェックする</li></ul><p>という教訓を得ました。</p><h3 id="セーブデータ３つ目"><a href="#セーブデータ３つ目" class="headerlink" title="セーブデータ３つ目"></a>セーブデータ３つ目</h3><p>三度目の正直の３つ目、実はかなり安泰です。</p><p><a href="http://www.flickr.com/photos/126344033@N06/38673362614" title="oni-steam-geyser" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4590/38673362614_2588367a55_z.jpg" alt="oni-steam-geyser"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>コロニーの割と近くに<strong>蒸気間欠泉</strong>があり、水が無限に手に入るのですｗ<br>ここから、水以外にも酸素も無限に作り出せて、<br>また水素を作れるので、水素発電によりかなり電気も安泰ですｗ</p><p><a href="http://www.flickr.com/photos/126344033@N06/25511859068" title="oni-oxygen-factory" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4594/25511859068_fd467d81e9.jpg" alt="oni-oxygen-factory"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑酸素・電気メーカー</p><p><a href="http://www.flickr.com/photos/126344033@N06/38673355624" title="oni-much-oxygen" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4736/38673355624_e42f4b0513.jpg" alt="oni-much-oxygen"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑酸素状況はかなり良い</p><p><strong>藻が０なのに</strong>ずっと生活できます。水の大切さを知りました。</p><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/30/game-points/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑ で紹介したポイントに沿ってレビューしていきます</p><h3 id="独創性"><a href="#独創性" class="headerlink" title="独創性"></a>独創性</h3><p><strong>5（とても満足）</strong><br>キャラクターに指示を出して行動してもらうところは、Rimworld に少々似ていますが、<br>ゲームの根幹である「酸素がない空間で生き残る」というのは、<br>ゲームに張り詰めた緊張感を与えてくれて、独特です。</p><h3 id="サプライズ性"><a href="#サプライズ性" class="headerlink" title="サプライズ性"></a>サプライズ性</h3><p><strong>5（とても満足）</strong><br>買う前にかなり実況プレイを見たので、大体内容が予想できてしまうかと思っていましたが、<br>実際プレイしてみると全然想像をしていなかったことをしてくれるので、楽しいです。<br>（浄水槽の上で失禁されたり、顔の表情が想像以上に豊かだったり）</p><p><a href="http://www.flickr.com/photos/126344033@N06/27604386939" title="oni-no-oxygen" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4685/27604386939_93df0a2962_z.jpg" alt="oni-no-oxygen"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑呼吸不可の状況で苦しむカタリナさんとスティンキーさん</p><h3 id="やりこみ度"><a href="#やりこみ度" class="headerlink" title="やりこみ度"></a>やりこみ度</h3><p><strong>4（満足）</strong><br>いろんなところに探検しに行ったり、新しいバイオームを探したりと、<br>いろいろやることはありますが、<br>やはり酸素がないので、あまり自由に移動できないというのはあります。</p><p>また、一通り持続可能な社会ができると、そこから何をすればいいのか<br>迷ってしまうことがあります。</p><p>そのような社会を作るまでの過程はとてもやりがいがあって、楽しいです。</p><h3 id="難易度"><a href="#難易度" class="headerlink" title="難易度"></a>難易度</h3><p><strong>普通</strong><br>基本的なフローにのっとってやっていけば、コロニーのバランスは保てて、<br>いい感じにゲームが進んでいきます。</p><p>しかし災いは突然やってきますｗ</p><ul><li>一気にスペースを拡張しすぎると、酸素が足りなくて一気に終わる</li><li>浄水槽に失禁されると、きれいな水がなくなって、みんな食中毒になって、一気に終わる</li><li>石炭で電気を賄っていると、石炭がなくなった途端、酸素が作れなくなって一気に終わる</li></ul><p>というように、バランスが崩れると一気に雪崩のように危機がやってきます。</p><p>普通にプレイしていれば徐々にコロニーを拡張でき、簡単そうですが、<br>そこにバランスを常に意識しなければならないというハラハラ感があって、<br>いい感じに難易度を保ってくれている印象です。</p><p>ただ、バランスが崩れると取り直すのは結構難しいです。</p><h3 id="世界観"><a href="#世界観" class="headerlink" title="世界観"></a>世界観</h3><p><strong>5（満足）</strong><br>あまり「危機的状況から逃れろ！」というような怖い世界観ではなく、<br>むしろ個性豊かなキャラクターたちがコロニーづくりを頑張る、<br>結構<strong>ユーモアあふれる世界観</strong>です。</p><p><a href="http://www.flickr.com/photos/126344033@N06/27604386979" title="oni-massage" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4645/27604386979_669c53bc0b.jpg" alt="oni-massage"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑マッサージされるエイダさん</p><p><a href="http://www.flickr.com/photos/126344033@N06/24516168517" title="oni-名作" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4731/24516168517_781b9afae2.jpg" alt="oni-名作"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>↑これは名作</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>めちゃめちゃ面白いです！ハマります。<br>ただしずっとやっちゃいそうなので、休憩も忘れずに。</p><h2 id="リンク"><a href="#リンク" class="headerlink" title="リンク"></a>リンク</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://ch.nicovideo.jp/styleone/blomaga/ar1188649" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑かなり役に立ちます。ありがとうございます。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://www.youtube.com/watch?v=Co11ODPrEF0&list=PLX9vSr3tJGDV7FDtuwcXRPI4pvsZ0uEwu" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑BBDさんの実況でぼくは知りました。とても面白いです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/15/wants-in-steam-winter-sale-2017/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑この中からいくつか購入したので、また記事を書くと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> oxygen-not-included </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shundroid 式ゲームの評価ポイント</title>
      <link href="/2017/12/30/game-points/"/>
      <url>/2017/12/30/game-points/</url>
      
        <content type="html"><![CDATA[<p>みなさんこんにちは。shundroid です。<br>冬休みが始まりました。2017 年ももうあと少しですね。</p><p>ぼくは受験生なので、ものすごく勉強をしています。<br>これは冬「休み」なのか！？今までが休みだったかの如く勉強をしています。</p><p>そのためあまりブログの更新ができないです。ごめんなさい。</p><p>そんな中でも、Steam のウインターセールがやってきたので、<br>ゲームをいくつか買いました！（あまりできていませんが）</p><p>紹介したいのですが、その前にまず、<br>どのような基準でゲームを評価して、選んでいるのかを説明したいと思います。</p><h2 id="評価のポイント"><a href="#評価のポイント" class="headerlink" title="評価のポイント"></a>評価のポイント</h2><h3 id="独創性"><a href="#独創性" class="headerlink" title="独創性"></a>独創性</h3><p>ゲームの<strong>アイデアが独創的で、面白いかどうか</strong>を判断します。</p><p>誰も思いつかなかったようなアイデアだけど、とても面白いゲームを、<br>ぜひともプレイしてみたいですし、開発してみたいですねｗ</p><h3 id="サプライズ性"><a href="#サプライズ性" class="headerlink" title="サプライズ性"></a>サプライズ性</h3><p>ゲームをプレイしていく中で、予想通りのことしか起きないと平凡で、あまり面白みがなくなってしまうように感じます。<br>そこで、ゲームの中で<strong>「ええええええっ！？」というような、</strong><br><strong>開いた口がふさがらなくなることがよく起こるかどうか</strong>判断します。</p><p>ここは「飽き」にもかかわってくると思います。<br>非凡で常に刺激があるようなゲームだと、ずっと楽しめそうです。</p><h3 id="やりこみ度"><a href="#やりこみ度" class="headerlink" title="やりこみ度"></a>やりこみ度</h3><p>ステージが2つくらいしかないゲームだとすぐにクリアしてしまいます。<br>そこで、クリアできるまでに時間がかかったり、クリアしてからも楽しめることがあったりするなど、<br><strong>長く遊べるかどうか</strong>を判断します。</p><p>ここは「価格」もかかわってくると思います。<br>１００円くらいのゲームなら、ステージは１０個くらいでも十分うれしいですが、<br>１０００円だともっとたくさんプレイしたいですね。</p><p>他にも、自分でステージを作ったり、他人の作ったステージをプレイできたりすると、<br>ずっとプレイできそうですね。</p><h3 id="難易度"><a href="#難易度" class="headerlink" title="難易度"></a>難易度</h3><p><strong>難易度がほどよいかどうか</strong>を判断します。<br>しかし、難易度はひとによって違うと思うので、<br>僕にとって鬼畜すぎず、ぬるすぎないゲームかどうかになってしまいます。</p><p>ちなみにぼくは、マリオカートはかなり得意で、<br>友達と遊んで負けたことがありません。<br>しかし、スマブラはとても難しくて・・、<br>友達と遊んで勝ったことがありません。</p><p>このように人の得意不得意によっても変わってきますよね。</p><h3 id="世界観"><a href="#世界観" class="headerlink" title="世界観"></a>世界観</h3><p>ゲームのキャラクターデザインや音楽、ＵＩなどに統一性があって、<br><strong>一体感のある世界観が演出されているかどうか</strong>を判断します。</p><p>世界観といっても、ゼルダのように壮大でなければいけないというわけもなく、<br>バカゲーなら Funny な世界観が、ポップならポップな世界観ができていれば、<br>ゲームの世界に没頭でき、楽しめると思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これから買ったゲームを紹介していきますが、<br>これを基準に紹介していきます。</p><p>よろしくお願いします。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【2017年末】「マウスに触らない」Visual Studio Codeを目指して</title>
      <link href="/2017/12/16/dont-use-mouse-in-vscode/"/>
      <url>/2017/12/16/dont-use-mouse-in-vscode/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。インフルエンザはほぼ治りました shundroid です。<br>もう 2017 年も終わりですね。</p><p>そこで今回は今年が終わる時点での、<br>ぼくの Visual Studio Code の開発環境を紹介していこうと思います。<br>多分これから変わることはないと思いますので・・。</p><h2 id="コンセプト"><a href="#コンセプト" class="headerlink" title="コンセプト"></a>コンセプト</h2><p><strong>マウスを触らない</strong></p><p>もともとぼくは Vim というエディタで開発をしてきましたが、<br>auto-complete とかを入れまくったら、重くなってしまい、<br>ほかのエディタで Vim っぽくできないかと、Spacemacs や、Atom など試してきて、<br>そこで一番高速で高機能な Visual Studio Code に落ち着いた次第なのです。</p><p>マウスを触らない―それは究極の効率でコードを書くための手段。<br>キーボードから手を離すことによるタイムロスを防ぐことができます。</p><p>そのために工夫しているキーバインドやプラグインを紹介していきたいと思います。</p><h2 id="プラグイン"><a href="#プラグイン" class="headerlink" title="プラグイン"></a>プラグイン</h2><h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=vscodevim.vim</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/vim.gif" alt></p><p>必須プラグインです。VSCode で Vim ライクなキー入力に対応します。<br>またこのプラグインにより後ほどキーバインドを設定していきます。</p><p>検索や保存も完ぺきにできます。<br>しかしちょっと <code>C-e</code> <code>C-y</code> によるスクロールのレスポンスが遅い気がします。<br>それはしゃーなし。</p><h3 id="Trailing-Spaces"><a href="#Trailing-Spaces" class="headerlink" title="Trailing Spaces"></a>Trailing Spaces</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/trailing-space.gif" alt></p><p>行末のスペースを表示してくれます。<br>便利ですね。</p><h3 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons</a></p><p><a href="http://www.flickr.com/photos/126344033@N06/27306929509" title="vscode-icons" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4684/27306929509_67f0a5f51f_o.png" alt="vscode-icons"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>VSCode をカラフルに彩ってくれます。きれいですね。</p><h3 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h3><p><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync</a></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/setting-sync.gif" alt></p><p>来ました神プラグイン。<br>User Settings や Keybindings ファイルを複数の端末で同期してくれます！<br>同期には Gists を使います。ロマンあふれますね。</p><p>複数のパソコンで開発する人には必須ですね。<br>あれ、設定したはずのキーバインドが使えねえ・・あ、こっちで設定してなかっためんどっ<br>っていうのがなくなります。</p><p>ぼくも壊れかけのノートパソコンでもたまに開発するので、Sync するようにしています。</p><p>Gif では手動アップロードの方法を紹介しましたが、<br>なんと<strong>自動同期</strong>もしてくれるんです。なんてすばらしい・・・！</p><p>このプラグインにつきましては、↓の記事が詳しいので、続きはこちらをご覧ください。ありがとうございます。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://necojackarc.hatenablog.com/entry/2017/03/12/184557" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>Vue ファイルに対応する <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noopener">Vetur</a>、stylus に対応する <a href="https://marketplace.visualstudio.com/items?itemName=sysoev.language-stylus" target="_blank" rel="noopener">language-stylus</a>、<br><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools" target="_blank" rel="noopener">C/C++</a>、Git Log が見れる <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory" target="_blank" rel="noopener">Git History</a>（ほぼ使用しない）を入れています。</p><h2 id="キーバインド"><a href="#キーバインド" class="headerlink" title="キーバインド"></a>キーバインド</h2><p>Vim（vscode-vim）で、 <code>&lt;leader&gt;</code> キーを使用したキーバインドができるので、<br>Space キーをリーダーキーにして、<br>マウスを触らず、<strong>手が疲れないキーバインド</strong>を実現！！</p><h3 id="lt-leader-gt-キーを使ったキーバインドの方法"><a href="#lt-leader-gt-キーを使ったキーバインドの方法" class="headerlink" title="&lt;leader&gt; キーを使ったキーバインドの方法"></a><code>&lt;leader&gt;</code> キーを使ったキーバインドの方法</h3><p>ふつう、キーバインドだと、Ctrl や Alt などを使うことが多いのですが、<br><code>&lt;leader&gt;</code> キーを使うことによって、Space キーなどでキーバインドを組むことができるようになります。</p><p>右側の USER SETTINGS に、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.leader"</span>: <span class="string">"&lt;space&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この行を追加します。（波かっこは不要です）<br>これで Space キーをリーダーキーにできました！</p><h3 id="NORMAL-MODE-のキーバインドを設定する"><a href="#NORMAL-MODE-のキーバインドを設定する" class="headerlink" title="NORMAL MODE のキーバインドを設定する"></a>NORMAL MODE のキーバインドを設定する</h3><p>設定とかを開きたいときって、Normal Mode のときですよね。<br>ステータスバーに <code>-- NORMAL MODE --</code> と表示されているときです。</p><p>vscode-vim だとその時のキーバインドでは、Other Modes という類に追加するそうなので、<br>ためしに、otherModes のキーバインドに、 <code>&lt;leader&gt; + p</code> でファイルを開けるようにしてみましょー。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.normalModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"before"</span>: [<span class="string">"&lt;leader&gt;"</span>, <span class="string">"p"</span>],</span><br><span class="line">            <span class="string">"after"</span>: [],</span><br><span class="line">            <span class="string">"commands"</span>: [</span><br><span class="line">                &#123; <span class="string">"command"</span>: <span class="string">"workbench.action.quickOpen"</span> &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大事！（2018/08/07追記）</strong></p><p><blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">直った！otherModesKeyBindingsじゃなくてnormalModeKeyBindingsNonRecursiveになったのね</p>&mdash; shundroid (@shundroid_pub) <a href="https://twitter.com/shundroid_pub/status/1018300970084720640?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">2018年7月15日</a></blockquote></p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>VSCode のバージョンアップに伴い、<code>otherModesKeyBindings</code> は<br><code>normalModeKeyBindingsNonRecursive</code> になりました。<br><strong>追記終わり</strong></p><p>これを設定して、保存（ <code>:w</code> でできます）して、<br>Normal Mode でないときは ESC を押してから、<br>Spaceキー + P で、ファイルを開く<strong>あれ</strong>が出てくると思います。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2017/12/c-p-644x433.gif" alt></p><h3 id="その他のキーバインド"><a href="#その他のキーバインド" class="headerlink" title="その他のキーバインド"></a>その他のキーバインド</h3><p>ほかに、ぼくは上の要領で、次のキーバインドを追加しています。</p><table><thead><tr><th>キー</th><th>動作</th><th>コマンド</th></tr></thead><tbody><tr><td><code>&lt;leader&gt;</code> + w + l</td><td>右のパネルへ</td><td>after を <code>[&quot;&lt;C-w&gt;&quot;, &quot;l&quot;]</code> とする</td></tr><tr><td><code>&lt;leader&gt;</code> + w + h</td><td>左のパネルへ</td><td>after を <code>[&quot;&lt;C-w&gt;&quot;, &quot;h&quot;]</code> とする</td></tr><tr><td><code>&lt;leader&gt;</code> + o</td><td>Open Recent</td><td>workbench.action.openRecent</td></tr><tr><td><code>&lt;leader&gt;</code> + s</td><td>Show Commands</td><td>workbench.action.showCommands</td></tr><tr><td><code>&lt;leader&gt;</code> + f</td><td>プロジェクト内検索</td><td>workbench.action.findInFiles</td></tr><tr><td><code>&lt;leader&gt;</code> + d</td><td>フォルダーを開く</td><td>workbench.action.files.openFolder</td></tr><tr><td><code>&lt;leader&gt;</code> + b</td><td>サイドバーの表示・非表示</td><td>workbench.action.toggleSidebarVisibility</td></tr><tr><td><code>&lt;leader&gt;</code> + @</td><td>ターミナルの表示・非表示</td><td>workbench.action.terminal.toggleTerminal</td></tr></tbody></table><p>command の部分を書き換えることで、様々な動作に対応できます。<br>また、上２つは after を使っていますが、<br>after を使うと、キーの動きをさらにキーの動きにして返すことができます。</p><p>例えば１番上のだと、</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.normalModeKeyBindingsNonRecursive"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"before"</span>: [<span class="string">"&lt;leader&gt;"</span>, <span class="string">"w"</span>, <span class="string">"l"</span>],</span><br><span class="line">            <span class="string">"after"</span>: [<span class="string">"&lt;C-w&gt;"</span>, <span class="string">"l"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こうなるので、 <code>&lt;leader&gt; + w + l</code> で、<code>Ctrl + w + l</code> をシミュレートできるのです。</p><p>コマンドの種類は、keybindings.json に一覧が乗っているので、そちらを参照してください。</p><h2 id="ドヤる"><a href="#ドヤる" class="headerlink" title="ドヤる"></a>ドヤる</h2><p><img src="https://lh3.googleusercontent.com/8a-xdh-LqCOs9u4XAVlXCd8LI7tf7q65w00Mmj_bXxZAZSBxuk4bgcRIIgVwqX1RMXAFdu5vCDefVz_YXqSxB6LLqnOcDxk2l8lDaIviikG_rc-Zlq1Yh3xUUsbsARbm-08mIXaiV3bAXpT7bBsGa6Ykk9Q7ndbfIzQks73quioV2xnt3i7uQDb-q_pH5gqCCLp2v6FiKghbzR4g3rBEXsktEQLtxjoi3lwnkg8gSxHm3L3Jy38Bi-h5O77IS0SlN1MQCWTJpezzH5k9Xr3m3ROUgMZMUjK_S7e1Rz5oTbskdz32TsWNFK7vfIpQ36Vjdg7LYr30f9G5_G3pWtizaO2CMdAH2AZN7G7g4ZzUGeZW8BtznToWvBbj4HwwVb_g4TX_iyC57_moy51tZphnPnKmFF_1nEFZJtEMtmrVmOgZOQu3CyjBruZTGIh0Ezaf1FgyVXZipTvxtcuxFdSrxOiNPLB6ELAkmWRBu5fM_fS9mOhG47GgpdBK5JHT1L6TpxIxDQ_YlhQpAorOFHdO65Yso_H8tAjWlVra3j2iZZIjIrjzgRNDHfAsqHPonVVAPoGdZOXK7t0Lfj9-mEXdmxd-P3A8E0XORjDhsKE=w996-h746-no" alt></p><p>キーボードだけで操作しています。</p><p>実は左側のファイル一覧の画面も、Vim ライクな操作ができるんです。</p><p>あと、ステータスバーの色が insert 時変わっていますが、<br>それは次の設定を USER SETTINGS にすることにより変えられます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"vim.statusBarColorControl"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"vim.statusBarColors"</span> : &#123;</span><br><span class="line">        <span class="string">"normal"</span>: <span class="string">"#005f5f"</span>,</span><br><span class="line">        <span class="string">"insert"</span>: <span class="string">"#5f0000"</span>,</span><br><span class="line">        <span class="string">"visual"</span>: <span class="string">"#5f00af"</span>,</span><br><span class="line">        <span class="string">"visualline"</span>: <span class="string">"#005f87"</span>,</span><br><span class="line">        <span class="string">"visualblock"</span>: <span class="string">"#86592d"</span>,</span><br><span class="line">        <span class="string">"replace"</span>: <span class="string">"#000000"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他にも、選択時・行・ブロック選択時・置き換え時も色を変えられます。</p><p>しかしまだ課題もあります。<br>いったん左側のサイドメニューやターミナルにフォーカスが当たると、<br>そこから自分で設定したキーバインドが使えなくなってしまいます。</p><p>それが直ればもうマウスとはおさらばですね！<br>実機テストのときはどっちみち使いますが・・・ｗ</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gist </tag>
            
            <tag> vim </tag>
            
            <tag> vscode </tag>
            
            <tag> vscode-ext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017年 Steam のウィンターセールで買いたいゲーム</title>
      <link href="/2017/12/15/wants-in-steam-winter-sale-2017/"/>
      <url>/2017/12/15/wants-in-steam-winter-sale-2017/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。shundroid です。<br>インフルエンザですが、昨日はよく眠れて、<br>もうほぼ治りました。ありがとうございました。</p><p>さて、Steam のウィンターセールが<br><strong>12月22日</strong>から始まるという予想が出ていますね。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://www.itkaigai.com/news/steam-2017-autumn-sale-and-christmas-sale-date-leak.htm" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>もうあと<strong>1週間後</strong>ですか！！</p><p>つい最近にオータムセールがありましたが、<br>その直前に <a href="http://store.steampowered.com/app/92800/SpaceChem/?l=japanese" target="_blank" rel="noopener">Spacechem</a> を定価で買ってしまい、後悔しているので、<br>（ゲームはめちゃくちゃ面白かったのでよいのですが）<br>今回はしっかり下見をして、ほしいゲームを買いたいです。</p><h2 id="考えているゲーム"><a href="#考えているゲーム" class="headerlink" title="考えているゲーム"></a>考えているゲーム</h2><p>ぼくの趣味で、<strong>シミュレーション</strong>ゲームや、<strong>プログラミング系</strong>のゲームばかりになりましたｗ</p><p>前まで Intel HD Graphics で気にしていたスペックは、<br>今回は GTX1060 があるのでそこまで気にしなくてよくなりました。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/14/report-i-bought-my-pc/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>サバゲーとかはちょっと・・怖くて・・あ゛ーーーーーー</p><h3 id="Oxygen-Not-Included"><a href="#Oxygen-Not-Included" class="headerlink" title="Oxygen Not Included"></a>Oxygen Not Included</h3><p><a href="http://store.steampowered.com/app/457140/Oxygen_Not_Included/" target="_blank" rel="noopener">http://store.steampowered.com/app/457140/Oxygen_Not_Included/</a></p><p><img src="https://farm5.staticflickr.com/4600/39031403112_b4995d8cb9.jpg" alt="oxygen-not-included"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>酸素がない宇宙空間でサバイバル生活を行うシミュレーションゲームです。<br>絶対面白い！今年の５月から欲しくて我慢してきました。<br>最近までセールに参加してこなくてためらっていましたが、<br><strong>この前のオータムセールでは安くなっていた</strong>ので、多分今回も安くなると信じたい・・・！</p><p><a href="http://store.steampowered.com/app/105600/Terraria/?l=japanese" target="_blank" rel="noopener">Terraria</a> に似ていますが、自分がキャラクターを直接操作するのではなく、<br>指示を出して、動いてもらうタイプで、その点では <a href="http://store.steampowered.com/app/294100/RimWorld/?l=japanese" target="_blank" rel="noopener">Rimworld</a> にも似ています。</p><p>アーリーアクセスなので、アップデートが頻繁に行われています。<br>最近も <a href="https://steamcommunity.com/gid/103582791454860440/announcements/detail/1447199633644093538" target="_blank" rel="noopener">Outbreak Update</a> → <a href="https://steamcommunity.com/gid/103582791454860440/announcements/detail/1464091936148925279" target="_blank" rel="noopener">Oil Update</a> → <a href="https://steamcommunity.com/gid/103582791454860440/announcements/detail/2666556941780325138" target="_blank" rel="noopener">Automation Update</a> → <a href="https://steamcommunity.com/games/457140/announcements/detail/3113541737430757548" target="_blank" rel="noopener">Tubular Update</a> とかなり来ていますｗ<br>過去にはセーブデータに互換性のないアプデがあったらしいですが、まあそれはいいでしょ。</p><p>ぼくはこのゲームを <a href="https://www.youtube.com/channel/UCQwRiPM8h_h9qAbKz8DQjFw" target="_blank" rel="noopener">BBD Company</a> という方のチャンネルで知りました。<br>プレイリストは<a href="https://www.youtube.com/playlist?list=PLX9vSr3tJGDV7FDtuwcXRPI4pvsZ0uEwu" target="_blank" rel="noopener">こちら</a>。</p><p>キャラクターの行動の面白さとかも魅力です。<br>製作は <a href="https://www.klei.com/" target="_blank" rel="noopener">Klei Entertainment</a> で、<a href="http://store.steampowered.com/app/219740/Dont_Starve/?l=japanese" target="_blank" rel="noopener">Don’t Starve</a> を作った会社ですね。</p><p><strong>追記：</strong> このゲームを購入しました！面白いです！<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/30/bought-oxygen-not-included/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><iframe src="https://store.steampowered.com/widget/457140/" frameborder="0" width="750" height="200"></iframe><h3 id="Opus-Magnum"><a href="#Opus-Magnum" class="headerlink" title="Opus Magnum"></a>Opus Magnum</h3><p><a href="http://store.steampowered.com/app/558990/Opus_Magnum/" target="_blank" rel="noopener">http://store.steampowered.com/app/558990/Opus_Magnum/</a></p><p><img src="https://farm5.staticflickr.com/4680/24201541117_39ce9c0565.jpg" alt="opus-magnum"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p><a href="http://store.steampowered.com/app/92800/SpaceChem/" target="_blank" rel="noopener">Spacechem</a> を作った <a href="http://www.zachtronics.com/" target="_blank" rel="noopener">Zachtronics</a> による新作ゲームです。<br>六角形の盤面で、指定されたポーションを作る装置を組みます。<br>作り方は無限大なのでセンスが問われそうですね。</p><p>つい最近アーリーアクセスを抜けたそうなので、<br>やりがいはあると思います。<br>いろいろな人のプレイを見たところ、Spacechem よりはちょっと簡単かな・・・</p><p>アームっぽいのを動かしてポーションを作っていくのですが、<br>それぞれ別タスクでプログラミングでき、アームの動きも細かく制御できるそうです。<br>Spacechem でもウォルドの動きは Flip Flop とかで制御できましたが、<br>ちょっと制限があったので、こっちのほうが自由度は高そうですね。</p><iframe src="https://store.steampowered.com/widget/558990/" frameborder="0" width="750" height="200"></iframe><h3 id="Poly-Bridge"><a href="#Poly-Bridge" class="headerlink" title="Poly Bridge"></a>Poly Bridge</h3><p><a href="http://store.steampowered.com/app/367450/Poly_Bridge/?l=japanese" target="_blank" rel="noopener">http://store.steampowered.com/app/367450/Poly_Bridge/?l=japanese</a></p><p><img src="https://farm5.staticflickr.com/4595/27285403029_d812dfdbee.jpg" alt="poly-bridge"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>橋を作る物理シミュレーションゲームです。<br>ステージの種類もめちゃくちゃ豊富だそうで、やり込めそうです。</p><p>紹介動画を見たところ、車が通った後に船が通るようにする橋を作るとか、<br>結構高度な技術も必要になってきそうですね。</p><p>絵がポップなのも素敵です。</p><iframe src="https://store.steampowered.com/widget/367450/" frameborder="0" width="750" height="200"></iframe><h3 id="SHENZHEN-I-O"><a href="#SHENZHEN-I-O" class="headerlink" title="SHENZHEN I/O"></a>SHENZHEN I/O</h3><p><a href="http://store.steampowered.com/app/504210/SHENZHEN_IO/" target="_blank" rel="noopener">http://store.steampowered.com/app/504210/SHENZHEN_IO/</a></p><p><img src="https://farm5.staticflickr.com/4558/39062718041_2bafe47f51.jpg" alt="shenzhen-io"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>基盤づくりシミュレーションゲームです。<br>これは血が騒ぎますねｗｗｗ</p><p>なんか防犯カメラを作ったり、テトリスを作ったりできるそうですね。<br>アセンブリで書いていくっぽいので勉強になりそうです。</p><p>こちらも Opus Magnum と同じ Zachtronics によるゲームです。</p><iframe src="https://store.steampowered.com/widget/504210/" frameborder="0" width="750" height="200"></iframe><h3 id="TIS-100"><a href="#TIS-100" class="headerlink" title="TIS-100"></a>TIS-100</h3><p><a href="http://store.steampowered.com/app/370360/TIS100/" target="_blank" rel="noopener">http://store.steampowered.com/app/370360/TIS100/</a></p><p><img src="https://farm5.staticflickr.com/4647/39062718291_7f46048ff6.jpg" alt="tis-100"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>SHENZEN I/O のさらにギーク版っぽいです。</p><p>指定されたテストケースに合格するようなプログラムを作るそうですね。</p><p>テストケースは数列や画像などがあるそうです。</p><p>今や JavaScript とかで四則演算は簡単にできますが、<br>それすらやり方を考えなきゃいけない世界が楽しすぎますねｗ</p><p>こちらも Opus Magnum と同じ Zachtronics によるゲームです。</p><iframe src="https://store.steampowered.com/widget/370360/" frameborder="0" width="750" height="200"></iframe><h3 id="HackNet"><a href="#HackNet" class="headerlink" title="HackNet"></a>HackNet</h3><p><a href="http://store.steampowered.com/app/365450/Hacknet/?l=japanese" target="_blank" rel="noopener">http://store.steampowered.com/app/365450/Hacknet/?l=japanese</a></p><p><img src="https://farm5.staticflickr.com/4735/27285631539_0bf213ae8b.jpg" alt="hacknet"><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>最後は今まで紹介したのとちょっと違う世界観のゲームです。<br>ハッキングシミュレーターで、いろんなことができるゲームです。</p><p>とても楽しそうですが、ちょっと怖いかな・・・<br>（UnderTale が怖すぎて手が出せない人の感想です）<br>しっかり下見をしてから買ったほうがよさそうですね。</p><iframe src="https://store.steampowered.com/widget/365450/" frameborder="0" width="750" height="200"></iframe><h2 id="【リンク】去年買ったゲーム"><a href="#【リンク】去年買ったゲーム" class="headerlink" title="【リンク】去年買ったゲーム"></a>【リンク】去年買ったゲーム</h2><p>去年は <a href="http://store.steampowered.com/app/322170/Geometry_Dash/" target="_blank" rel="noopener">Geometry Dash</a> と <a href="http://store.steampowered.com/app/346010/?l=japanese" target="_blank" rel="noopener">Besiege</a> を買いました。</p><p>Geometry Dash はかなりハマりました。Stage 10 まで解けました。<br>めちゃくちゃ難しいです。<br>目を酷使するので、クリア後に「家の壁が動いて見える」現象が起きますｗ<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/12/28/bought-geometry-dash/" width="300" height="150" frameborder="0" scrolling="no"></iframe><br>BGM もノリのいい曲ばかりです。<br>クリアできなかった Stage 11 の曲は、<a href="http://polaris-bear.lolipop.jp/shunroom/710" target="_blank" rel="noopener">神曲１０選</a>にも入っていますｗ</p><p>Besiege も面白いです。自分で作った兵器で ZONE ごとにあるミッションをクリアします。<br>ミッションは、ある場所に行ったり、箱を開けたり、人を倒したり・・・<br>最近マルチプレーヤー・ステージ作成に対応したので、ホットなゲームでもあります。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/12/26/bought-besiege/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ほしいゲームすべてを買うわけではないので、<br>これからもしっかり下見をして、どのゲームを買ったら絶対に楽しいか<br>精査していきたいと思います。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poly-bridge </tag>
            
            <tag> steam </tag>
            
            <tag> oxygen-not-included </tag>
            
            <tag> hacknet </tag>
            
            <tag> opus-magnum </tag>
            
            <tag> shenzhen-io </tag>
            
            <tag> tis-100 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【報告】パソコンを買っていました。</title>
      <link href="/2017/12/14/report-i-bought-my-pc/"/>
      <url>/2017/12/14/report-i-bought-my-pc/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。まだインフルエンザにかかっています。<br>もう体温は 36.7℃まで下がっていて、元気なのですが、<br>毎日夜になると再び38℃まで上がってしまう・・・<br>これって解熱したっていうんでしょうかねえ・・</p><p>さて、実は僕は11か月前、</p><p>パソコンを買っていました・・・！</p><p>すみません、書き忘れていました。</p><p>めちゃめちゃ昔になってしまいましたが、<br>スペックなどを書いておこうと思います。</p><h2 id="きっかけ"><a href="#きっかけ" class="headerlink" title="きっかけ"></a>きっかけ</h2><p>2016年の8月、ノートパソコンを落としてしまい、<br>ハードディスクが壊れたので、SSD に替えて使っていたのですが、<br>やはり内部で接触がおかしくなったところがあるらしく、<br>電源が勝手に落ちてしまう頻度が多くなり、このままでは使えなくなってしまいそうだったからです。</p><p>（ちなみに衝撃で空いた穴からいくつか破片が出てきました。怖すぎる・・・）</p><p>パソコンを落とした話もあまり書いていなかったですねｗ<br>下の記事でちらっと書いていました。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/08/15/serialport-without-vs/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>ロボットを使ったプログラミングのワークショップを開催していた時、<br>急いでいたら、コードに足を引っかけてしまい、<br>すさまじい音とともにパソコンを落としてしまったのです。</p><p>他人のパソコンじゃなくてよかった・・・（汗）</p><h2 id="買ったもの"><a href="#買ったもの" class="headerlink" title="買ったもの"></a>買ったもの</h2><p><a href="https://blog.tsukumo.co.jp/shimbashi/" target="_blank" rel="noopener">TSUKUMO 新橋店</a>で購入しました。<br>イベントで使用したモデルらしいので、比較的安い価格で購入できました。（5桁です）</p><p><a href="http://www.flickr.com/photos/126344033@N06/25174776748" title="IMG_0065" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4680/25174776748_d2174f08f4_m.jpg" alt="IMG_0065"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>箱はこんな感じ。<br>不安だったので、自分で電車に乗って持って帰りましたｗ<br>結構重かったｗ</p><p><a href="http://www.flickr.com/photos/126344033@N06/38329929244" title="IMG_0073" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4548/38329929244_2f43a98225_z.jpg" alt="IMG_0073"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>右側が新しく買ったパソコン、左下が古い落としてしまったパソコンです。</p><h2 id="スペック"><a href="#スペック" class="headerlink" title="スペック"></a>スペック</h2><p>G-GEAR MINI の GI7J-C81T/SQ1 です。<br>↓これが新しく買ったパソコンのスペックです。</p><table><thead><tr><th>パーツ</th><th>性能</th></tr></thead><tbody><tr><td>プロセッサー</td><td>Intel Core i5-6500 プロセッサー</td></tr><tr><td>メモリ</td><td>8GB (4GB×2)</td></tr><tr><td>SSD</td><td>240GB</td></tr><tr><td>GPU</td><td>NVIDIA GeForce GTX 1060 3GB</td></tr><tr><td>OS</td><td>Windows 10 Home 64-bit</td></tr></tbody></table><p>↓これは前のノートパソコンのスペックです。</p><table><thead><tr><th>パーツ</th><th>性能</th></tr></thead><tbody><tr><td>プロセッサー</td><td>Intel core i5-3340M プロセッサー</td></tr><tr><td>メモリ</td><td>12GB（8GB×1、4GB×1）</td></tr><tr><td>SSD</td><td>500GB</td></tr><tr><td>GPU</td><td>Intel HD Graphics</td></tr><tr><td>OS</td><td>Windows 8 → 8.1 → 10（不安定）</td></tr></tbody></table><h2 id="初GPU！"><a href="#初GPU！" class="headerlink" title="初GPU！"></a>初GPU！</h2><p>新しいパソコンの目玉は、GPU ですね。<br>1050 Ti のマシンと迷ったのですが、お得な 1060 のこっちのマシンにしました。<br>これがかなり役に立っています。</p><h3 id="ゲームがやはり速い"><a href="#ゲームがやはり速い" class="headerlink" title="ゲームがやはり速い"></a>ゲームがやはり速い</h3><p><a href="http://www.flickr.com/photos/126344033@N06/27265660529" title="besiege-60fps" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4528/27265660529_b8e8911e54_z.jpg" alt="besiege-60fps"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>Cities Skylines や、Besiege などのゲームもかなりぬるぬる動きます。<br>（Cities Skylines は Mod 入れまくったせいで発展していくと 40fps くらいになっちゃうけど）</p><h3 id="動画編集も楽"><a href="#動画編集も楽" class="headerlink" title="動画編集も楽"></a>動画編集も楽</h3><p>修学旅行の DVD を作成するときは、AviUtl + NVEnc の組み合わせで<br>かなり速く 1080p60 の動画がエンコードできました。</p><h3 id="付属の-GeForce-Experience-が良い"><a href="#付属の-GeForce-Experience-が良い" class="headerlink" title="付属の GeForce Experience が良い"></a>付属の GeForce Experience が良い</h3><p><a href="http://www.flickr.com/photos/126344033@N06/27265662159" title="geforce-experience" target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4521/27265662159_cb3021d090_z.jpg" alt="geforce-experience"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>めちゃめちゃぬるぬる、低負荷でスクリーンキャプチャーできるので便利です。<br>（マウスポインターが録画されるのはやめてほしい・・）</p><h2 id="前のノートパソコンから性能が落ちた部分も"><a href="#前のノートパソコンから性能が落ちた部分も" class="headerlink" title="前のノートパソコンから性能が落ちた部分も"></a>前のノートパソコンから性能が落ちた部分も</h2><p>前のノートパソコンから劣った部分もありますね。<br>メモリは 4GB 減って、SSD もかなり減りました。<br>メモリは別に大丈夫ですが、容量は結構つらいです。</p><p><a href="http://www.flickr.com/photos/126344033@N06/39010582882" title="My storage is pinch." target="_blank" rel="noopener"><img src="https://farm5.staticflickr.com/4591/39010582882_32e33e19b5_z.jpg" alt="My storage is pinch."></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p><p>もう今も残り 8GB しかありません・・。<br>これはいつかハードディスク増設したい。</p><h2 id="Core-i7-と-i5-で迷った"><a href="#Core-i7-と-i5-で迷った" class="headerlink" title="Core i7 と i5 で迷った"></a>Core i7 と i5 で迷った</h2><p>そういえば Core i7 にしようか Core i5 にしようか迷いました。<br>プログラミングもするので、コンパイル速度とかで i7 のほうがいいのかなと思いましたが、<br>実際 i5 で全然問題ないです。</p><p>ぼくの分野が Web だから、そこまでの性能を必要としないというのも<br>あるかもしれませんが、全然ストレスはありません。</p><p>むしろ、前のノートパソコンの第３世代 i5 と今の第６世代 i5 の差がはっきりわかって、<br>今がめちゃくちゃ速く感じます。文字入力の速度も微妙に違う気がします。</p><h2 id="このパソコンの今後"><a href="#このパソコンの今後" class="headerlink" title="このパソコンの今後"></a>このパソコンの今後</h2><p>とりあえず容量は増やしたいですね。<br>そのあとメモリ増設とかかなあ。</p><p>そういえば家の奥のほうに 4:3 の古いディスプレイがあるので、<br>それ使ってマルチディスプレイとかもやってみたいです。</p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>今年出会った神曲１０選</title>
      <link href="/2017/12/13/2017-god-songs/"/>
      <url>/2017/12/13/2017-god-songs/</url>
      
        <content type="html"><![CDATA[<p>こんばんは。インフルエンザＢ型にかかりました shundroid です。</p><p>もうあと少しで 2017 年も終わりですね。早すぎっ</p><p>そして 2018 年が来るとすぐ受験かぁー・・がんばります。</p><p>さて今年はたくさんの神曲に出会うことができました。<br>修学旅行の DVD 作成とかで探しまくったからというのもありますがw</p><p>作曲してくださった方々、ありがとうございます。</p><p>それでは紹介していきます。<br>順位はつけづらいので、出会った順で紹介していきます。</p><h2 id="Clutterfunk"><a href="#Clutterfunk" class="headerlink" title="Clutterfunk"></a>Clutterfunk</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/D5uJOpItgNg" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>まず最初はこの曲。Geometry Dash というゲームのステージ１１で出会いました。<br>いきなり超個性的な曲になっちゃいましたが、すごく耳に残りますよね。<br>フィー↑っていう音が特徴的ですが曲とマッチしているというのがすごいです。</p><p>Geometry Dash については、下の記事を参照してください。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/12/28/bought-geometry-dash/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>このゲームの曲はすべて好きなので、紹介していくときりがないですｗ<br>１番最初の Stereo Madness も好きですが、これに出会ったのは・・2016年でしたｗ</p><p>ちなみに 10 ステージ目までクリアできました。<br>つまり、この Clutterfunk が使われている 11 ステージ目は・・クリアできなかったんです。。。<br>難しすぎます。挫折しました。そういう思い出もある曲です。</p><h2 id="ゼルダの伝説-ブレスオブザワイルド-メインテーマ"><a href="#ゼルダの伝説-ブレスオブザワイルド-メインテーマ" class="headerlink" title="ゼルダの伝説 ブレスオブザワイルド メインテーマ"></a>ゼルダの伝説 ブレスオブザワイルド メインテーマ</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/GjPidZXIuzs" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>前の曲から一気に雰囲気が変わりました。次はゼルダの伝説からです。<br>この曲も大好きです。どんどん曲調が変わっていくので、聴きごたえがあります。</p><p>気づけば、Nintendo Switch が発売されたのも今年だったんですね。<br>遠い昔のように思えます。あの衝撃もすごかったなあ。<br><strong>※持っていないです。</strong></p><h2 id="you"><a href="#you" class="headerlink" title="you"></a>you</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/mkyAysapNIg" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>you という曲も実は今年初めて知りましたｗ<br>というのも、ゼルダの伝説　ブレスオブザワイルドの実況をしている、<br><a href="https://www.youtube.com/channel/UCA2h3NOSWdD_AUnHLdA3XKA" target="_blank" rel="noopener">ゼルダのセナさん</a>という人が作った MAD にこの曲が使われていたからです。</p><p>このアレンジが特に好きです。連弾版ともちょっと違いますね。この MAD も好きです。<br>ひぐらしは怖いです（ブルブル）</p><h2 id="Take-Your-Way"><a href="#Take-Your-Way" class="headerlink" title="Take Your Way"></a>Take Your Way</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/zZ-NG0kZURg" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>次はこの曲です。<br>セカオワの Fukase がボーカルをしています。<br>爽快感があふれる曲なので、修学旅行のDVD の出だしで使いました。<br>作曲者は Tell your world を作った人と同じらしいです。</p><h2 id="Captain-Jack-Grandale-Remix"><a href="#Captain-Jack-Grandale-Remix" class="headerlink" title="Captain Jack (Grandale Remix)"></a>Captain Jack (Grandale Remix)</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/-5XxJ4XBm50" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>続いてはこの曲。<br>知っている方もいるかと思いますが、出会いはマインクラフト荒らしたったｗｗです。<br>テンションが高いので、修学旅行のＤＶＤの２日目夜に使用しました。</p><h2 id="Zen"><a href="#Zen" class="headerlink" title="Zen"></a>Zen</h2><iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/268520740&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"></iframe><p>次はこの曲です。<br>流れるように続く音がすごくきれいですよね。<br>環境音も好きです。</p><p>作曲者は Warptech で、<a href="https://youtu.be/ZynbJWCjJxg" target="_blank" rel="noopener">Daydream</a> という曲で知りました。</p><p>※ SoundCloud の埋め込みは、uBlock などの広告ブロッカーを使っていると表示されないことがあります。</p><h2 id="Athemos"><a href="#Athemos" class="headerlink" title="Athemos"></a>Athemos</h2><iframe width="100%" height="300" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/242114704&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true&amp;visual=true"></iframe><p>次の曲も Warptech さんの曲です。<br>神秘的な感じと明るい感じがすごく好きです。</p><h2 id="Unravel-Piano"><a href="#Unravel-Piano" class="headerlink" title="Unravel - Piano"></a>Unravel - Piano</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/sEQf5lcnj_o" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>次は東京喰種の Unravel のピアノアレンジです。<br>このアレンジが好きなんです。<br>この人うますぎでしょ。かっこいいなあ・・<br>強弱が激しいところが特に好きです。</p><h2 id="Megalovania"><a href="#Megalovania" class="headerlink" title="Megalovania"></a>Megalovania</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/c5daGZ96QGU" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>次は UNDERTALE からの曲です。<br>ぽこにゃんという実況者とゼルダのセナさんが、UNDERTALE の実況をはじめたので知りました。<br>UNDERTALE 自体は知っていましたが、怖そうでなかなか手が出せませんでした。というか実際結構怖い。</p><h2 id="The-Everlasting-Guilty-Crown"><a href="#The-Everlasting-Guilty-Crown" class="headerlink" title="The Everlasting Guilty Crown"></a>The Everlasting Guilty Crown</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/vNuN8xH3X74" frameborder="0" gesture="media" allow="encrypted-media" allowfullscreen></iframe><p>最後に出会ったのは、The Everlasting Guilty Crown です。<br>ギルティクラウンというアニメの曲らしいのですが、アニメは見ていませんでした。<br><a href="https://www.youtube.com/watch?v=FS5qybVUtW8" target="_blank" rel="noopener">まらしぃが弾いていた</a>ので知りました。かっこいい。泣ける。</p><p>作曲者は ryo さんらしいですね。Odds &amp; Ends を作った人と同じ人です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こんな感じで今年も多くの神曲に出会うことができました。<br>来年、2018年もたくさんの神曲が訪れますように。</p>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> music </tag>
            
            <tag> youtube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>受験生ですがインフルエンザになりました。</title>
      <link href="/2017/12/13/flu-2017/"/>
      <url>/2017/12/13/flu-2017/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><p>9か月ぶりですね・・・・お久しぶりです。</p><p>実は今年ぼくは受験生になってしまい、とても忙しくて更新できませんでしたすみません。<br>事前に書いておけばよかったですね・・</p><p>しかしこの度、受験生だというのにかかわらず、インフルエンザになっちゃいましたｗ<br>それで時間があるので、ブログを更新しようと思います。</p><p>熱がでたのは月曜日。夕方すぐに病院に行って検査をしたら、<br>インフルエンザＢ型とのこと。</p><p>最低５日間は出席停止なので、１週間丸まる学校がつぶれることに。<br>うれしさ 63％。かなしさ 37％ですね。</p><p>実は３年くらいもうインフルエンザにかかっていなかったので、<br>けっこうびっくりです。</p><p>１，２か月後にかかるよりはましかもしれませんが。。</p><h2 id="インフルエンザの時にやっていること"><a href="#インフルエンザの時にやっていること" class="headerlink" title="インフルエンザの時にやっていること"></a>インフルエンザの時にやっていること</h2><p>暇なので、いろんなことをやっています。</p><h3 id="Spacechem"><a href="#Spacechem" class="headerlink" title="Spacechem"></a>Spacechem</h3><p>期末テスト後に買ったゲームで、めちゃくちゃ面白いです。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://store.steampowered.com/app/92800/SpaceChem/?l=japanese" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>見つけた瞬間やりたくて買わずにはいられなかったので、すぐ定価で買いましたが、<br>その数日後にオータムセールでめちゃめちゃ安くなるなんて聞いてなかったよーーーーー</p><p>最後のステージまで行きました。今奮闘中です。</p><p>クリアしたらたぶん記事を書くと思います。</p><p><strong>追記（2017/12/31）: クリアしました！</strong><br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/31/spacechem-cleared-end-of-the-line/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h3 id="東京都立高等学校入試問題そっくりもぎを、作った。"><a href="#東京都立高等学校入試問題そっくりもぎを、作った。" class="headerlink" title="東京都立高等学校入試問題そっくりもぎを、作った。"></a>東京都立高等学校入試問題そっくりもぎを、作った。</h3><p>インフルエンザの直前にやったのですが、<br>都立高校入試問題の理科の問題形式をそっくりまねして、<br>問題だけ自校作成レベル（あるとしたら）の難易度にしてみました。</p><p>かなりそっくりです。自分でもびっくり。<br>解答用紙もそっくりに作りました。マークシートで。<br>学校に来ていた時に友達に渡して、解いてもらいました。<br>その後ぼくは保健室に行って教室に帰ることはなかったので結果はわかりませんｗ</p><p>自分が出会った難問をふんだんに盛り込んで、テストの形式も熟知できたので、<br>よいテスト対策になったことでしょう。（・・・？？？？）</p><h3 id="動画を上げた"><a href="#動画を上げた" class="headerlink" title="動画を上げた"></a>動画を上げた</h3><p>撮影は今年の初めにしていたのですが、編集して動画を上げました。<br>Besiege というゲームで、２つのブロックでどれだけたくさんのステージを解けるのかに挑戦しました。<br>字幕だけだと寂しかったので、ゆっくり実況をつけました。</p><p>Youtube:<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://www.youtube.com/watch?v=61WctOt4ghk" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>Niconico:<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.nicovideo.jp/watch/sm32410320" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>Besiege については、下の記事をご覧ください。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/12/26/bought-besiege/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h3 id="テレビを見た"><a href="#テレビを見た" class="headerlink" title="テレビを見た"></a>テレビを見た</h3><p>たまっていた<a href="http://www.ntv.co.jp/q/" target="_blank" rel="noopener">イッテQ</a>と、<a href="http://www.tv-asahi.co.jp/geki_rare/#/?category=variety" target="_blank" rel="noopener">激レアさんを連れてきた。</a>を見ました。<br>インフルエンザは録画機器の味方ですね。どんどん空き容量が増えていきます。</p><h3 id="ブログを久しぶりに上げた。"><a href="#ブログを久しぶりに上げた。" class="headerlink" title="ブログを久しぶりに上げた。"></a>ブログを久しぶりに上げた。</h3><p>これです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>正直暇ですが、ずっと忙しかったので、いい感じの休息になったのかもしれませんね。<br>皆さんも体調にはお気を付けください。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> 日記 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> youtube </tag>
            
            <tag> besiege </tag>
            
            <tag> diary </tag>
            
            <tag> niconico </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron-vue で生成したプロジェクトで electron-connect を使う</title>
      <link href="/2017/03/24/electron-vue-electron-connect/"/>
      <url>/2017/03/24/electron-vue-electron-connect/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><p>今回は electron-vue で生成したプロジェクトで、<br>BrowserProcess 側、RendererProcess 側、両方のコードのリロードをさせる方法を紹介します。</p><p>コードのリロードは、electron-connect を利用します。<br>こちらで紹介されていました。すごく便利です。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://qiita.com/Quramy/items/90d61ff37ca1b95a7f6d" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p><a href="https://github.com/shundroid/electron-connect-vue-example" target="_blank" rel="noopener">Github</a> にて公開しています。</p><h2 id="electron-connect-に対応させる"><a href="#electron-connect-に対応させる" class="headerlink" title="electron-connect に対応させる"></a>electron-connect に対応させる</h2><h2 id="プロジェクトの生成"><a href="#プロジェクトの生成" class="headerlink" title="プロジェクトの生成"></a>プロジェクトの生成</h2><p>electron-vue でのプロジェクトの生成方法は、下の記事がわかりやすかったので参考にしてください。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://qiita.com/SatoTakumi/items/fd79672d7eb8a9b4a0bb" width="300" height="150" frameborder="0" scrolling="no"></iframe><p><a href="http://www.flickr.com/photos/126344033@N06/33618092015" title="generate-electron-vue" target="_blank" rel="noopener"><img src="https://farm3.staticflickr.com/2839/33618092015_cd2249cd0d_o.png" alt="generate-electron-vue"></a></p><p>この記事では、↑の設定で生成しました。</p><h3 id="npm-でインストール"><a href="#npm-でインストール" class="headerlink" title="npm でインストール"></a>npm でインストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev electron-connect</span><br></pre></td></tr></table></figure><h3 id="tasks-runner-js-を変更"><a href="#tasks-runner-js-を変更" class="headerlink" title="tasks/runner.js を変更"></a>tasks/runner.js を変更</h3><p>これは、 <code>npm run dev</code> したときに実行されるファイルです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/tasks/runner.js</span></span><br><span class="line"><span class="comment">+++ b/tasks/runner.js</span></span><br><span class="line"><span class="meta">@@ -3,6 +3,8 @@</span></span><br><span class="line"> const config = require('../config')</span><br><span class="line"> const exec = require('child_process').exec</span><br><span class="line"> const treeKill = require('tree-kill')</span><br><span class="line"><span class="addition">+const electronConnect = require('electron-connect').server.create()</span></span><br><span class="line"><span class="addition">+const fs = require('fs')</span></span><br><span class="line"></span><br><span class="line"> let YELLOW = '\x1b[33m'</span><br><span class="line"> let BLUE = '\x1b[34m'</span><br><span class="line">@@ -33,10 +35,14 @@ function run (command, color, name) &#123;</span><br><span class="line">      * Start electron after successful compilation</span><br><span class="line">      * (prevents electron from opening a blank window that requires refreshing)</span><br><span class="line">      */</span><br><span class="line"><span class="deletion">-    if (/Compiled/g.test(data.toString().trim().replace(/\n/g, '\n' + repeat(' ', command.length + 2))) &amp;&amp; !isElectronOpen) &#123;</span></span><br><span class="line"><span class="deletion">-      console.log(`$&#123;BLUE&#125;Starting electron...\n$&#123;END&#125;`)</span></span><br><span class="line"><span class="deletion">-      run('cross-env NODE_ENV=development electron app/src/main/index.dev.js', BLUE, 'electron')</span></span><br><span class="line"><span class="deletion">-      isElectronOpen = true</span></span><br><span class="line"><span class="addition">+    if (/Compiled/g.test(data.toString().trim().replace(/\n/g, '\n' + repeat(' ', command.length + 2)))) &#123;</span></span><br><span class="line"><span class="addition">+      if (!isElectronOpen) &#123;</span></span><br><span class="line"><span class="addition">+        console.log(`$&#123;BLUE&#125;Starting electron...\n$&#123;END&#125;`)</span></span><br><span class="line"><span class="addition">+        electronConnect.start()</span></span><br><span class="line"><span class="addition">+        isElectronOpen = true</span></span><br><span class="line"><span class="addition">+      &#125; else &#123;</span></span><br><span class="line"><span class="addition">+        electronConnect.reload()</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">@@ -54,3 +60,7 @@ function exit (code) &#123;</span><br><span class="line"></span><br><span class="line"> console.log(`$&#123;YELLOW&#125;Starting webpack-dev-server...\n$&#123;END&#125;`)</span><br><span class="line"> run(`webpack-dev-server --hot --colors --config webpack.renderer.config.js --port $&#123;config.port&#125; --content-base app/dist`, YELLOW, 'webpack')</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+let timeoutId = null</span></span><br><span class="line"><span class="addition">+fs.watch('app/src/main', () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+  if (!timeoutId) &#123;</span></span><br><span class="line"><span class="addition">+    electronConnect.restart()</span></span><br><span class="line"><span class="addition">+    timeoutId = setTimeout(() =&gt; &#123; timeoutId = null &#125;, 500)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"><span class="addition">+&#125;)</span></span><br></pre></td></tr></table></figure><p>普段僕はダブルクォーテーション＆セミコロンを付けて開発しますが、<br>ここは合わせます。</p><p>変更点としては、</p><ul><li><p><code>isElectronOpen</code> が false のとき、electronConnect を start します。</p><pre><code>*   この時 Electron が勝手に起動されます。</code></pre><ul><li>cross-env の設定をしていないように見えますが、index.dev.js を読み込んだ時に NODE_ENV を <code>production</code> にするようになっているので不要だと思います。</li></ul></li><li><code>isElectronOpen</code> が true のときは、electronConnect を reload します。</li><li>BrowserProcess 側で動くコードは変更されたら restart します。</li></ul><h3 id="package-json-を変更"><a href="#package-json-を変更" class="headerlink" title="package.json を変更"></a>package.json を変更</h3><p>electron-connect では、直接ファイルを指定できないので、<br>代わりに <code>package.json</code> で指定しましょう。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/package.json</span></span><br><span class="line"><span class="comment">+++ b/package.json</span></span><br><span class="line"><span class="meta">@@ -2,6 +2,7 @@</span></span><br><span class="line">   "name": "electron-test",</span><br><span class="line">   "version": "0.0.0",</span><br><span class="line">   "description": "An electron-vue project",</span><br><span class="line"><span class="addition">+  "main": "app/src/main/index.dev.js",</span></span><br><span class="line">   "scripts": &#123;</span><br><span class="line">     "build": "node tasks/release.js",</span><br><span class="line">     "build:clean": "cross-env PLATFORM_TARGET=clean node tasks/release.js",</span><br></pre></td></tr></table></figure><p><code>main</code> プロパティを指定しました。</p><h3 id="app-src-renderer-main-js-を変更"><a href="#app-src-renderer-main-js-を変更" class="headerlink" title="app/src/renderer/main.js を変更"></a>app/src/renderer/main.js を変更</h3><p>次のように変更します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/app/src/renderer/main.js</span></span><br><span class="line"><span class="comment">+++ b/app/src/renderer/main.js</span></span><br><span class="line">@@ -10,3 +10,7 @@ import App from './App'</span><br><span class="line"> new Vue(&#123;</span><br><span class="line">   ...App</span><br><span class="line"> &#125;).$mount('#app')</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+if (process.env.NODE_ENV === 'production') &#123;</span></span><br><span class="line"><span class="addition">+  require('electron-connect').client.create()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br></pre></td></tr></table></figure><h3 id="webpack-renderer-config-js-を変更"><a href="#webpack-renderer-config-js-を変更" class="headerlink" title="webpack.renderer.config.js を変更"></a>webpack.renderer.config.js を変更</h3><p>依存に指定されていないモジュールによるエラーが起きるので、モジュールを除外します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- a/webpack.renderer.config.js</span></span><br><span class="line"><span class="comment">+++ b/webpack.renderer.config.js</span></span><br><span class="line">@@ -16,7 +16,11 @@ let rendererConfig = &#123;</span><br><span class="line">   entry: &#123;</span><br><span class="line">     renderer: path.join(__dirname, 'app/src/renderer/main.js')</span><br><span class="line">   &#125;,</span><br><span class="line"><span class="deletion">-  externals: Object.keys(pkg.dependencies || &#123;&#125;),</span></span><br><span class="line"><span class="addition">+  externals: Object.keys(pkg.dependencies || &#123;&#125;).concat([</span></span><br><span class="line"><span class="addition">+    "spawn-sync",</span></span><br><span class="line"><span class="addition">+    "utf-8-validate",</span></span><br><span class="line"><span class="addition">+    "bufferutil"</span></span><br><span class="line"><span class="addition">+  ]),</span></span><br><span class="line">   module: &#123;</span><br><span class="line">     rules: [</span><br><span class="line">       &#123;</span><br></pre></td></tr></table></figure><h3 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h3><p><a href="http://www.flickr.com/photos/126344033@N06/33461505562" title="ok-electron-vue" target="_blank" rel="noopener"><img src="https://farm4.staticflickr.com/3945/33461505562_1e598cbd13_o.png" alt="ok-electron-vue"></a></p><h2 id="改善できる点"><a href="#改善できる点" class="headerlink" title="改善できる点"></a>改善できる点</h2><ul><li>BrowserProcess 側で動くコードを、runner.js で watch していますが、これは <code>main</code> ディレクトリ直下のファイルしか監視していません。子ディレクトリも監視するには、glob を使うなどする必要があります。</li><li>electron-connect には、reload 機能も含まれているので、webpack-dev-server を使う必要がなくなりました。<ul><li>これについては、今度書こうと思います。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Javascript】線の点・太さ（lineWidth）から、輪郭の座標を算出する</title>
      <link href="/2017/03/11/linewidth-points/"/>
      <url>/2017/03/11/linewidth-points/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。更新が遅れてしまいすみません。</p><p>あけましておめでとうございます。今年もよろしくお願いします。</p><p>今回は、線の点・太さから、輪郭の座標をとる方法を紹介します。<br>HTML5 Canvas の <code>stroke()</code> メソッドを、SVG などを使わず、自分で実装する感じです。</p><p>なお、自分で考えて手探りでやってみた方法なので、もっと効率のいい方法があるかもしれません。</p><h2 id="なぜやりたいのか"><a href="#なぜやりたいのか" class="headerlink" title="なぜやりたいのか"></a>なぜやりたいのか</h2><p>matter.js というライブラリがあり、<br>それを使って、マウスで書いた線を Body に変換したかったのですが、<br>線を Body に直接することができなかったので、作ろうと思いました。</p><p>Constant とか使えばできそうですが、面白そうなのでやってみます。</p><h2 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h2><h3 id="始点・終点"><a href="#始点・終点" class="headerlink" title="始点・終点"></a>始点・終点</h3><p>始点は１つ後の点から現在の点、終点は現在の点から１つ前の点を引いて、<br>逆三角関数でラジアンにし、それに垂直な方向になるように輪郭線を打ちます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineWidth = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> points = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">30</span>, <span class="attr">y</span>: <span class="number">50</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">120</span>, <span class="attr">y</span>: <span class="number">150</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> outline1 = [];</span><br><span class="line"><span class="keyword">var</span> outline2 = [];</span><br><span class="line"></span><br><span class="line">points.forEach(<span class="function">(<span class="params">point, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 始点</span></span><br><span class="line">    <span class="comment">// Math.PI / 2 は degree で 90°</span></span><br><span class="line">    <span class="keyword">var</span> rad = <span class="built_in">Math</span>.atan2(points[index + <span class="number">1</span>].y - point.y, points[index + <span class="number">1</span>].x - point.x) - <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> sin = <span class="built_in">Math</span>.sin(rad) * lineWidth;</span><br><span class="line">    <span class="keyword">var</span> cos = <span class="built_in">Math</span>.cos(rad) * lineWidth;</span><br><span class="line">    outline1.push(&#123; <span class="attr">x</span>: point.x + cos, <span class="attr">y</span>: point.y + sin &#125;);</span><br><span class="line">    outline2.push(&#123; <span class="attr">x</span>: point.x - cos, <span class="attr">y</span>: point.y - sin &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === points.length - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 終点</span></span><br><span class="line">    <span class="keyword">var</span> rad = <span class="built_in">Math</span>.atan2(point.y - points[index - <span class="number">1</span>].y, point.x - points[index - <span class="number">1</span>].x) - <span class="built_in">Math</span>.PI / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> sin = <span class="built_in">Math</span>.sin(rad) * lineWidth;</span><br><span class="line">    <span class="keyword">var</span> cos = <span class="built_in">Math</span>.cos(rad) * lineWidth;</span><br><span class="line">    outline1.push(&#123; <span class="attr">x</span>: point.x + cos, <span class="attr">y</span>: point.y + sin &#125;);</span><br><span class="line">    outline2.push(&#123; <span class="attr">x</span>: point.x - cos, <span class="attr">y</span>: point.y - sin &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p data-height="284" data-theme-id="0" data-slug-hash="LWyNZp" data-default-tab="js,result" data-user="shundroid" data-embed-version="2" data-pen-title="Drawing outlines of a line" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/LWyNZp/" target="_blank" rel="noopener">Drawing outlines of a line</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="途中の点"><a href="#途中の点" class="headerlink" title="途中の点"></a>途中の点</h3><p>いやー、これが難しかったです・・。<br>方法としては、輪郭線は角の二等分線上で交わるので、<br>そこで、sinθ = lineWidth となるときの cos をとってくる感じです。</p><p>求めた後、回転移動させるのですが、まずは移動させなくてもいいパターンでやってみます。</p><p>※省略部分は↑のコードと変わらない部分です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineWidth = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> points = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">150</span>, <span class="attr">y</span>: <span class="number">50</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">points.forEach(<span class="function">(<span class="params">point, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === points.lenght - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rad1 = <span class="built_in">Math</span>.atan2(points[index - <span class="number">1</span>].y - point.y, points[index - <span class="number">1</span>].x - point.x);</span><br><span class="line">    <span class="keyword">var</span> rad2 = <span class="built_in">Math</span>.atan2(points[index + <span class="number">1</span>].y - point.y, points[index + <span class="number">1</span>].x - point.x);</span><br><span class="line">    <span class="keyword">var</span> rad = (rad2 - rad1) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">Math</span>.cos(rad) * lineWidth / <span class="built_in">Math</span>.sin(rad);</span><br><span class="line">    <span class="keyword">var</span> y = lineWidth;</span><br><span class="line">    outline1.push(&#123; <span class="attr">x</span>: point.x + x, <span class="attr">y</span>: point.y + y &#125;);</span><br><span class="line">    outline2.push(&#123; <span class="attr">x</span>: point.x - x, <span class="attr">y</span>: point.y - y &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p data-height="265" data-theme-id="0" data-slug-hash="NpjNbM" data-default-tab="js,result" data-user="shundroid" data-embed-version="2" data-pen-title="Drawing outlines of a line 2" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/NpjNbM/" target="_blank" rel="noopener">Drawing outlines of a line 2</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><h3 id="回転移動させる"><a href="#回転移動させる" class="headerlink" title="回転移動させる"></a>回転移動させる</h3><p>これでできたっぽいですが、これは入ってくる線の角度が 0° だったときのみ動きます。<br>それ以外で動かすようにするには、いったん入ってくる線を基準にして求め、それを回転移動させる必要があります。</p><p>回転移動については下のサイトが詳しいです。参考にしてみてください。<br><a href="http://www.geisya.or.jp/~mwm48961/kou2/linear_image3.html" target="_blank" rel="noopener">http://www.geisya.or.jp/~mwm48961/kou2/linear_image3.html</a></p><p><code>rad1</code> を基準にしたので、 <code>rad1</code> の分だけ回転させればいいのです。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lineWidth = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> points = [</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">200</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">100</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">x</span>: <span class="number">150</span>, <span class="attr">y</span>: <span class="number">50</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line">points.forEach(<span class="function">(<span class="params">point, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === points.lenght - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> rad1 = <span class="built_in">Math</span>.atan2(points[index - <span class="number">1</span>].y - point.y, points[index - <span class="number">1</span>].x - point.x);</span><br><span class="line">    <span class="keyword">var</span> rad2 = <span class="built_in">Math</span>.atan2(points[index + <span class="number">1</span>].y - point.y, points[index + <span class="number">1</span>].x - point.x);</span><br><span class="line">    <span class="keyword">var</span> rad = (rad2 - rad1) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">Math</span>.cos(rad) * lineWidth / <span class="built_in">Math</span>.sin(rad);</span><br><span class="line">    <span class="keyword">var</span> y = lineWidth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rx = x * <span class="built_in">Math</span>.cos(rad1) - y * <span class="built_in">Math</span>.sin(rad1);</span><br><span class="line">    <span class="keyword">var</span> ry = x * <span class="built_in">Math</span>.sin(rad1) + y * <span class="built_in">Math</span>.cos(rad1);</span><br><span class="line">    outline1.push(&#123; <span class="attr">x</span>: point.x + rx, <span class="attr">y</span>: point.y + ry &#125;);</span><br><span class="line">    outline2.push(&#123; <span class="attr">x</span>: point.x - rx, <span class="attr">y</span>: point.y - ry &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="QpvNvV" data-default-tab="js,result" data-user="shundroid" data-embed-version="2" data-pen-title="Drawing outlines of a line 3" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/QpvNvV/" target="_blank" rel="noopener">Drawing outlines of a line 3</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>これでできました！間の点はいくつあってもできます。</p><p></p><p data-height="265" data-theme-id="0" data-slug-hash="qrmZjb" data-default-tab="js,result" data-user="shundroid" data-embed-version="2" data-pen-title="Drawing outlines of a line 4" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/qrmZjb/" target="_blank" rel="noopener">Drawing outlines of a line 4</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>random にやっているので、急カーブになった場合、輪郭がちょうとんがります。<br>これは↓でもある、miterLimit を早く実装して直したいです。</p><h2 id="考えた別の方法"><a href="#考えた別の方法" class="headerlink" title="考えた別の方法"></a>考えた別の方法</h2><h3 id="線を直線の式に変えて、連立方程式で交点を出す"><a href="#線を直線の式に変えて、連立方程式で交点を出す" class="headerlink" title="線を直線の式に変えて、連立方程式で交点を出す"></a>線を直線の式に変えて、連立方程式で交点を出す</h3><p>中学２年生で習うことでできそうですが、<br>どの線とどの線が交わるのかを見つけるのが超難しそうだったのでやめました。</p><h2 id="今後やりたいこと"><a href="#今後やりたいこと" class="headerlink" title="今後やりたいこと"></a>今後やりたいこと</h2><h3 id="lineCap、lineJoin、miterLimit-を実装する"><a href="#lineCap、lineJoin、miterLimit-を実装する" class="headerlink" title="lineCap、lineJoin、miterLimit を実装する"></a>lineCap、lineJoin、miterLimit を実装する</h3><p>Canvas にある、これらのプロパティも実装してみたいです。<br>miterLimit は今がんばっています。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
            <tag> math </tag>
            
            <tag> matter-js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>クリスマスプレゼントで Geometry Dash を 60％ OFF で買った 【第二弾】</title>
      <link href="/2016/12/28/bought-geometry-dash/"/>
      <url>/2016/12/28/bought-geometry-dash/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><p>Besiege に続き、クリスマスプレゼントで、<br>もう一つゲームを買いました。</p><p>Geometry Dash です。</p><p><a href="http://www.flickr.com/photos/126344033@N06/31925732705" title="geometry-dash-steam" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/762/31925732705_8f9b98db8f_o.png" alt="geometry-dash-steam"></a></p><p>Steam の Winter Sale で、60% OFF、159円 で売っていました！</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://store.steampowered.com/app/322170/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>さっそくプレイしたのですが、これが超絶難しいです・・・・</p><p><a href="http://www.flickr.com/photos/126344033@N06/31888832686" title="geometry-dash" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/363/31888832686_53ff9c850f_o.png" alt="geometry-dash"></a></p><p>このようなステージを、ジャンプで進んでいくのですが、<br>一回でもミスったら最初からになってしまう、という、<br>かなりの鬼畜ゲームなのです。</p><p>最初の５ステージくらいは簡単ですが、<br>徐々にロケット・半重力などのギミックが増えていき、難易度も上がっていきます。</p><p><a href="http://www.flickr.com/photos/126344033@N06/31086019564" title="geometry-dash-11" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/593/31086019564_a799a67ba0_o.png" alt="geometry-dash-11"></a><br>１１個目のステージをちょっとやってみましたが、<br>途中で進行方向が変わったりしてよくわからなかったので開始 10 秒くらいで挫折しましたｗ</p><h2 id="コツ"><a href="#コツ" class="headerlink" title="コツ"></a>コツ</h2><p>Normal Mode のほかに、Practice Mode という、<br>ミスっても途中から始められるモードがあるので、<br>それで何回か練習した後、Normal Mode でやると、<br>割と楽です。</p><h2 id="ちょっと反応が遅い？"><a href="#ちょっと反応が遅い？" class="headerlink" title="ちょっと反応が遅い？"></a>ちょっと反応が遅い？</h2><p>曲のリズムにステージがあっているところがありますが、<br>PC のスペックの問題なのか、ジャンプの反応が 0.25 秒くらい遅いです。<br>操作方法で、マウス・キーボード・コントローラーがありますが、<br>コントローラーが一番やりやすいと思います。</p><p>難しいですが、クリアできた時の達成感は半端じゃないので、<br>これからも続けてやっていこうと思います。</p><h2 id="第一弾はこちら"><a href="#第一弾はこちら" class="headerlink" title="第一弾はこちら"></a>第一弾はこちら</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/12/26/bought-besiege/" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>クリスマスプレゼントで Besiege を 30％ OFF で買った 【第一弾】</title>
      <link href="/2016/12/26/bought-besiege/"/>
      <url>/2016/12/26/bought-besiege/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。メリークリスマス！！（１日遅れ）</p><p>いやー、今年は旧正月になる前にクリスマスプレゼントを買えましたｗ</p><p>去年はなんか gdgd してたらセールが終わっちゃって、大変でした・・。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/02/06/bought-cities-skylines/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>今年は、Steam でセールになっている安いゲームをたくさん買うことにしました。</p><p>第一弾は Besiege です！</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://store.steampowered.com/app/346010/?l=japanese" width="300" height="150" frameborder="0" scrolling="no"></iframe><p><a href="http://www.flickr.com/photos/126344033@N06/31845613446" title="besiege-winter-sale" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5607/31845613446_f630b7bf84_o.png" alt="besiege-winter-sale"></a></p><p>Winter Sale 中なので、30% OFF で、558 円になっています！！</p><p>というわけで、さっそくプレイしました。</p><h2 id="動作を軽くした"><a href="#動作を軽くした" class="headerlink" title="動作を軽くした"></a>動作を軽くした</h2><p>去年の Cities: Skylines と同様、ぼくの PC だとちょっと重かったです。<br>Windows 10 の都合上、GPU をオフにしているのが原因だと思うんですけど・・・・</p><p>とりあえず、設定を変更して軽くしました。</p><p><a href="http://www.flickr.com/photos/126344033@N06/31883623405" title="besiege-lite" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/415/31883623405_eeed84e8ac_o.png" alt="besiege-lite"></a></p><p>ほとんどすべて無効化しました。</p><p>SSAO はないとグラフィックがわるくなってしまったのでつけました。<br>SHADOWS は空中戦の時につけるようにします。</p><h2 id="いろいろ作ってみた"><a href="#いろいろ作ってみた" class="headerlink" title="いろいろ作ってみた"></a>いろいろ作ってみた</h2><p><a href="http://www.flickr.com/photos/126344033@N06/31883778855" title="besiege-catapult" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/635/31883778855_6a1c44fae2_o.png" alt="besiege-catapult"></a><br>こんなのとか、</p><p><a href="http://www.flickr.com/photos/126344033@N06/31736004502" title="besiege-bom-car" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/718/31736004502_b39d24756a_o.png" alt="besiege-bom-car"></a><br>こんなのとか、</p><p><a href="http://www.flickr.com/photos/126344033@N06/31042982614" title="besiege-drone" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/761/31042982614_854962bc20_o.png" alt="besiege-drone"></a></p><p>こんなのを作って、とりあえず、ZONE 22 までクリアしました。</p><p>どうやって作ったのかなどは、また今度紹介します！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>Besiege 超楽しいです！<br>しかし、ずっとこれをやっていると、時間がたつのが早くて、<br>冬休みがあっという間に終わってしまいそうなので、<br>ほどほどにプレイするようにします！！</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> besiege </tag>
            
            <tag> gpu </tag>
            
            <tag> windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MIDI】セカオワの Error の間奏を作った</title>
      <link href="/2016/12/24/made-sno-error/"/>
      <url>/2016/12/24/made-sno-error/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/vxkOF4BpI-c" frameborder="0" allowfullscreen></iframe><p>今回は SEKAI NO OWARI 「Error」の間奏を作りました。<br>音がピコピコしていて、すごく好きな部分です。</p><p>メロディ部分は音が多すぎて、自分で全部わからなかったので、</p><p><a href="https://www.youtube.com/watch?v=gX3keesEbp4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=gX3keesEbp4</a></p><p>上の動画を参考にし、それをピコピコ音に変えました。</p><p>ベースとドラム、最初の音は自分で耳コピしました。</p><p>よかったら聞いてみてください。</p>]]></content>
      
      
      <categories>
          
          <category> MIDI </category>
          
          <category> Made by me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> midi </tag>
            
            <tag> sekaowa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ハルスター・アクション（beta）</title>
      <link href="/2016/12/23/halstar/"/>
      <url>/2016/12/23/halstar/</url>
      
        <content type="html"><![CDATA[<p>2014年～2015年にかけて作っていたゲームです。<br>Unity で作りました。イラストは友達が作りました。</p><h2 id="ルール"><a href="#ルール" class="headerlink" title="ルール"></a>ルール</h2><p>マリオのようなアクションゲームです。<br>ステージにあるぶどうを集めたりしながら、ゴールを目指します。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul><li>←・→ : 移動</li><li>SPACE : ジャンプ<br>ゲームを進めると、そのほかのアクションができるようになります。</li></ul><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener"><img src="https://i.creativecommons.org/l/by-nc-nd/4.0/88x31.png" alt="クリエイティブ・コモンズ・ライセンス"></a><br>この 作品 は <a href="http://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="noopener">クリエイティブ・コモンズ 表示 - 非営利 - 改変禁止 4.0 国際 ライセンスの下に提供されています。</a></p><p><a href="https://drive.google.com/open?id=0B7L2nQ0Hs7LYYk55dElkSEIwS2c" target="_blank" rel="noopener">ダウンロード</a><br>上のリンクを開き、右上のダウンロードボタンからダウンロードしてください（Zip形式）<br>解凍し、 <code>game.exe</code> を開くと、ゲームが起動します。</p><p><strong>※このゲームはかなりの鬼畜ゲームだそうです。<br>　製作者によりクリアできることは確認されておりますが（W0を除く）、<br>　難しいそうです。がんばってください！！</strong><br>※このゲームは beta 版です。ステージに不具合がある場合があります。<br>　また、現在 Unity でなく、別のフレームワークでの開発を試しています。<br>　更新はそちらで行うかもしれません。</p><h2 id="工夫したところ"><a href="#工夫したところ" class="headerlink" title="工夫したところ"></a>工夫したところ</h2><h3 id="ステージのシーン"><a href="#ステージのシーン" class="headerlink" title="ステージのシーン"></a>ステージのシーン</h3><p>ステージ（W1-1、W1-2）ごとにシーンを作るのではなく、<br>ステージの状態を CSV で保存し、それを利用するようにしました。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Game </category>
          
          <category> Programming </category>
          
          <category> Made by me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> halstar </tag>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【MIDI】「クロノ・トリガー」を耳コピしてみた</title>
      <link href="/2016/12/05/copied-chrono-trigger/"/>
      <url>/2016/12/05/copied-chrono-trigger/</url>
      
        <content type="html"><![CDATA[<iframe width="560" height="315" src="https://www.youtube.com/embed/bGmoRRp4E_8" frameborder="0" allowfullscreen></iframe><p>MIDI 系では初めて動画を投稿しました。<br>Domino を使用して、クロノ・トリガーの名曲「クロノ・トリガー」を耳コピしました。</p><p>後半の部分は、切ないイメージがきちんと出るように、<br>主旋律をストリングスとフルートで演奏するように工夫しました。</p><p>よろしければお聴きくださいー</p>]]></content>
      
      
      <categories>
          
          <category> MIDI </category>
          
          <category> Made by me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> domino </tag>
            
            <tag> midi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Emscripten】 C++ でJSの関数を関数ポインタとして使う</title>
      <link href="/2016/12/04/emscripten-cpp-js-fn/"/>
      <url>/2016/12/04/emscripten-cpp-js-fn/</url>
      
        <content type="html"><![CDATA[<p>ものすごく久しぶりの投稿となってしまいました。すみません。</p><p>今回は、Emscripten で C++ を実行するときに、<br>JSの関数を関数ポインタとして登録し、それを呼び出せるようにする方法を紹介します。</p><h2 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h2><ul><li>Ubuntu 14.04.5 LTS</li><li>emcc 1.36.0</li><li>clang version 3.9.0</li></ul><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><ul><li>JS の関数を <code>set_js_listener</code> 関数を使用して登録する</li><li><code>call_listener</code> 関数を呼び出した時、登録した JS の関数を実行する</li></ul><h2 id="手順１-set-js-listener、call-listener-関数を実装"><a href="#手順１-set-js-listener、call-listener-関数を実装" class="headerlink" title="手順１: set_js_listener、call_listener 関数を実装"></a>手順１: set_js_listener、call_listener 関数を実装</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*JS_LISTENER)</span><span class="params">()</span></span>;</span><br><span class="line">JS_LISTENER js_listener = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_js_listener</span><span class="params">(JS_LISTENER f)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    js_listener = f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_listener</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  js_listener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EMSCRIPTEN_BINDINGS()</span><br><span class="line">&#123;</span><br><span class="line">  emscripten::function(<span class="string">"call_listener"</span>, &amp;call_listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typedef を利用して、型を簡略化して使用できるようにしています。</p><p>また、<code>set_js_listener</code> は、<code>EMSCRIPTEN_BINDINGS</code> は使用せず、<br>ビルド時に <code>EXPORTED_FUNCTIONS</code> で js から呼び出せるようにします。<br>そうしないと、次のようなエラーが出ます。<br><a href="http://www.flickr.com/photos/126344033@N06/31368456416" title="emscripten_failed_js_pointer" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5350/31368456416_7bbc497c55_o.png" alt="emscripten_failed_js_pointer"></a><br>（EMSCRIPTEN_BINDINGS、allow_raw_pointers を使用した場合）</p><h2 id="手順２-ビルドする"><a href="#手順２-ビルドする" class="headerlink" title="手順２: ビルドする"></a>手順２: ビルドする</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ emcc main.cpp -std=c++11 -s RESERVED_FUNCTION_POINTERS=1 --<span class="built_in">bind</span> -s EXPORTED_FUNCTIONS=<span class="string">"['_set_js_listener']"</span></span><br></pre></td></tr></table></figure><p>それぞれの引数は、次のような意味があります。</p><ul><li><code>std=c++11</code> を指定しないと、embind を使用する際にエラーが出ます。</li><li><code>-s RESERVED_FUNCTION_POINTERS=1</code> : 1つの関数ポインタを使えるようにします。</li><li><code>--bind</code> : embind を使えるようにします。</li><li><code>-s EXPORTED_FUNCTIONS=&quot;[&#39;_set_js_listener&#39;]&quot;</code> : set_js_listener を js から呼び出せるようにします。</li></ul><h2 id="手順３-関数ポインタをJSで作成する"><a href="#手順３-関数ポインタをJSで作成する" class="headerlink" title="手順３: 関数ポインタをJSで作成する"></a>手順３: 関数ポインタをJSで作成する</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnPointer = Runtime.addFunction(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"called!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登録する</span></span><br><span class="line">Module.ccall(<span class="string">"set_js_listener"</span>, <span class="string">"void"</span>, [], [fnPointer]);</span><br></pre></td></tr></table></figure><p>関数ポインタは、<a href="https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-javascript-functions-as-function-pointers-from-c" target="_blank" rel="noopener"><code>Runtime.addFunction</code></a> を通して使用します。<br>set_js_listener は、<a href="https://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html#calling-compiled-c-functions-from-javascript-using-ccall-cwrap" target="_blank" rel="noopener"><code>Module.ccall</code></a> を使用して呼び出します。</p><h2 id="手順４-登録した関数ポインタを呼び出す"><a href="#手順４-登録した関数ポインタを呼び出す" class="headerlink" title="手順４: 登録した関数ポインタを呼び出す"></a>手順４: 登録した関数ポインタを呼び出す</h2><p>JS から関数ポインタを呼び出します。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Module.call_listener();</span><br></pre></td></tr></table></figure></p><p><a href="http://www.flickr.com/photos/126344033@N06/31290184891" title="emscripten_called_js_pointer" target="_blank" rel="noopener"><img src="https://farm6.staticflickr.com/5486/31290184891_85bf35c8c1_o.png" alt="emscripten_called_js_pointer"></a></p><p><code>called!</code> とコンソールに出力されたので、登録した関数が呼び出されたことがわかります。</p><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><p>今回実行したコードは次のようになりました。</p><script src="https://gist.github.com/shundroid/3ed6ec3a0000d62d5680681d07cc3b27.js"></script><script src="https://gist.github.com/shundroid/523c69ffe7868e36e7965ff7ee57efb6.js"></script><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/12358877/passing-js-function-to-emscripten-generated-code" target="_blank" rel="noopener">http://stackoverflow.com/questions/12358877/passing-js-function-to-emscripten-generated-code</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Collections </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> emscripten </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Windows】serialport モジュールなどで node-gyp を使うとき、Visual Studio をインストールせずに使う</title>
      <link href="/2016/08/15/serialport-without-vs/"/>
      <url>/2016/08/15/serialport-without-vs/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>久しぶりの投稿となります。</p><p>というのは、パソコンを落としてしまって、ハードディスクを壊してしまったからです‥。<br>幸い、壊れているのはハードディスクだけだったので、それを交換したら動きました。</p><p>その交換するまでの間、パソコンを貸していただいて、それで開発をしていたのですが、<br>開発していたリポジトリで、「serialport」モジュールを使っていました。</p><p>しかし、このモジュールをビルドするときに、Visual Studio と python が必要だと思っていて、<br>Visual Studio 入れると一気に8GBとか使うので、<br>入れないでやる方法があったので紹介します。</p><h2 id="Visual-C-Build-Tools-を使う"><a href="#Visual-C-Build-Tools-を使う" class="headerlink" title="Visual C++ Build Tools を使う"></a>Visual C++ Build Tools を使う</h2><p><a href="http://landinghub.visualstudio.com/visual-cpp-build-tools" target="_blank" rel="noopener">http://landinghub.visualstudio.com/visual-cpp-build-tools</a></p><p>これなんです。これが Visual Studio の代わりになります。<br>↑ で、「Download Visual C++ Build Tools」をクリックして、ダウンロードして実行、<br>すべてデフォルトのオプションでインストールします。</p><h2 id="npm-config-を変更"><a href="#npm-config-を変更" class="headerlink" title="npm config を変更"></a>npm config を変更</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> msvs_version 2015 --global</span><br></pre></td></tr></table></figure><p>これをやらないと、↓のエラーが出てしまいます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MSBUILD : error MSB3428: Visual C++ コンポーネント <span class="string">"VCBuild.exe"</span> を読み込めませんでした。この問題を解決するには、次のいずれかを行ってください。 1) .NET Framework 2.0 SDK イ</span><br><span class="line">ンストールする。 2) Microsoft Visual Studio 2005 を</span><br><span class="line">インストールする。 3) その他の場所にインストールされている場合、コンポーネントの場所をシステム パスに追加する。 [...\node_modules\serialport\</span><br><span class="line">build\binding.sln]</span><br></pre></td></tr></table></figure><p>これで Visual C++ Build Tools でビルドできます。</p><h2 id="あと-Python-2-7-もいれましょう"><a href="#あと-Python-2-7-もいれましょう" class="headerlink" title="あと Python 2.7 もいれましょう"></a>あと Python 2.7 もいれましょう</h2><p>これも忘れずに！</p><h2 id="ちなみに"><a href="#ちなみに" class="headerlink" title="ちなみに"></a>ちなみに</h2><p>serialport モジュールのページでは、Visual Studio をインストールする方法しか書いてありませんが、<br>node-gyp の Github では、Visual C++ Build Tools を使う方法が紹介されています。</p><p><a href="https://github.com/nodejs/node-gyp" target="_blank" rel="noopener">https://github.com/nodejs/node-gyp</a></p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> python </tag>
            
            <tag> visualstudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack で Ace（Brace）を使うとエラーが出る</title>
      <link href="/2016/07/03/errored-in-ace/"/>
      <url>/2016/07/03/errored-in-ace/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p><a href="https://ace.c9.io/#nav=about" target="_blank" rel="noopener">Ace</a>、便利ですよねー！<br>js で作られたテキストエディタで、<br>Webアプリで「ちょっとコード打つとこ作りたい」とかいうときに使えます。</p><p>さて、今回はこれを、Webpack から使って、まとめられるようにしたいと思います。</p><h2 id="brace-を使う"><a href="#brace-を使う" class="headerlink" title="brace を使う"></a>brace を使う</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/thlorenz/brace" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>普通の ace を、Browserify で使えるようにしたそうです。</p><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save brace</span><br></pre></td></tr></table></figure><p>bower からインストールしたくて、探しましたがなかったです。</p><h3 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h3><p>node_modulesをbundleできるようにします。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modulesDirectories: [<span class="string">"node_modules"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> webpack.ResolverPlugin(</span><br><span class="line">    <span class="keyword">new</span> webpack.ResolverPlugin</span><br><span class="line">      .DirectoryDescriptionFilePlugin(<span class="string">"package.json"</span>, [<span class="string">"main"</span>])</span><br><span class="line">  )]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="しかしエラー"><a href="#しかしエラー" class="headerlink" title="しかしエラー"></a>しかしエラー</h2><p>これで、Browserify ならうまくいくらしいのですが、<br>Webpack だと、エラーが出てしまい、<br>テキストエディタ上でのエラー表示機能などが使えませんでした。</p><p><a href="http://www.flickr.com/photos/126344033@N06/27977006931" title="webpack-brace-error" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7424/27977006931_1cfaa1a516_o.png" alt="webpack-brace-error"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Could not load worker TypeError: Argument 1 is not valid for any of the 2-argument overloads of URL.createObjectURL.</span><br><span class="line">スタックトレース:</span><br><span class="line">WorkerClient@file:///.../bundle.js:16481:21</span><br><span class="line">this.createWorker@file:///.../bundle.js:21703:23</span><br><span class="line">this.$startWorker@file:///.../bundle.js:8833:29</span><br><span class="line">this.$onChangeMode@file:///.../bundle.js:8789:14</span><br><span class="line">this.setMode/&lt;@file:///.../bundle.js:8770:18</span><br><span class="line">exports.loadModule@file:///.../bundle.js:3766:27</span><br><span class="line">this.setMode@file:///.../bundle.js:8759:10</span><br><span class="line">@file:///.../bundle.js:53:2</span><br><span class="line">__webpack_require__@file:///.../bundle.js:20:12</span><br><span class="line">@file:///.../bundle.js:40:18</span><br><span class="line">@file:///.../bundle.js:1:11</span><br></pre></td></tr></table></figure><p>どうやら、w3c-blob という module でエラーが起きています。<br>これは、Blob が使えないブラウザ用に、Blob を実装している module です。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://developer.mozilla.org/ja/docs/Web/API/Blob" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>しかし、サポート状況を見てみると、IEでも10以上、結構多くのブラウザがサポートしています。</p><p>ということで、この w3c-blob という module を、<br>webpack の alias 機能を利用して、<br>ブラウザの Blob を使うようにしていきます。</p><h3 id="1-webpack-config-js-があるフォルダに、「alias」フォルダを作成"><a href="#1-webpack-config-js-があるフォルダに、「alias」フォルダを作成" class="headerlink" title="1. webpack.config.js があるフォルダに、「alias」フォルダを作成"></a>1. webpack.config.js があるフォルダに、「alias」フォルダを作成</h3><p>webpack.config.js があるフォルダに、「alias」フォルダを作成し、<br>このフォルダの中に、blob.js というファイルを作成します。</p><p>blob.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = Blob;</span><br></pre></td></tr></table></figure></p><p>１行です。ブラウザで実装されている Blob を使うようにします。</p><h3 id="2-webpack-config-js-にaliasを登録"><a href="#2-webpack-config-js-にaliasを登録" class="headerlink" title="2. webpack.config.js にaliasを登録"></a>2. webpack.config.js にaliasを登録</h3><p>4行目-7行目を変更してください。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  resolve: &#123;</span><br><span class="line">    modulesDirectories: [<span class="string">"node_modules"</span>, <span class="string">"alias"</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">"w3c-blob"</span>: <span class="string">"blob.js"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> webpack.ResolverPlugin(</span><br><span class="line">    <span class="keyword">new</span> webpack.ResolverPlugin</span><br><span class="line">      .DirectoryDescriptionFilePlugin(<span class="string">"package.json"</span>, [<span class="string">"main"</span>])</span><br><span class="line">  )]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>4行目では、alias フォルダをaliasで使えるようにします。</p><p>6行目では、w3c-blob の aliasとして、blob.js（aliasフォルダ内）を登録し、上書きします。</p><h3 id="3-実行してみる"><a href="#3-実行してみる" class="headerlink" title="3. 実行してみる"></a>3. 実行してみる</h3><p><a href="http://www.flickr.com/photos/126344033@N06/28054417805" title="success-webpack-brace" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7356/28054417805_1f9e689e31_o.png" alt="success-webpack-brace"></a></p><p>エラーが出ませんでした。<br>また、テキストエディタ上で、エラーの表示もできるようになりました。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> ace </tag>
            
            <tag> bower </tag>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10 にアップグレードしてから起きた問題（と解決策）を挙げてみる</title>
      <link href="/2016/06/02/problems-in-windows-10/"/>
      <url>/2016/06/02/problems-in-windows-10/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/01/10/returned-windows-8-1/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>↑な感じで苦戦していたアップグレードですが、<del datetime="2016-07-03T08:53:39+00:00">6回目にして成功しました！<br>作戦を組んでやったので、それについての記事も近日中に公開します。</del></p><p><strong>2016-07-03 追記</strong><br>↑と書いていましたが、ウイルスバスターを入れた後、KP41病になってしまったようで、<br>Microsoft にもメーカーにも問い合わせましたが、Windows 8.1 に戻すしかないということで、戻しました。<br>一応「こんな問題が起きたんだ」という分にはこの記事も使えるかと思うので、公開したままにします。</p><p>さて、今回は、Windows 10 にアップグレードしたものの、<br>結構問題が発生して、かなりの精神的ダメージを食らったので、<br>紹介します。</p><h2 id="ブルースクリーン「DRIVER-POWER-STATE-FAILURE」"><a href="#ブルースクリーン「DRIVER-POWER-STATE-FAILURE」" class="headerlink" title="ブルースクリーン「DRIVER_POWER_STATE_FAILURE」"></a>ブルースクリーン「DRIVER_POWER_STATE_FAILURE」</h2><p><a href="http://www.flickr.com/photos/126344033@N06/26804337454" title="driver_power_state_failure" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7661/26804337454_eda843d67f_o.jpg" alt="driver_power_state_failure"></a></p><p>初ログイン後、すぐに発生。<br>頻度：１回きり</p><p>よっしゃ！アップグレード終わったー(<em>´ω｀</em>)とゆったりしているとき、<br>不意打ちのように来たエラーだったので、ダメージはそれなりに大きかったです。<br>しかし、その後コイツを見ることはありません。</p><h2 id="ブルースクリーン「IRQL-NOT-LESS-OR-EQUAL」"><a href="#ブルースクリーン「IRQL-NOT-LESS-OR-EQUAL」" class="headerlink" title="ブルースクリーン「IRQL_NOT_LESS_OR_EQUAL」"></a>ブルースクリーン「IRQL_NOT_LESS_OR_EQUAL」</h2><p><a href="https://www.flickr.com/photos/126344033@N06/27136908840/in/dateposted-public/" title="irql_not_less_or_equal" target="_blank" rel="noopener"><img src="https://c1.staticflickr.com/8/7174/27136908840_a062c0f51d_m.jpg" alt="irql_not_less_or_equal"></a><script async src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script><br>（ガラケーでとったのをスマホでとりなおしました。画質が悪くてすみません）</p><p>ウイルスバスタークラウドインストール後、15分後くらいに発生。<br>頻度：１回きり</p><p>アプリの更新とかも終わって、安定してきたころに、<br>ウイルスバスターを入れたら現れました。<br>コイツもその後見ることはありません。</p><h2 id="ストアアプリをアンインストールしても復活する"><a href="#ストアアプリをアンインストールしても復活する" class="headerlink" title="ストアアプリをアンインストールしても復活する"></a>ストアアプリをアンインストールしても復活する</h2><p>アップグレード後、アプリの更新中に発生。<br>頻度：複数</p><p>ぼくは、あまり「トラベル」「マネー」とかのデフォルトで入っているアプリを使わないので、<br>アンインストールしたのですが、それが消しても消しても復活しました。</p><h3 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h3><p>これについては解決策が見つかりました。<br>アンインストールしたアプリが更新中で、再インストールされていたらしいので、<br>ストアから更新をキャンセルすればよいのです。</p><p>ストアを開いて、ダウンロードと更新、アプリのリストから、<br>×をクリックすると、更新をキャンセルできます。</p><h2 id="突然フリーズし、HDD-アクセスランプも消灯する"><a href="#突然フリーズし、HDD-アクセスランプも消灯する" class="headerlink" title="突然フリーズし、HDD アクセスランプも消灯する"></a>突然フリーズし、HDD アクセスランプも消灯する</h2><p><a href="http://www.flickr.com/photos/126344033@N06/26804335494" title="hardware-access-lamp-off" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7379/26804335494_f3efd3d54f_o.jpg" alt="hardware-access-lamp-off"></a></p><p>ウイルスバスタークラウドインストール後。<br>頻度：複数、起動してから１時間くらいで毎回発生。</p><p>これは地味に手ごわいヤツでした。<br>あるとき突然、マウス操作も画面も音声もフリーズし、<br>HDD アクセスランプもぷつっと消灯してしまうのです。</p><h3 id="解決策（と言っていいのか）"><a href="#解決策（と言っていいのか）" class="headerlink" title="解決策（と言っていいのか）"></a>解決策（と言っていいのか）</h3><p>最初はこれがウイルスバスターの影響だと知らず、<br><a href="http://polaris-bear.lolipop.jp/shunroom/302" target="_blank" rel="noopener">5回目</a>のアップグレードのときは、これが嫌でWindows 8.1 に戻したほどです。</p><p>ウイルスバスターをアンインストールしたら解消しました。<br>それだとウイルス対策がかなり心配ですが、<br>今のところはWin10付属の Windows Defender を使っています。</p><h2 id="Verifier-でドライバの検証をして再起動した後、システムの復元をしなければならなくなった"><a href="#Verifier-でドライバの検証をして再起動した後、システムの復元をしなければならなくなった" class="headerlink" title="Verifier でドライバの検証をして再起動した後、システムの復元をしなければならなくなった"></a>Verifier でドライバの検証をして再起動した後、システムの復元をしなければならなくなった</h2><p><a href="http://www.flickr.com/photos/126344033@N06/27136910600" title="windows-after-verifier" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7215/27136910600_16ec43ae6b_o.jpg" alt="windows-after-verifier"></a></p><p>Verifier 実行後<br>頻度：１回</p><p>Verifier という、ドライバの検証をできるものがあるのですが、<br>それを実行して、再起動したら、↑の画像のメッセージが出ました。<br>「キャンセル」ボタンは怖くて押せなかったので、<br>システムの復元をしました。こまめに復元ポイントを作っていてよかったです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>こんな感じで、短期間にだだだっと問題が発生しましたが、<br>なんとかしのいだ感じです。</p><p>Windows 10は、楽しい新機能が盛りだくさんなので、<br>色々問題が起きますが、使っていきたいと思っています。<br>そのため、今後も問題が起きたとき、その対処法があれば書いていきたいと思います。</p><p>近日、6回目でどうやってアップグレードができたのかを詳しく書くつもりです。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>エスケープシーケンスで、既存の行、文字を書き換える</title>
      <link href="/2016/05/18/escape-sequence-replace/"/>
      <url>/2016/05/18/escape-sequence-replace/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー</p><p>Vim は、ターミナル上で動くアプリですが、カーソルの位置を変えて、<br>既存の行、文字の内容を上書きしたりできます。</p><p>こういうのって、どうやるのかなあと調べていたら、<br>どうやら、エスケープシーケンスというのを使うらしいです。</p><p>というわけで、使ってみました。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><ul><li>ターミナル上の既存の行、文字を書き換える</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>エスケープシーケンスを使用して、カーソルを動かす</li></ul><h2 id="カーソルを動かしてみる"><a href="#カーソルを動かしてみる" class="headerlink" title="カーソルを動かしてみる"></a>カーソルを動かしてみる</h2><p>絶対座標でカーソルを変更します。<br>次のような形です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\e[行;列H</span><br></pre></td></tr></table></figure><p>今回は Ruby でやってみたいと思います。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 左上から 2行、3列目にカーソルを移動</span></span><br><span class="line">printf <span class="string">"\e[2;3H"</span></span><br></pre></td></tr></table></figure></p><p>カーソルが移動されます。</p><h2 id="書き換えてみる"><a href="#書き換えてみる" class="headerlink" title="書き換えてみる"></a>書き換えてみる</h2><p>この後、文字列を出力すれば、文字が上書きされるわけです。</p><p>実際のコードは次のようになります。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 画面をクリアしておく</span></span><br><span class="line">printf <span class="string">"\e[2J"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1行目1列に apple と出力</span></span><br><span class="line">printf <span class="string">"\e[1;1H"</span></span><br><span class="line">printf <span class="string">"apple"</span></span><br><span class="line"></span><br><span class="line">sleep <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1秒後、再び1行目1列に出力して上書きする</span></span><br><span class="line">printf <span class="string">"\e[1;0H"</span></span><br><span class="line">printf <span class="string">"banana"</span></span><br></pre></td></tr></table></figure></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/05/2016-05-18-21h21_26.gif" alt="2016-05-18 21h21_26"></p><p>1行目1列は、ターミナルの左上なので、<br>文字がすでにある可能性があります。<br>そのため、上のコードでは、最初に <code>\e[2J</code> というエスケープシーケンスで、<br>ターミナルをクリアしておきます。</p><h2 id="これを使って何かできそう"><a href="#これを使って何かできそう" class="headerlink" title="これを使って何かできそう"></a>これを使って何かできそう</h2><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/05/2016-05-18-21h22_47-644x618.gif" alt="2016-05-18 21h22_47"></p><p><code>|</code> がある場所で、<code>a</code> キーを押すと、<code>&amp;gt;</code> がはね返るようにしました。<br>ゲームとかで応用できそうです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://d.hatena.ne.jp/zariganitosh/20150224/escape_sequence" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>エスケープシーケンスの一覧が載っていて便利です。<br>今回は絶対座標で変更しましたが、「上にn行」みたいなずらし方の方法もあり、こちらに載っています。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WindowsのGVim をかっこよくする</title>
      <link href="/2016/05/01/make-gvim-cool/"/>
      <url>/2016/05/01/make-gvim-cool/</url>
      
        <content type="html"><![CDATA[<h2 id="仕上がり"><a href="#仕上がり" class="headerlink" title="仕上がり"></a>仕上がり</h2><p><a href="http://www.flickr.com/photos/126344033@N06/26715931406" title="2016-05-01_12h41_03" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1532/26715931406_9cc355b661_o.png" alt="2016-05-01_12h41_03"></a><br>※ Vim-airline というプラグインを使用していますが、<br>　 その方法はまた今度説明します。</p><h2 id="各種設定をする"><a href="#各種設定をする" class="headerlink" title="各種設定をする"></a>各種設定をする</h2><p><code>.vimrc</code> に追加します。ない場合は、ホームディレクトリに、<code>.vimrc</code> というファイルを作ってください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot; 行番号を表示</span><br><span class="line">set number</span><br><span class="line">&quot; 対応する()、&#123;&#125;、[]をハイライト</span><br><span class="line">set showmatch</span><br><span class="line"></span><br><span class="line">&quot; 折りたたみ（任意）</span><br><span class="line">&quot; indent の数で折りたたむよう設定</span><br><span class="line">set foldmethod=indent</span><br></pre></td></tr></table></figure><p><code>.gvimrc</code> に追加します。ない場合は、ホームディレクトリに、<code>.gvimrc</code> というファイルを作ってください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot; 日本語フォントを全角分のスペースにする</span><br><span class="line">set ambiwidth=double</span><br><span class="line"></span><br><span class="line">&quot; ビープ音を消す（任意）</span><br><span class="line">set visualbell t_vb=</span><br></pre></td></tr></table></figure><h2 id="いらないUIを消す"><a href="#いらないUIを消す" class="headerlink" title="いらないUIを消す"></a>いらないUIを消す</h2><p><code>.gvimrc</code> に追加します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot; 最初に追加</span><br><span class="line">gui</span><br><span class="line"></span><br><span class="line">&quot; UIを消す</span><br><span class="line">set guioptions-=m &quot; remove menu bar</span><br><span class="line">set guioptions-=T &quot; remove tool bar</span><br><span class="line">set guioptions-=r &quot; remove right-hand scroll bar</span><br><span class="line">set guioptions-=L &quot; remove left-hand scroll bar</span><br></pre></td></tr></table></figure><h2 id="背景を半透明にする"><a href="#背景を半透明にする" class="headerlink" title="背景を半透明にする"></a>背景を半透明にする</h2><p><code>.gvimrc</code> に追加してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot; 背景を透明にする</span><br><span class="line">set transparency=200</span><br></pre></td></tr></table></figure><h2 id="colorschemeを変える"><a href="#colorschemeを変える" class="headerlink" title="colorschemeを変える"></a>colorschemeを変える</h2><p>ぼくは、デフォルトで入っている <code>koehler</code> というものを使っています。</p><p><code>.gvimrc</code> に追加してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">colorscheme koehler</span><br><span class="line"></span><br><span class="line">&quot; 先ほど折りたたみの設定をした人向け</span><br><span class="line">&quot; 折りたたみの色を替える</span><br><span class="line">highlight Folded guibg=black guifg=yellow</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>WindowsだけれどVim使ってみた</title>
      <link href="/2016/05/01/vim-in-windows/"/>
      <url>/2016/05/01/vim-in-windows/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>Vim、いいですよね～～～～<br>キーボードですべてが完結しちゃうところがかっこよくて、<br>僕も使いたくなりました。</p><p>今回は、Windows でかっこ良く Vim を使う方法を紹介します。</p><h2 id="Vim-を使う時の条件"><a href="#Vim-を使う時の条件" class="headerlink" title="Vim を使う時の条件"></a>Vim を使う時の条件</h2><p>Vim を使う方法はいくつかあります。<br>「かっこ良く」ということで、いくつか条件を用意しました。</p><ul><li>背景を透過できる</li><li>かっこいい colorscheme が使える（256色表示できる）</li><li>バグがない</li><li>プラグインを入れられる</li></ul><h2 id="ConEmuで使いたかった。"><a href="#ConEmuで使いたかった。" class="headerlink" title="ConEmuで使いたかった。"></a>ConEmuで使いたかった。</h2><p>ConEmu という、コンソールをタブ化できたりするものがあるので、それでVimも使いたかったんです。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/01/01/win-conemu/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>これでできるかなと思いましたが、</p><ul><li>256色表示できない</li><li>backspace で文字が表示から消えない（本当は消えている）</li></ul><p>ということで、使えなかったです・・</p><h2 id="Cygwinでやってみたが・・"><a href="#Cygwinでやってみたが・・" class="headerlink" title="Cygwinでやってみたが・・"></a>Cygwinでやってみたが・・</h2><p>プラグインを入れるとき、インストール先を指定する「<code>expand()</code>」という関数を使います。<br>しかし、そこで <code>expand(&#39;/home/Shundroid/cygwin64/.vim/bundle/&#39;)</code> と指定しましたが、<br>ルートがCドライブになっていて、Cドライブに合わせるように修正したら、今度はうまく認識しない・・という感じで・・<br>ややこしかったので無理でした。</p><h2 id="普通にコマンドプロンプトで使う"><a href="#普通にコマンドプロンプトで使う" class="headerlink" title="普通にコマンドプロンプトで使う"></a>普通にコマンドプロンプトで使う</h2><ul><li>背景を透過できない</li></ul><p>のでダメでした。</p><h2 id="GVim-を使う"><a href="#GVim-を使う" class="headerlink" title="GVim を使う"></a>GVim を使う</h2><p>ぼくが思っていた条件をすべて満たしているので、<br>これを使うことにしました。</p><ul><li>背景を透過できる</li><li>かっこいい colorscheme が使える（256色表示できる）</li><li>バグがない</li><li>プラグインを入れられる</li></ul><p>では、次は GVim をかっこ良く使えるように設定していきます。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/05/01/make-gvim-cool/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js で文字列が色かどうかを見分ける方法</title>
      <link href="/2016/04/24/js-is-str-color/"/>
      <url>/2016/04/24/js-is-str-color/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>js から css の backgroundColor や、color など、色を指定することがよくあります。<br>しかし、その時、色でない文字列が backgroundColor などに指定されると、<br>正しい結果になりません。</p><p>今回は、色である文字列が指定されているかを判別する方法を紹介します。</p><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><p>次のサンプルを見てください。</p><p></p><p data-height="133" data-theme-id="0" data-slug-hash="pyZYgz" data-default-tab="result" data-user="shundroid" data-embed-version="2" data-pen-title="Jsで文字列が色かどうかを判別する" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/pyZYgz/" target="_blank" rel="noopener">Jsで文字列が色かどうかを判別する</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>textbox に、<code>blue</code> や <code>rgb(255,0,0)</code>を指定して、「判別」ボタンを押すと、「色です」と結果が返ってきます。<br>しかし、<code>hoge</code> や、<code>1</code> を指定すると、「色ではありません」となります。</p><p>では、この仕組みを説明します。</p><h2 id="isColor-関数を実装する"><a href="#isColor-関数を実装する" class="headerlink" title="isColor 関数を実装する"></a>isColor 関数を実装する</h2><p>サンプルでは、次のような関数が定義されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isColor</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">"span"</span>);</span><br><span class="line">  testElement.style.backgroundColor = color;</span><br><span class="line">  <span class="keyword">return</span> testElement.style.backgroundColor !== <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この関数に引数として文字列を指定すると、その文字列が色に変換できるかを返します。</p><h3 id="仕組み"><a href="#仕組み" class="headerlink" title="仕組み"></a>仕組み</h3><p><code>testElement.style.backgroundColor</code> のデフォルトの値は <code>&quot;&quot;</code> です。<br>これに、色に変換できる文字列を指定すると、<code>backgroundColor</code> の値が変化します。<br>しかし、不正な値が指定されると、<code>backgroundColor</code> の値は変化しません。<br>これを利用して、<code>testElement.style.backgroundColor !== &quot;&quot;</code> で、<br><code>backgroundColor</code>がデフォルトの値でないかで判別しています。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Canvas】mousemoveのタイミングで円を描くときに円が離れてしまう問題</title>
      <link href="/2016/04/18/problem-drawing-canvas/"/>
      <url>/2016/04/18/problem-drawing-canvas/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>前回、arc を使って描いた時、円が散らばらないようにする方法を紹介すると書いたので書きます。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://polaris-bear.lolipop.jp/shunroom/575" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>まず、下の例を見てください。</p><h2 id="うまくいかない例"><a href="#うまくいかない例" class="headerlink" title="うまくいかない例"></a>うまくいかない例</h2><p></p><p data-height="370" data-theme-id="0" data-slug-hash="grzMdP" data-default-tab="result" data-user="shundroid" data-embed-version="2" data-pen-title="Canvas Mousemove 円で描いてうまくいかない例" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/grzMdP/" target="_blank" rel="noopener">Canvas Mousemove 円で描いてうまくいかない例</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>よくありがちなコンテンツです。<br>mousemove のイベントが発生した時に円を描いているわけですが、<br>めっちゃ速く動かして書くと、円と円の間が空いてしまいます。</p><p>今回は意外と初歩的なことかもしれませんが、<br>この、間が空かないようにする方法を描きます。</p><h2 id="moveToとlineToを使う"><a href="#moveToとlineToを使う" class="headerlink" title="moveToとlineToを使う"></a>moveToとlineToを使う</h2><p>実際に moveTo と lineTo でやった例は、こちらです。</p><p></p><p data-height="370" data-theme-id="0" data-slug-hash="JXvKmz" data-default-tab="result" data-user="shundroid" data-embed-version="2" data-pen-title="Canvas mousemove lineToとmoveTo" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/JXvKmz/" target="_blank" rel="noopener">Canvas mousemove lineToとmoveTo</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><p>この方法は、円で描くのではなく、線で描いています。<br>そのため、円と円の間が描けるわけです。</p><p>では、使っている関数を紹介したいと思います。</p><h3 id="moveTo-関数"><a href="#moveTo-関数" class="headerlink" title="moveTo 関数"></a>moveTo 関数</h3><p>線の始点を指定します。<br>ここでは、ひとつ前の mousemove での座標、もしくは mousedown での座標を指定しています。</p><h3 id="lineTo-関数"><a href="#lineTo-関数" class="headerlink" title="lineTo 関数"></a>lineTo 関数</h3><p>lineTo で指定した始点から、<br>線を引くときの終点を指定します。<br>ここでは、現在の座標を指定しています。</p><h3 id="色を変えるには"><a href="#色を変えるには" class="headerlink" title="色を変えるには"></a>色を変えるには</h3><p><code>CanvasRenderingContext2D.strokeStyle</code> で取得・変更できます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.strokeStyle = <span class="string">"red"</span>; <span class="comment">// 赤</span></span><br><span class="line">ctx.strokeStyle = <span class="string">"green"</span>; <span class="comment">// 緑</span></span><br></pre></td></tr></table></figure><p>参考: <a href="https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D/strokeStyle" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/API/CanvasRenderingContext2D/strokeStyle</a></p><h3 id="太さを変えるには"><a href="#太さを変えるには" class="headerlink" title="太さを変えるには"></a>太さを変えるには</h3><p><code>CanvasRenderingContext2D.lineWidth</code> で取得・変更できます。<br>円で描いた時は、arc メソッドの第３引数で指定していたので、それの代わりです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.lineWidth = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h2 id="詳しいサイト"><a href="#詳しいサイト" class="headerlink" title="詳しいサイト"></a>詳しいサイト</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.html5.jp/canvas/ref.html" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Canvasで使える関数が紹介されています。<br>「こんな機能あったんだ～」という新発見もあるので、一度見てみてください！</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> canvas </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【JS】Canvasで丸や四角で「消す」方法</title>
      <link href="/2016/04/12/how-to-clear-canvas-circle-or-rect/"/>
      <url>/2016/04/12/how-to-clear-canvas-circle-or-rect/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。<br>題名のとおり、Canvas の「消す」機能で、丸などに形を変える方法を紹介します。</p><h2 id="「消す」機能について"><a href="#「消す」機能について" class="headerlink" title="「消す」機能について"></a>「消す」機能について</h2><p>まずはじめに、消す方法としてのルールを書いておきます。</p><ul><li><strong>白く塗る はダメ！</strong>（背景が白でない場合があるため）</li><li>消した部分は透明になるようにする。</li></ul><h2 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h2><p>context の <code>globalCompositeOperation</code> を、<code>destination-out</code> に変更すると、<br>fill や stroke で指定した領域を <strong>切り取る</strong> ことができます。</p><p>また、このプロパティは、その他いろいろな値に変更できます。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.html5.jp/canvas/ref/property/globalCompositeOperation.html" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h2 id="サンプル：円形で消す"><a href="#サンプル：円形で消す" class="headerlink" title="サンプル：円形で消す"></a>サンプル：円形で消す</h2><p><code>globalCompositeOperation</code>を変更した状態で、<code>arc</code> メソッドを呼ぶことでできます。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"xxx"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eraseArc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ctx.globalCompositeOperation = <span class="string">"destination-out"</span>;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI*<span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">  ctx.fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="arc-の引数"><a href="#arc-の引数" class="headerlink" title="arc() の引数"></a>arc() の引数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arc(中心x, 中心y, 半径, 開始角度(ラジアン), 終了角度(ラジアン), どっち回りか(true→反時計回り))</span><br></pre></td></tr></table></figure><h2 id="応用例"><a href="#応用例" class="headerlink" title="応用例"></a>応用例</h2><p></p><p data-height="403" data-theme-id="0" data-slug-hash="vGjGvV" data-default-tab="result" data-user="shundroid" data-embed-version="2" data-pen-title="Canvas Erase By Arc" class="codepen">See the Pen <a href="https://codepen.io/shundroid/pen/vGjGvV/" target="_blank" rel="noopener">Canvas Erase By Arc</a> by shundroid (<a href="https://codepen.io/shundroid" target="_blank" rel="noopener">@shundroid</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script><ul><li>チェックボックス ON：描く、OFF：消す（<code>globalCompositeOperation</code> で切り替えています）</li><li>背景色を変更で、消した部分が透明になっていることを確認できます</li></ul><p>掲載したサンプルコードでは、ctx.arc で描画していますが、<br>このサンプルは mousemove で動いた時に描いているので、arc で描くと円が散らばってしまい、うまく描けません。<br>そのため、moveTo と、lineTo を使って描いています。</p><p>この方法については、次回ブログで書きたいと思います。</p><h2 id="「消す」モードを戻したい"><a href="#「消す」モードを戻したい" class="headerlink" title="「消す」モードを戻したい"></a>「消す」モードを戻したい</h2><p>このままでは、常に stroke や fill した部分が切り取られてしまうため、<br>元の値に戻しておきましょう。<br>デフォルトの値は、<code>source-over</code> です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">"xxx"</span>).getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.globalCompositeOperation = <span class="string">"source-over"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> canvas </tag>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js の正規表現で、「完全一致」でマッチする</title>
      <link href="/2016/04/05/js-regexp-match/"/>
      <url>/2016/04/05/js-regexp-match/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>機会があって、<br>正規表現で「完全一致」のテストの方法が知りたくなりました。<br>今日はその方法を紹介します。</p><h2 id="どういうことがしたいのか"><a href="#どういうことがしたいのか" class="headerlink" title="どういうことがしたいのか"></a>どういうことがしたいのか</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/abcde/.test(<span class="string">"abcde"</span>); <span class="comment">// true</span></span><br><span class="line">/abcde/.test(<span class="string">"abcdef"</span>); <span class="comment">// これも true</span></span><br></pre></td></tr></table></figure><p>このような場合だと、<br>１行目のようなテストする文字列がパターンと同じ場合、 true になりますが、<br>含んでいる場合（２行目）も true になってしまいます。<br>これを、２行目が false になって、１行目だけ true になるようにしたいんです。</p><h2 id="完全一致したいとき"><a href="#完全一致したいとき" class="headerlink" title="完全一致したいとき"></a>完全一致したいとき</h2><p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions</a></p><p>次のようにすればできました！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^パターン$/</span><br></pre></td></tr></table></figure><p><code>^</code>が先頭を表し、<code>$</code>が末尾を表します。<br>だから、それにパターンを挟む形でやれば「完全一致」でマッチできます。</p><p>例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^下$/.test(<span class="string">"下"</span>); <span class="comment">// true</span></span><br><span class="line">/^下$/.test(<span class="string">"下町"</span>); <span class="comment">// false</span></span><br><span class="line">/^下$/.test(<span class="string">"上下"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="メリットは・・？"><a href="#メリットは・・？" class="headerlink" title="メリットは・・？"></a>メリットは・・？</h2><p>なら、「<code>if (&quot;下&quot; === &quot;下&quot;) {}</code>」でよくない？<br>と思うかもしれません。<br>たしかに上の例ではそうですが、<br>正規表現で比較すると、様々なメリットを得ることもできます。</p><h2 id="「完全一致」の-or-検索"><a href="#「完全一致」の-or-検索" class="headerlink" title="「完全一致」の or 検索"></a>「完全一致」の or 検索</h2><p>例えば、次のように書いたとしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(下|上)$/</span>;</span><br></pre></td></tr></table></figure><p>こうすれば、or でのテストもできますよ～</p><p>使用例:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/^(下|上)$/.test(<span class="string">"下"</span>); <span class="comment">// true</span></span><br><span class="line">/^(下|上)$/.test(<span class="string">"上"</span>); <span class="comment">// true</span></span><br><span class="line">/^(下|上)$/.test(<span class="string">"上下"</span>); <span class="comment">// false</span></span><br><span class="line">/^(下|上)$/.test(<span class="string">"上野"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h2 id="その他、いろいろな「特殊文字」が使える"><a href="#その他、いろいろな「特殊文字」が使える" class="headerlink" title="その他、いろいろな「特殊文字」が使える"></a>その他、いろいろな「特殊文字」が使える</h2><p>完全一致と言っていいのかわかりませんが、<br><code>?</code> や、<code>.</code> などの特殊文字も使えます。</p><h3 id="どれか１文字にマッチする"><a href="#どれか１文字にマッチする" class="headerlink" title="どれか１文字にマッチする"></a>どれか１文字にマッチする</h3><p><code>.</code> を使います。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^A.C$/.test(<span class="string">"ABC"</span>); <span class="comment">// true</span></span><br><span class="line">/^A.C$/.test(<span class="string">"AC"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>※ 改行文字にはマッチしません。<br>　 改行文字にマッチするには、<code>\n</code> や、<code>\s</code>（スペースなども含む）を使用します。</p><h3 id="直前の文字の１回以上の繰り返しにマッチする"><a href="#直前の文字の１回以上の繰り返しにマッチする" class="headerlink" title="直前の文字の１回以上の繰り返しにマッチする"></a>直前の文字の１回以上の繰り返しにマッチする</h3><p><code>+</code> を使います。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/^AA+B$/.test(<span class="string">"AAB"</span>); <span class="comment">//true</span></span><br><span class="line">/^AA+B$/.test(<span class="string">"AAAAAAAAAAAAAAAAB"</span>); <span class="comment">// true</span></span><br><span class="line">/^AA+B$/.test(<span class="string">"AB"</span>); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>※繰り返さない場合（０回以上の繰り返し）にもマッチするときは、<code>*</code> を使います。</p><p>その他の特殊文字の意味と使い方は、<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">MDN の記事</a>をご覧ください。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>学んでいて、<br>正規表現の実用性の高さに感動しました。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>voidを使えば、アロー関数 で｛｝が省ける。</title>
      <link href="/2016/04/01/js-void/"/>
      <url>/2016/04/01/js-void/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>今、void を使えばアロー関数で｛｝がいらないんじゃないか説が、<br>ふと頭のなかを通り過ぎて行きましたので紹介いたしますー。</p><p>「void 演算子で、アロー関数の {} がいらない気がする」ということです。</p><h2 id="普通に-はずせばいいのでは？"><a href="#普通に-はずせばいいのでは？" class="headerlink" title="普通に {} はずせばいいのでは？"></a>普通に {} はずせばいいのでは？</h2><p>まず、通常のアロー関数の｛｝なしの使い方です。<br>普通の関数がどんどん短くなっていく過程をご覧ください。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 式</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> a + <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// アロー関数にそのまましてみた</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123; <span class="keyword">return</span> a + <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引数一つだから () いらない。</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">a</span> =&gt;</span> &#123; <span class="keyword">return</span> a + <span class="number">2</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中身 1行で return で返されているから &#123;&#125; いらない。</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">a</span> =&gt;</span> a + <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>こんな感じですかね。<br>では、次のような例だとどうでしょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function 式</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; num++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// アロー関数にそのまましてみる</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="params">()</span> =&gt;</span> &#123; num++; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// () はずしたいけどはずせない。</span></span><br><span class="line"><span class="comment">// &#123;&#125; はずしたいけど、戻り値ないから・・</span></span><br></pre></td></tr></table></figure><p>そうです。戻り値が void のとき（あ、言っちゃった☆）です。<br>もし、このまま {} をはずせば、戻り値として num が帰ってきてしまい、<br>意図した結果にはなりません。</p><p>さあ、どうしても {} が外したい・・（←なんで？）<br>どうしよう・・・</p><p>そんなときは、void の出番です。<br>void を使えば、{} を外すことができます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void があらわれた！！</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span> num++;</span><br></pre></td></tr></table></figure><p>それはなぜだ？</p><h2 id="void-ってなに？"><a href="#void-ってなに？" class="headerlink" title="void ってなに？"></a>void ってなに？</h2><p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/void" target="_blank" rel="noopener">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/void</a></p><p>void は、式を実行するけれど、undefined を返すという演算子なのです。<br>C# とかで知っていたけれど、js での使い方はあまり良くわかっていませんでした。<br>今まで知っていた使い方は、こんな感じです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a === <span class="keyword">void</span>(<span class="number">0</span>)) &#123;&#125; <span class="comment">// undefined か判定する</span></span><br><span class="line"><span class="keyword">if</span> (a === <span class="keyword">void</span> <span class="number">0</span>) &#123;&#125; <span class="comment">// こちらでも良い</span></span><br><span class="line"><span class="comment">// でもこれは・・</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">"undefined"</span>) &#123;&#125; <span class="comment">// これで良かった。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 下の「ちなみに」（SyntaxErrorだな・・）</span></span><br></pre></td></tr></table></figure><p>また、<code>&lt;a href=&quot;javascript:void(0)&quot;&gt;hoge&lt;/a&gt;</code> として、<br>リンクは反応するけれどどこにも行かない、みたいな使い方もできるそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>実用性があるかどうかはわかりませんが、<br>ちょっとした発見だったので、投稿しました。</p><p>まあ、<code>void</code> で 4 文字、<code>{}</code> で 2 文字で、ちょっと負けていますが、<br>使いたい人がいればどうぞ！！</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> csharp </tag>
            
            <tag> そういえば </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tumblr でプログラミングに関する面白い投稿があったので紹介！</title>
      <link href="/2016/03/29/tumblr-interesting-posts/"/>
      <url>/2016/03/29/tumblr-interesting-posts/</url>
      
        <content type="html"><![CDATA[<p>tumblrに プログラミングに関するジョークがありました。<br>すごく「たしかに」「あるある」と思えたので、紹介します。</p><h2 id="1つ目"><a href="#1つ目" class="headerlink" title="1つ目:"></a>1つ目:</h2><div class="tumblr-post" data-href="https://embed.tumblr.com/embed/post/KPn3mKXAhO-9u1uYKYX_vg/140329227580" data-did="7e32c2ffb932fe6a8efe8a71be0492825fdd1234"><a href="https://nandof.tumblr.com/post/140329227580/sometimes-you-just-gotta-drop-this" target="_blank" rel="noopener">https://nandof.tumblr.com/post/140329227580/sometimes-you-just-gotta-drop-this</a></div><script async src="https://secure.assets.tumblr.com/post.js"></script><p><code>sudo rm -rf /*</code> というコマンドについてです。<br>絵を見ると大体想像できると思いますが、絶対にやってはいけないコマンドです。<br>意味は、</p><ul><li><code>sudo</code> ・・ 管理者権限で動かす</li><li><code>rm</code> ・・削除するコマンド</li><li><code>-rf</code> の <code>r</code> ・・ディレクトリを再帰的に削除（ディレクトリの中のファイル・ディレクトリも削除）する</li><li><code>-rf</code> の <code>f</code> ・・確認せずに削除</li><li><code>/*</code> ・・ <code>/</code> （ルートディレクトリ）を消す。コメントアウトじゃないよ！</li></ul><p>です。<br>つまり、「管理者権限でルートディレクトリの中身を再帰的に確認せず消しちゃう」という<br>超やってはいけない（けどやりたくなる）コマンドです。</p><p>絵だとコマンドの意味がわかりやすくて、勉強にもなります。</p><p>コアラがポイッと簡単に灯油を投げて、めっちゃおっきいことが起こっているのも、<br>「簡単に危険なコマンドが打てる」ということに当てはめられるし、<br>火がついた後、コアラの顔が逆光で薄暗くなるのも妙にリアルです。</p><h2 id="2つ目"><a href="#2つ目" class="headerlink" title="2つ目:"></a>2つ目:</h2><div class="tumblr-post" data-href="https://embed.tumblr.com/embed/post/KPn3mKXAhO-9u1uYKYX_vg/140539367115" data-did="e9f37bf93dfe601edb0ec296b618fd1b472c1237"><a href="https://nandof.tumblr.com/post/140539367115/when-debugging-code" target="_blank" rel="noopener">https://nandof.tumblr.com/post/140539367115/when-debugging-code</a></div><script async src="https://secure.assets.tumblr.com/post.js"></script><p>コードをデバッグするときによくあること。<br>まさに絵のとおり、<br>バグを必死に探していると見つからないけれど、<br>別のバグを探しているとさっき探していたバグが見つかることがよくあります。</p><p>動物たちの表情が一定なところや、<br>意志でなく、叩かれたことで動いている様子が機械っぽいですよね。</p><h2 id="3つ目"><a href="#3つ目" class="headerlink" title="3つ目:"></a>3つ目:</h2><div class="tumblr-post" data-href="https://embed.tumblr.com/embed/post/KPn3mKXAhO-9u1uYKYX_vg/124963799770" data-did="683b3d70531870b155cd53e0ef3390364dc3fb40"><a href="https://nandof.tumblr.com/post/124963799770/entering-the-bios" target="_blank" rel="noopener">https://nandof.tumblr.com/post/124963799770/entering-the-bios</a></div><script async src="https://secure.assets.tumblr.com/post.js"></script><p>BIOS を起動するときの感じです。<br>ぼくのPCの場合、BIOS を起動するとき、<br>電源ボタンを押してから Windows の表示が出るまで、ファンクションキー（何番か忘れた）を連打します。<br>この時の気持ちが、まさにこの Gif アニメの通りでした。</p><p>他にも、#programming joke とかで調べると出てきます。<br>以上、tumblr からでしたー！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tumblr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Rx.js】画像を非同期に読み込むサンプルコード</title>
      <link href="/2016/03/25/rxjs-async-load-image/"/>
      <url>/2016/03/25/rxjs-async-load-image/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。</p><p>非同期の処理をいい感じに使える js のライブラリないかなーと探していたら、<br>Rx.js というのを見つけたので、それを使ったサンプル？を紹介します。</p><h2 id="Rx-js-とは？"><a href="#Rx-js-とは？" class="headerlink" title="Rx.js とは？"></a>Rx.js とは？</h2><p>.NET 向けの Reactive Extensions を js 用に移植したもの。<br>ぼくは、最初 .NET の方を使っていて、<br>「それの js 版があったらいいな～」と思っていたらピンポイントであったという感じですー。</p><h2 id="コードの概要"><a href="#コードの概要" class="headerlink" title="コードの概要"></a>コードの概要</h2><p>では、今回書いてみるコードの概要を紹介します。</p><ol><li>３つの画像が配列になっている</li><li>それらを非同期で読むが、１つ読み終わったら次を読むという条件。</li><li>１つ読み終わった後と全部読み終わった後にコールバックする</li></ol><p>全部いっぺんに非同期で読めばいいと思うかもしれませんが、<br>画像がウエーブみたいになって読み込まれていくようにしたかったんです。</p><h2 id="【Before】Rx-js-を使わない場合のコード"><a href="#【Before】Rx-js-を使わない場合のコード" class="headerlink" title="【Before】Rx.js を使わない場合のコード"></a>【Before】Rx.js を使わない場合のコード</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = [<span class="string">"1.png"</span>, <span class="string">"2.png"</span>, <span class="string">"3.png"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImages</span>(<span class="params">oneByOne, finished</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> loadImage = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"image"</span>);</span><br><span class="line">    elem.src = name;</span><br><span class="line">    elem.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      oneByOne(index);</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= images.length - <span class="number">1</span>) &#123;</span><br><span class="line">        finished();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        loadImage(images[++index]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  loadImage(images[index]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  loadImages(<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">"個目を読み込みました"</span>);</span><br><span class="line">  &#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"読み込み完了"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードを、Rx.js を使って、シンプルにしてみます。</p><h2 id="【After】Rx-js-の降臨"><a href="#【After】Rx-js-の降臨" class="headerlink" title="【After】Rx.js の降臨"></a>【After】Rx.js の降臨</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 読み込むとき、ES6 ( + browserify) だと便利</span></span><br><span class="line"><span class="keyword">import</span> Rx <span class="keyword">from</span> <span class="string">"rx"</span>; <span class="comment">// ES6 modules</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> images = [<span class="string">"1.png"</span>, <span class="string">"2.png"</span>, <span class="string">"3.png"</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImages</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Rx.Observable.create(loadImagesObservable);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImagesObservable</span>(<span class="params">observer</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> loadImage = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"image"</span>);</span><br><span class="line">    elem.src = name;</span><br><span class="line">    elem.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      observer.onNext(index);</span><br><span class="line">      <span class="keyword">if</span> (index &gt;= images.length - <span class="number">1</span>) &#123;</span><br><span class="line">        observer.onCompleted();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        loadImage(images[++index]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  loadImage(images[index]);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> subscription = loadImages().subscribe(<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">"個目を読み込みました"</span>);</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Observe Error: "</span> + err);</span><br><span class="line">  &#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"読み込み完了"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>１つ読み終わった時 → <code>observer.onNext</code></li><li>全部読み終わった時 → <code>observer.onCompleted</code></li></ul><p>に当てはめました。</p><h2 id="Rx-js-を使うメリット"><a href="#Rx-js-を使うメリット" class="headerlink" title="Rx.js を使うメリット"></a>Rx.js を使うメリット</h2><h3 id="キャンセル時の処理を追加できる"><a href="#キャンセル時の処理を追加できる" class="headerlink" title="キャンセル時の処理を追加できる"></a>キャンセル時の処理を追加できる</h3><p>上のコードでは書いていませんが、<br><code>subscription.dispose</code> でキャンセルでき、<br>loadImagesObservable の返り値の関数で、dispose された時の処理を追加できるので、<br>そこで読み込みの処理を停止するように書けば、簡単にできます！</p><p>キャンセル時の処理を書いた例： <a href="https://gist.github.com/shundroid/5bcf7da64f2d2ec7c924c5bd3d9fd4a8" target="_blank" rel="noopener">Gist</a></p><h3 id="filter-ができる"><a href="#filter-ができる" class="headerlink" title="filter ができる"></a>filter ができる</h3><p><code>loadImages().subscribe(...)</code> を、<code>loadImages().filter(...).subscribe(...)</code> にすれば、<br>フィルターを通すことも簡単にできます。</p><p>フィルターを使った例として、「5回に1回、○個目を読み込みましたと表示」するようにしてみます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function main() 内を変更</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> subscription = loadImages().filter(<span class="function"><span class="params">index</span> =&gt;</span> index % <span class="number">5</span> === <span class="number">0</span>).subscribe(<span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index + <span class="string">"個目を読み込みました"</span>);</span><br><span class="line">  &#125;, err =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Observe Error: "</span> + err);</span><br><span class="line">  &#125;, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"読み込み完了"</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フィルターを利用した例の全コード： <a href="https://gist.github.com/shundroid/1237769dba030c68623411104d6b53fd" target="_blank" rel="noopener">Gist</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://liginc.co.jp/web/js/151272" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="追記"><a href="#追記" class="headerlink" title="追記"></a>追記</h2><p>2016-04-07 : Rx.js を使ったメリットを中心とするように記事の内容を全面改訂。</p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> browserify </tag>
            
            <tag> html </tag>
            
            <tag> rx.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code の言語を変えたい時【Insiders も書くよ】</title>
      <link href="/2016/03/24/vscode-change-lang/"/>
      <url>/2016/03/24/vscode-change-lang/</url>
      
        <content type="html"><![CDATA[<p><strong>追記！！ 2016/03/31</strong><br>Version 0.10.13 から、言語の変更が可能となりました。<br>下の手順2 の、引数付きで起動（英語）にした状態で、<br><code>Ctrl + Shift + P</code> から「Configure Language」、<br>locale.json が開くので、そこで言語を変更できます。<br>参考 : <a href="https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#localization" target="_blank" rel="noopener">https://github.com/Microsoft/vscode-docs/blob/vnext/release-notes/latest.md#localization</a></p><p>こんにちはー。</p><p>ついに、VSCode が、日本語に対応したっぽいです！！<br><a href="http://code.visualstudio.com/Updates" target="_blank" rel="noopener">リリースノート</a>を見ると、v0.10.10 で、<code>There is support for localization and accessibility.</code> と書いてあります。</p><p>しかし、今回はあえて英語に戻したいと思います。<br>同時に、日本語・フランス語にする方法も書きます。<br>Insiders の場合の方法も書くよ☆</p><h2 id="英語に戻したい理由"><a href="#英語に戻したい理由" class="headerlink" title="英語に戻したい理由"></a>英語に戻したい理由</h2><ul><li>日本語だと、<code>Ctrl+Shift+P</code> で呼び出せる、コマンドパレットの項目も日本語で打ちにくい</li><li>今まで頑張って覚えた機能はすべて英語 -&gt; 水の泡・・</li><li>英語の勉強がしたい</li></ul><h2 id="手順1-VSCode-のパスを見つける"><a href="#手順1-VSCode-のパスを見つける" class="headerlink" title="手順1: VSCode のパスを見つける"></a>手順1: VSCode のパスを見つける</h2><p>ぱぱっとやり方をいうと、引数を付けて起動するのですが、<br>アプリがどこにあるのかわからないと出来無いので、探しましょう。</p><p>インストール先は、デフォルトで 64bit だと、<code>C:\Program Files (x86)</code>、<br>32 bit だと、<code>C:\Program Files</code> かな？</p><h3 id="Visual-Studio-Code（通常版）-の場合"><a href="#Visual-Studio-Code（通常版）-の場合" class="headerlink" title="Visual Studio Code（通常版） の場合:"></a>Visual Studio Code（通常版） の場合:</h3><p>アイコンが青ければこちらです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;インストール先&gt;\Microsoft VS Code\Code.exe</span><br><span class="line">僕の場合: C:\Program Files (x86)\Microsoft VS Code\Code.exe</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-Code-Insiders-の場合："><a href="#Visual-Studio-Code-Insiders-の場合：" class="headerlink" title="Visual Studio Code - Insiders の場合："></a>Visual Studio Code - Insiders の場合：</h3><p>アイコンが緑のほうです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;インストール先&gt;\Microsoft VS Code Insiders\Code - Insiders.exe</span><br><span class="line">僕の場合: C:\Program Files (x86)\Microsoft VS Code Insiders\Code - Insiders.exe</span><br></pre></td></tr></table></figure><h2 id="手順2-引数付きで起動する"><a href="#手順2-引数付きで起動する" class="headerlink" title="手順2: 引数付きで起動する"></a>手順2: 引数付きで起動する</h2><p>まず、英語に戻してみます。<br>コマンドプロンプトとか Cygwin とかで、次のようにして起動します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;手順1 VSCodeのパス&gt;&quot; --locale=en</span><br></pre></td></tr></table></figure><p>僕の場合:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en</span><br></pre></td></tr></table></figure><p><a href="http://www.flickr.com/photos/126344033@N06/25928084501" title="vscode-changed-lang" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1473/25928084501_08158d4a3d_o.png" alt="vscode-changed-lang"></a><br>英語で起動したぞ！</p><p>オプションは、次のような形式です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--locale=言語</span><br></pre></td></tr></table></figure><p>言語は、</p><ul><li>日本語: ja</li><li>フランス語: fr</li></ul><p>という感じで指定ができます！</p><h2 id="手順3-ショートカットを作る"><a href="#手順3-ショートカットを作る" class="headerlink" title="手順3: ショートカットを作る"></a>手順3: ショートカットを作る</h2><p>普段から bash で起動している人はいいですが、<br>そうでない人にはこのままだと使いにくいので、ショートカットを作ってみましょう。<br>先ほど 手順1 で確認した、<br>Code.exe (Code - Insiders.exe) が入っているフォルダをエクスプローラーで開きます。</p><p>右クリックで、「ショートカットの作成」。<br>普通に開くと、エクスプローラーの権限の問題で、デスクトップにショートカットが作成されます。</p><p>作成されたショートカットを右クリックで、「プロパティ」。<br>「リンク先」を、先ほど 手順2 で打ったパスと引数にします。<br>(僕の場合: <code>&quot;C:\Program Files (x86)\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en</code>)</p><p><a href="http://www.flickr.com/photos/126344033@N06/25902218022" title="vscode-shortcut-lang-option" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1593/25902218022_3bf17318fe_o.png" alt="vscode-shortcut-lang-option"></a></p><p>OK を押してウィンドウを閉じ、ショートカットを開くと、先ほどのようになるはずです。</p><h2 id="手順4-Open-With-Code-で開いた時も、設定した言語にする"><a href="#手順4-Open-With-Code-で開いた時も、設定した言語にする" class="headerlink" title="手順4: Open With Code で開いた時も、設定した言語にする"></a>手順4: Open With Code で開いた時も、設定した言語にする</h2><p>今の状態だと、ショートカットで開いた時のみ、言語が反映されます。<br>今度は、ファイルを右クリック -&gt; Open With Code ( - Insiders ) で開いた時の言語も変更しましょう。</p><p>レジストリの変更になります。<br>変更は自己責任で行ってください。よろしくおねがいします。</p><p>Win + R で、「regedit」と入力し、レジストリ エディターを開きます。<br>※ 途中、UAC が表示される場合があります。</p><h3 id="Visual-Studio-Code-通常版-の場合"><a href="#Visual-Studio-Code-通常版-の場合" class="headerlink" title="Visual Studio Code (通常版) の場合"></a>Visual Studio Code (通常版) の場合</h3><p>アイコンが青ければこちらです。</p><p>左のビューで、「<code>HKEY_CLASSES_ROOT\*\shell\VSCode\command</code>」とたどります。<br>(既定) のデータを修正します。(“%1” の前に、locale オプションを設定します)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;インストール先&gt;\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en &quot;%1&quot;</span><br></pre></td></tr></table></figure></p><p><code>&quot;%1&quot;</code> を忘れずに！<br>(僕の場合: <code>&quot;C:\Program Files (x86)\Microsoft VS Code\Code.exe&quot; --locale=en &quot;%1&quot;</code>)</p><p>これで、ファイルを右クリックした時の設定は終わりました。</p><p>次に、フォルダを右クリックした時の設定です。<br>左のビューで、「<code>HKEY_CLASSES_ROOT\Directory\shell\VSCode\command</code>」とたどります。<br>(既定) のデータを修正します。(“%<strong>V</strong>“ の前に、locale オプションを設定します)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;インストール先&gt;\Microsoft VS Code\Code.exe&quot; --locale=en &quot;%V&quot;</span><br></pre></td></tr></table></figure></p><p>“%<strong>V</strong>“です！間違えないように！</p><p>これで OK です！</p><h3 id="Visual-Studio-Code-Insiders-の場合"><a href="#Visual-Studio-Code-Insiders-の場合" class="headerlink" title="Visual Studio Code - Insiders の場合"></a>Visual Studio Code - Insiders の場合</h3><p>アイコンが緑のほうです。</p><p>左のビューで、「<code>HKEY_CLASSES_ROOT\*\shell\VSCodeInsiders\command</code>」とたどります。<br>(既定) のデータを修正します。(“%1” の前に、locale オプションを設定します)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;インストール先&gt;\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en &quot;%1&quot;</span><br></pre></td></tr></table></figure></p><p><code>&quot;%1&quot;</code> を忘れずに！<br>(僕の場合: <code>&quot;C:\Program Files (x86)\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en &quot;%1&quot;</code>)</p><p>これで、ファイルを右クリックした時の設定は終わりました。</p><p>次に、フォルダを右クリックした時の設定です。<br>左のビューで、「<code>HKEY_CLASSES_ROOT\Directory\shell\VSCodeInsiders\command</code>」とたどります。<br>(既定) のデータを修正します。(“%<strong>V</strong>“ の前に、locale オプションを設定します)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;&lt;インストール先&gt;\Microsoft VS Code Insiders\Code - Insiders.exe&quot; --locale=en &quot;%V&quot;</span><br></pre></td></tr></table></figure></p><p>“%<strong>V</strong>“です！間違えないように！</p><p>これで OK です！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.atmarkit.co.jp/ait/articles/0511/19/news016.html" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>レジストリのパス</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> windows </tag>
            
            <tag> regedit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sphero.js で、指定した時間だけ orb.roll をしたい</title>
      <link href="/2016/03/17/orb-roll-with-time/"/>
      <url>/2016/03/17/orb-roll-with-time/</url>
      
        <content type="html"><![CDATA[<p>しばらく投稿してなくてすみません。</p><p>Cities Skylines にハマっていました。<br>え？ <a href="https://asterisks.netlify.com/2016/03/06/slow-cities-skylines/">動かないんじゃない</a>のだって？<br>VAIO の設定で、CPU を静かさ優先 -&gt; パフォーマンス優先にしたら、なんとか動きました。<br>こんなに違うんだ・・<br>その代わり、パソコンがあったかい～☆し、めっちゃうなっています。<br>めっちゃ重いけど、めっちゃ面白いです。</p><p>さて、今回は、Sphero を Node.js から動かせるというすぐれもの、<br>Sphero.js に関する Tips ですー。<br>内容はタイトルの通り！</p><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sphero = <span class="built_in">require</span>(<span class="string">"sphero"</span>);</span><br><span class="line"><span class="keyword">var</span> orb = sphero(<span class="string">"xxx"</span>);</span><br><span class="line"></span><br><span class="line">orb.connect(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    orb.color(<span class="string">"blue"</span>);</span><br><span class="line">    orb.roll(<span class="number">100</span>, <span class="number">0</span>);</span><br><span class="line">    setTimeout(b, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    orb.color(<span class="string">"red"</span>);</span><br><span class="line">    orb.roll(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    setTimeout(c, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    orb.color(<span class="string">"green"</span>);</span><br><span class="line">    orb.roll(<span class="number">100</span>, <span class="number">180</span>);</span><br><span class="line">    setTimeout(d, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    orb.color(<span class="string">"yellow"</span>);</span><br><span class="line">    orb.roll(<span class="number">0</span>, <span class="number">180</span>);</span><br><span class="line">    setTimeout(a, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  orb.color(<span class="string">"black"</span>);</span><br><span class="line">  setTimeout(a, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="コードの解説"><a href="#コードの解説" class="headerlink" title="コードの解説"></a>コードの解説</h2><p>0.1 秒毎に、orb.roll を動かす or 止めると、<br>色を変えています。</p><p>最初は正常に動くのですが、だんだん遅れて、<br>最終的には止まってしまいました。</p><p>これでは、正確に 0.1 秒動くことができなくなってしまいます。</p><h2 id="解決法"><a href="#解決法" class="headerlink" title="解決法"></a>解決法</h2><p>orb.roll で Sphero を動かす前に orb.ping をして、<br>通信ができるかどうか確認するとできました。</p><script src="https://gist.github.com/shundroid/d51c1ae93f047c585872.js"></script><p>止まる前は orb.ping はしません。<br>してしまうと、0.1 秒後に止まると出来無いからです。</p><p>止まるときに通信できてなくて、<br>遅れてしまったらもうしょうがないですが・・</p><p>ぼくが試した感じでは、<br>そういうトラブルはなかったです。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
            <tag> sphero </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cities Skylines やりたいけど重すぎるよ・・</title>
      <link href="/2016/03/06/slow-cities-skylines/"/>
      <url>/2016/03/06/slow-cities-skylines/</url>
      
        <content type="html"><![CDATA[<p>Cities Skylines、めっちゃ面白いです！！<br>↓の記事でも紹介しました。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/02/06/bought-cities-skylines/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>しかし、人口が 7000 人（少なっ！）になって、<br>もう使いものにならないくらい重くなってしまいました。</p><p><a href="http://www.flickr.com/photos/126344033@N06/25256719590" title="cs-my-city" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1470/25256719590_700c10d7f0_o.png" alt="cs-my-city"></a><br>スクリーンショット撮るの苦労した・・<br>（街は、<a href="https://www.youtube.com/watch?v=3pXNbo-0Lz4&amp;list=PL7lU7KIXvtiGYAazKEUiDssHXnFVnOjxF" target="_blank" rel="noopener">俺塚 orz さんの動画</a>を参考に作っています）</p><p>うぅぅ・・。<br>多分これぐらいの時から面白くなっていくと思うのに・・。</p><p>メモリは 12GB、CPU は、Core i5-3340M 2.70GHz、<br>GPU は、Intel HD Graphics 4000 （うそでしょ）でした。</p><p><a href="http://www.flickr.com/photos/126344033@N06/25433787612" title="benchmark-gpu" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1668/25433787612_12d810bfe5_o.png" alt="benchmark-gpu"></a><br><a href="http://www.twotop.co.jp/guide_parts/?contId=benchmark02" target="_blank" rel="noopener">ここ</a>のサイトのベンチマークで、<br>推奨である nVIDIA GeForce GTX 660 (2GB) とも、大違いです。</p><p>そりゃー動かないわな・・って感じのスペックですが、<br>Simcity は、ぬるぬる動いたんですよ・・</p><p>↑の記事で紹介した、設定をすべて最小にするですが、<br>それやっていると、街を作っている気分になれません・・。</p><p>マップが広いから仕方がないか・・</p><p>そろそろデスクトップパソコンがほしいです。<br>ノートパソコンのGPUを変えるという方法もありますが、<br>結構お高く、持ち運ぶので、<br>落としちゃったとき、悲しいだろうな・・というのもあります。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> gpu </tag>
            
            <tag> cities-sky-lines </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>暗号化はなぜ大切なのか</title>
      <link href="/2016/03/01/importance-of-encryption/"/>
      <url>/2016/03/01/importance-of-encryption/</url>
      
        <content type="html"><![CDATA[<p>この前、<a href="https://www.mozilla.jp/blog/entry/10533/" target="_blank" rel="noopener">Mozilla Japanの記事</a>で、<br>暗号化の大切さがわかるビデオが紹介されましたので、<br>共有したいと思います。</p><script type="text/javascript" src="http://amara.org/embedder-iframe"></script><div class="amara-embed" data-height="370px" data-width="620px" data-url="http://www.youtube.com/watch?v=-dIV47ZzWOY" data-initial-language="ja" data-show-subtitles-default="true"><br></div><p>最近、Apple に対して、米国政府が、<br>セキュリティ保護をぬけ出すバックドアを作るなどと命令したことで、<br>暗号化の話題が広がっているように感じます。</p><p>データが暗号化されずに送信される場合、<br>他の人に知られたくない個人情報や、<br>サプライズも、すべて第三者にわかってしまいます。</p><p>暗号化の重要さが、改めてわかりました。</p><p>ログイン情報を入力するときなどは、<br>プロトコルが「https」になっていて、鍵のアイコンが付いているか、<br>確認してから送信するようにしましょう。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mozilla </tag>
            
            <tag> privacy </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode のExtensionを開発してみる</title>
      <link href="/2016/02/24/how-to-develop-vscode-extensions/"/>
      <url>/2016/02/24/how-to-develop-vscode-extensions/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。<br>Visual Studio Code、使っていますか？<br>ぼくはこのエディタが大好きです。</p><p>今回は、このエディタの Extension（＝プラグイン）の開発をしていきたいと思います。</p><p>※ node.js が必要です！</p><h2 id="開発方法"><a href="#開発方法" class="headerlink" title="開発方法"></a>開発方法</h2><ul><li>TypeScript + Node.js でいけます。</li><li>ジェネレータは Yeoman でできています。</li></ul><h2 id="手順1-Yeomanを入れる。"><a href="#手順1-Yeomanを入れる。" class="headerlink" title="手順1: Yeomanを入れる。"></a>手順1: Yeomanを入れる。</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g yo</span><br></pre></td></tr></table></figure><p>また、VSCode Extension generatorも入れます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g generator-code</span><br></pre></td></tr></table></figure><h2 id="手順2-ジェネレータを実行"><a href="#手順2-ジェネレータを実行" class="headerlink" title="手順2: ジェネレータを実行"></a>手順2: ジェネレータを実行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$ yo code</span><br><span class="line">? ==========================================================================</span><br><span class="line">We&apos;re constantly looking for ways to make yo better!</span><br><span class="line">May we anonymously report usage statistics to improve the tool over time?</span><br><span class="line">More info: https://github.com/yeoman/insight &amp; http://yeoman.io</span><br><span class="line">========================================================================== Yes</span><br><span class="line"></span><br><span class="line">     _-----_</span><br><span class="line">    |       |    .--------------------------.</span><br><span class="line">    |--(o)--|    |   Welcome to the Visual  |</span><br><span class="line">   `---------´   |   Studio Code Extension  |</span><br><span class="line">    ( _´U`_ )    |        generator!        |</span><br><span class="line">    /___A___\    &apos;--------------------------&apos;</span><br><span class="line">     |  ~  |</span><br><span class="line">   __&apos;.___.&apos;__</span><br><span class="line"> ´   `  |° ´ Y `</span><br><span class="line"></span><br><span class="line">? What type of extension do you want to create? New Extension (TypeScript)</span><br><span class="line">? What&apos;s the name of your extension? first-ext</span><br><span class="line">? What&apos;s the identifier of your extension? first-ext</span><br><span class="line">? What&apos;s the description of your extension? first-ext</span><br><span class="line">? What&apos;s your publisher name? xxx</span><br><span class="line">? Initialize a git repository? No</span><br><span class="line">   create first-ext\.vscode\launch.json</span><br><span class="line">   create first-ext\.vscode\settings.json</span><br><span class="line">   create first-ext\.vscode\tasks.json</span><br><span class="line">   create first-ext\typings\node.d.ts</span><br><span class="line">   create first-ext\typings\vscode-typings.d.ts</span><br><span class="line">   create first-ext\test\extension.test.ts</span><br><span class="line">   create first-ext\test\index.ts</span><br><span class="line">   create first-ext\.vscodeignore</span><br><span class="line">   create first-ext\.gitignore</span><br><span class="line">   create first-ext\README.md</span><br><span class="line">   create first-ext\vsc-extension-quickstart.md</span><br><span class="line">   create first-ext\tsconfig.json</span><br><span class="line">   create first-ext\src\extension.ts</span><br><span class="line">   create first-ext\package.json</span><br><span class="line"></span><br><span class="line">I&apos;m all done. Running npm install for you to install the required dependencies. If this fails, try running the command yourself.</span><br></pre></td></tr></table></figure><p>Extension の形式は、TypeScript がおすすめです。<br>開発するとき、インテリセンス君が強力に働いてくれて便利だからです。</p><p>その後、名前、識別子、説明、開発者名、Git と聞かれます。<br>今回は、Git の設定は n にして置きました。</p><p>ずらーとモジュールがインストールされます。</p><h2 id="手順3-Extension-を実行"><a href="#手順3-Extension-を実行" class="headerlink" title="手順3: Extension を実行"></a>手順3: Extension を実行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> first-ext</span><br><span class="line">$ code .</span><br></pre></td></tr></table></figure><p><code>code .</code> がうまくいかない時は、<br>first-ext フォルダを VSCode で開いてください。</p><p>ジェネレータを実行した状態で、<br>Hello world が試せるようになっているので、<br>作った Extension を実行してみましょう。</p><p>左側のデバッグボタン（虫）をクリック、緑色の再生ボタンをクリックします。<br>（ちなみに <strong>F5 キーでもいけますー</strong>）<br>すると、デバッグ用の VSCode がもう一つ起動します。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24862009719" title="vscode-ext-debug" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1497/24862009719_607d26bc9c_o.png" alt="vscode-ext-debug"></a></p><p>この状態で、Extension をテスト（＝実行）できるわけです。</p><p>デバッグ用に開いた VSCode で、<code>Ctrl + Shift + P</code> をしてコマンドパレットを開きます。<br><code>Hello world</code> と入力しEnter キーを押してみましょう。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24862009709" title="vscode-ext-command" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1659/24862009709_65bebe4b57_o.png" alt="vscode-ext-command"></a></p><p>Hello world というメッセージが表示されます。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24862009699" title="vscode-ext-info-message" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1503/24862009699_e0b1b4874e_o.png" alt="vscode-ext-info-message"></a></p><p>この動きは、すべて今作った Extension で動いています。</p><p>では、どういう仕組みで動いているのか見てみましょう。</p><h2 id="手順4-動く仕組みは・・？"><a href="#手順4-動く仕組みは・・？" class="headerlink" title="手順4: 動く仕組みは・・？"></a>手順4: 動く仕組みは・・？</h2><p><a href="http://www.flickr.com/photos/126344033@N06/26013624410" title="vscode-ext-nagare" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1615/26013624410_2d1e2203bb_o.png" alt="vscode-ext-nagare"></a><br>↑ ざっくりとした流れの画像</p><p>いまデバッグしていたウインドウは閉じて、<br>先ほどのプラグインを開いたウインドウに切り替えましょう。</p><p>まず、コマンドパレットで「Hello World」と入力しましたね。<br>これは<code>package.json</code> の、<code>contributes.commands</code> から取得されています。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24602891453" title="vscode-ext-package.json" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1443/24602891453_983c4662da_o.png" alt="vscode-ext-package.json"></a></p><p>ここでは、コマンドパレットで<code>Hello World</code>が実行されたら、<br><code>extension.sayHello</code>を実行すると書いてあります。</p><p>では、この <code>extension.sayHello</code> はどこにあるのでしょう。<br><code>src/extension.ts</code> を開いてみましょう。</p><p><a href="http://www.flickr.com/photos/126344033@N06/25136490081" title="vscode-ext-extension.ts" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1705/25136490081_b5400e70df_o.png" alt="vscode-ext-extension.ts"></a></p><p><code>activate</code> 関数の中に、<br><code>vscode.commands.registerCommand(...)</code>を呼び出している行があります。（17行目）<br>ここでは、<code>extension.sayHello</code> コマンドが呼び出されたら、<br>第二引数のコールバック関数を実行する、となっています。</p><p>コールバック関数には、<br><code>vscode.window.showInformationMessage(&#39;Hello World!&#39;)</code><br>と書かれています。<br>これは、指定された文字列を先ほどのようなメッセージで表示する関数です。</p><h2 id="手順5-少し変えてみる"><a href="#手順5-少し変えてみる" class="headerlink" title="手順5: 少し変えてみる"></a>手順5: 少し変えてみる</h2><p>extension.ts を、少し変更してみましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> disposable = vscode.commands.registerCommand(<span class="string">'extension.sayHello'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// The code you place here will be executed every time your command is executed</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Display a message box to the user</span></span><br><span class="line">  vscode.window.showErrorMessage(<span class="string">'Hello Error Message!'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>似た関数で、<code>showErrorMessage</code> という物があります。<br>これは、エラーを表示する関数です。</p><p>実行してみましょう。手順は先程と同じです。<br>（F5キーでもいけるよ）</p><p>同じように、<code>Ctrl+Shift+P</code> から Hello World を選ぶと、</p><p><a href="http://www.flickr.com/photos/126344033@N06/24599101274" title="vscode-ext-show-err-msg" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1678/24599101274_19ea89d76c_o.png" alt="vscode-ext-show-err-msg"></a></p><p>エラーメッセージ出現！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>このように、Extension は、<br>TypeScript + Node.js で開発できます。</p><p>また、公式サイトにも英語ですが、<br>Extension の作成方法が載っているので、<br>見てみてください。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://code.visualstudio.com/docs/extensions/example-hello-world" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> vscode-ext </tag>
            
            <tag> nodejs </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScriptのES6 Moduleでexport varしたものに書き込む</title>
      <link href="/2016/02/23/ts-es6-module-export-var/"/>
      <url>/2016/02/23/ts-es6-module-export-var/</url>
      
        <content type="html"><![CDATA[<p>TypeScriptで、次のようにしたい時があります。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> field1 = <span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;field1&#125; <span class="keyword">from</span> <span class="string">"./export"</span>;</span><br><span class="line"><span class="comment">// エラーになる</span></span><br><span class="line">field1 = <span class="string">"bar"</span>;</span><br></pre></td></tr></table></figure><p>しかし、エラーになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Invalid left-hand side of assignment expression.</span><br></pre></td></tr></table></figure><h2 id="方法１：namespace-で囲む"><a href="#方法１：namespace-で囲む" class="headerlink" title="方法１：namespace で囲む"></a>方法１：namespace で囲む</h2><p>これは、変数を namespace（旧 module ）で<br>囲ってあげることで解決できます。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> fields &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">var</span> field1 = <span class="string">"foo"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;fields&#125; <span class="keyword">from</span> <span class="string">"./export"</span>;</span><br><span class="line">fields.field1 = <span class="string">"bar"</span>;</span><br></pre></td></tr></table></figure><p>前は、namespace を、module と定義していましたが、<br>ES6 module と混同してしまうので、<br>これからは、namespace を使います。</p><h2 id="方法２：setter-となる関数を使う"><a href="#方法２：setter-となる関数を使う" class="headerlink" title="方法２：setter となる関数を使う"></a>方法２：setter となる関数を使う</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> field1 = <span class="string">"foo"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setField1</span>(<span class="params">text:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  field1 = text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;setField1&#125; <span class="keyword">from</span> <span class="string">"./export"</span>;</span><br><span class="line">setField1(<span class="string">"bar"</span>);</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>仕様がムズカシイ。<br>どうやら export default var とかもエラーになるから、<br>直接フィールドを export するのは良くないのかもしれないです。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> typescript </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AzureでGithubからデプロイするとき、jsonやwoffなどを読み込む</title>
      <link href="/2016/02/18/azure-json-woff-from-github/"/>
      <url>/2016/02/18/azure-json-woff-from-github/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！<br>Azure の App Service では、Github から、<br>直接デプロイすることができて便利です。</p><p>Githubとの連携は、下のサイトが便利です。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://sakapon.wordpress.com/2014/04/14/azure-github-ci/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h2 id="Json-を読み込められるようにする"><a href="#Json-を読み込められるようにする" class="headerlink" title="Json を読み込められるようにする"></a>Json を読み込められるようにする</h2><p>Web アプリケーションで、JSON が使われていることは多いと思います。<br>しかし、初期状態では、JSON をレスポンスとして返すことはできないため、<br>ajax とかができなくなってしまいます。<br>これは、App Services で使っている IIS で、<br>Json の MIME が読み込まれていないためです。</p><p>Git のリポジトリのルートディレクトリに、<br>web.config というファイルを作って、次のようにします。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">staticContent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".json"</span> <span class="attr">mimeType</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">staticContent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>これでコミット＆プッシュすると、 json ファイルが読み込まれるようになりました。</p><h2 id="Woff、Woff2-形式のフォントを読み込む"><a href="#Woff、Woff2-形式のフォントを読み込む" class="headerlink" title="Woff、Woff2 形式のフォントを読み込む"></a>Woff、Woff2 形式のフォントを読み込む</h2><p>上の staticContent タグ内に、次のように追加します。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff"</span> <span class="attr">mimeType</span>=<span class="string">"application/x-font-woff"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".woff2"</span> <span class="attr">mimeType</span>=<span class="string">"font/x-woff2"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>他の形式を追加したい場合、次のようにします。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mimeMap</span> <span class="attr">fileExtension</span>=<span class="string">".拡張子"</span> <span class="attr">mimeType</span>=<span class="string">"MIME タイプ"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>これで woff、woff2 形式のフォントも読み込められるようになりました。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> azure </tag>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> iis </tag>
            
            <tag> mime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitで非公開のリポジトリが使いたかったらBitbucket！！</title>
      <link href="/2016/02/16/git-private-bitbucket/"/>
      <url>/2016/02/16/git-private-bitbucket/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！！</p><p>Gitいいですよね～～！！<br>バックアップもしっかり取れるし、間違えてもすぐに戻せます。</p><p>ぼくはリモートでGithubを使っていましたが、<br>非公開のリポジトリが使いたくなりました。</p><p>Githubで非公開のリポジトリを作るには、<br>お金を払うか、学生認証するかしかありません。</p><p>ぼくの場合、「学生」という文字に一文字余計についていて、<br>学生なのか学生じゃないのかよくわからないし、<br>認証とかたぶんできないし、<br>審査英語だし・・</p><p>というわけで、Bitbucketを使うことにしました。</p><p><a href="https://bitbucket.org" target="_blank" rel="noopener">https://bitbucket.org</a><br><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/02/spotlight-branch-management-644x469.png" alt="bitbucket"><br>画像はBitbucket 公式サイトから</p><p><a href="https://bitbucket.org/account/signup/" target="_blank" rel="noopener">https://bitbucket.org/account/signup/</a>で、<br>アカウントを作成します。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24765994890" title="bitbucket-private" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1690/24765994890_1798778d7e_o.png" alt="bitbucket-private"></a></p><p>上のメニューから、「リポジトリ」、「リポジトリの作成」を選択し、<br>Repository name に適当な名前を指定、<br>アクセスレベルを非公開にして、リポジトリタイプは Git のままで<br>リポジトリを作成します。</p><p>これで外からアクセスしても見えないリポジトリが作成できました。</p><p>しかも日本語というのもいいです！！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> bitbucket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityのSceneManagerで、シーンが存在するか確認する</title>
      <link href="/2016/02/11/unity-exists-scene/"/>
      <url>/2016/02/11/unity-exists-scene/</url>
      
        <content type="html"><![CDATA[<p>Unity 5.3 から追加された、Multi Scene Editingで、<br>シーンを追加する時、<br>同じシーンを何個も追加したくない！ってこと、ありますよね。</p><p>「SceneManager.Contains()」的なメソッドがあれば最高なのですが、<br>アクティブなシーンしか<br>取れなかったりとかするんですよねー（GetActiveScene 関数）。</p><p>そこで、次のようにしました。<br>しかし、Unity 5.3.1 くらいではOKだったのですが、<br>5.3.2にしたら非推奨になっちゃってw・・</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadMyScene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// MyScene1 というシーンが存在しなければ</span></span><br><span class="line">    <span class="keyword">if</span> (SceneManager.GetAllScenes().Count((scene) =&amp;gt; scene.name == &amp;quot;MyScene1&amp;quot;) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.LoadScene(&amp;quot;MyScene1&amp;quot;, LoadSceneMode.Additive);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Linqで、すべてのシーンの中から、指定された名前のシーンが 1 以上の場合は存在するとしました。<br>しかし、すべてのシーンを取得する、「GetAllScenes 関数」が非推奨になってしまいました。<br>1行で書けるのがよかったのでしたが、しょうがない。for文をつかって地道にやろう。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadMyScene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!ContainsScene(&amp;quot;MyScene1&amp;quot;))</span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.LoadScene(&amp;quot;MyScene1&amp;quot;, LoadSceneMode.Additive);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ContainsScene</span>(<span class="params"><span class="keyword">string</span> sceneName</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp;lt; SceneManager.sceneCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (SceneManager.GetSceneAt(i).name == sceneName)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「using UnityEngine.SceneManagement」を追加するのを忘れずに。<br>これでハマったこともあります。</p><p>もっといい方法ないんですかねー・・。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【感動】UnityでC# 6.0 が使えた！！</title>
      <link href="/2016/02/07/unity-cs-6/"/>
      <url>/2016/02/07/unity-cs-6/</url>
      
        <content type="html"><![CDATA[<p><strong>追記：朗報</strong><br>Unity 2017 からは、デフォルトで C# 6.0 および .NET 4.6 が使用可能なようです！<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://qiita.com/divideby_zero/items/71a38acdbaa55e88e2d9" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>この記事では Unity 5 での場合を紹介しています。</p><p>こんにちはー！！</p><p>Unityでも、最新の C# 6.0 を使って、<br>async、await とかカッコよくコードを書きたいんだ ლ(´ڡ`ლ)</p><p>そんなことできないかなーと思って、調べてみました。</p><p>そしたら、なんと、ありました！！ので紹介します。</p><h2 id="1-リポジトリをダウンロード"><a href="#1-リポジトリをダウンロード" class="headerlink" title="1. リポジトリをダウンロード"></a>1. リポジトリをダウンロード</h2><p>C# 6.0関係のいろいろが入ったリポジトリをBitbucketからダウンロードします。</p><p><a href="https://bitbucket.org/alexzzzz/unity-c-5.0-and-6.0-integration/downloads" target="_blank" rel="noopener">https://bitbucket.org/alexzzzz/unity-c-5.0-and-6.0-integration/downloads</a></p><p>ダウンロードしたファイルは、Zip形式で圧縮されているので、展開します。</p><h2 id="2-プロジェクトにインポート"><a href="#2-プロジェクトにインポート" class="headerlink" title="2. プロジェクトにインポート"></a>2. プロジェクトにインポート</h2><p>Unityのプロジェクトのフォルダーを開き、<br>「CSharp60Support」をコピーします。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24867074325" title="unity-cs6-copy" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1703/24867074325_b1c72a083d_o.png" alt="unity-cs6-copy"></a></p><p>CSharp60Support内の、「CSharp60Support for Unity 5.unitypackage」<br>（Unity 4だったらUnity 4の方）を開き、<br>プロジェクトにインポートします。<br><a href="http://www.flickr.com/photos/126344033@N06/24240257703" title="import-cs6-unity" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1629/24240257703_66ea98f86c_o.png" alt="import-cs6-unity"></a></p><p><a href="http://www.flickr.com/photos/126344033@N06/24773724131" title="unity-cs6-many-errs" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1616/24773724131_c16e076fb9_o.png" alt="unity-cs6-many-errs"></a><br>大量にエラーが出ますが、気にせず、<br>「CSharp60Support」ディレクトリを右クリックし、「Reimport All」をクリック。<br><a href="http://www.flickr.com/photos/126344033@N06/24773724051" title="unity-cs6-reimport" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1624/24773724051_c81a7a219f_o.png" alt="unity-cs6-reimport"></a><br>ダイアログが出てくるので、「Reimport」を選択すると、Unityが再起動し、エラーがすべて消えます。</p><h2 id="3-試す"><a href="#3-試す" class="headerlink" title="3. 試す"></a>3. 試す</h2><p>新しいスクリプトを適当に作って、C# 6.0を試してみましょう。<br>試す機能は、<a href="https://msdn.microsoft.com/ja-jp/library/dn961160.aspx" target="_blank" rel="noopener">String interpolation</a>です。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">string</span> s1 = &amp;quot;world&amp;quot;;</span><br><span class="line">    <span class="keyword">string</span> s2 = $&amp;quot;Hello, &#123;s1&#125;&amp;quot;;</span><br><span class="line">    Debug.Log(s2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 略</span></span><br></pre></td></tr></table></figure><p>新しく空のゲームオブジェクト（Hierarchy右クリック「Create Empty」とか）を作成し、<br>作ったスクリプトをアタッチしましょう。</p><p>実行すると・・・・！<br><a href="http://www.flickr.com/photos/126344033@N06/24571760740" title="unity-cs6-success" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1638/24571760740_854a59e303_o.png" alt="unity-cs6-success"></a></p><p>できました～～！！</p><h2 id="4-Visual-Studio、MonoBehaviourでエラーが出るときは"><a href="#4-Visual-Studio、MonoBehaviourでエラーが出るときは" class="headerlink" title="4. Visual Studio、MonoBehaviourでエラーが出るときは"></a>4. Visual Studio、MonoBehaviourでエラーが出るときは</h2><p>Unityではエラーが出なくても、<br>「◯◯という機能はC# 6.0で使えて、C# 4では使えないよー」的なエラーが、<br>Visual Studio、MonoBehaviour側で出るときは、IDEを再起動しましょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これでのびのびとUnityが使える！</p><p>自分的には、C# 6.0で一番便利な機能は、↑の、<code>$&quot;{変数}&quot;</code>で、string.Formatっぽいのが使える機能です（名前忘れた -&gt; 追記: String interpolation らしい）<br>これが使えるのは本当に嬉しい！</p><p>（え、async 、await 使ってみないの）→試してみます！</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
            <tag> cs6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityのLoadSceneAsyncでの非同期処理</title>
      <link href="/2016/02/07/unity-loadsceneasync/"/>
      <url>/2016/02/07/unity-loadsceneasync/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！！</p><p>Unity 5.3 から、Multi Scene Editing が追加されましたね。</p><p>そこで、シーンを読み込んでから、<code>GameObject.Find</code> をする、<br>次のようなコードを動かしたのですが、うまくいきません。</p><p>TestGameObject は、追加するシーン Scene2 に入っているものとします。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadScene2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SceneManager.LoadScene(<span class="string">"Scene2"</span>, LoadSceneMode.Additive);</span><br><span class="line">    Debug.Log(GameObject.Find(<span class="string">"TestGameObject"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行してみると、Null が返ってきます。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24773308911" title="unity-loadsceneasync-ok" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1526/24773308911_e9f5c0488c_o.png" alt="unity-loadsceneasync-ok"></a></p><h2 id="なぜ？"><a href="#なぜ？" class="headerlink" title="なぜ？"></a>なぜ？</h2><p>これは、Scene2 が読み込まれるまで待たないで、<br>GameObject.Find を呼び出してしまっているからです！</p><h2 id="LoadSceneAsync-を使おう！"><a href="#LoadSceneAsync-を使おう！" class="headerlink" title="LoadSceneAsync を使おう！"></a>LoadSceneAsync を使おう！</h2><p>お、<code>LoadSceneAsync</code> とかいう、それらしい名前のがあるではないか。<br>そこで、LoadSceneAsync を使おうとしましたが、ハマりました。<br>C# の、async / await でするものだと間違えていて、<br>あれ？Unityの C# のバージョンじゃ、async とか使えなくねー・・</p><p>（使う方法もあります）<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/02/07/unity-cs-6/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>しかし、LoadSceneAsync の戻り値は、「UnityEngine.AsyncOperation」でした・・。<br>アシンクオペレーションってなんだっけ？（検索中）<br>そう、コルーチンを使うんだ。(｀･ω･´)ゞ</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadScene2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    StartCoroutine(<span class="string">"LoadScene2Coroutine"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">IEnumerator <span class="title">LoadScene2Coroutine</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">return</span> SceneManager.LoadSceneAsync(<span class="string">"Scene2"</span>, LoadSceneMode.Additive);</span><br><span class="line">    Debug.Log(GameObject.Find(<span class="string">"TestGameObject"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.flickr.com/photos/126344033@N06/24239873963" title="unity-loadscene-null" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1533/24239873963_2709f7acb6_o.png" alt="unity-loadscene-null"></a></p><p>これでシーンが読み込まれるまで待機してくれるようになりました。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cities: Skylines がセールだったから買ってみた</title>
      <link href="/2016/02/06/bought-cities-skylines/"/>
      <url>/2016/02/06/bought-cities-skylines/</url>
      
        <content type="html"><![CDATA[<p>やっとクリスマスプレゼントが買えました！！<br><a href="http://store.steampowered.com/app/255710/" target="_blank" rel="noopener">Cities: Skylines</a> です。</p><p>Steam で、旧正月セールが行われています。<br>Cities: Skylinesも、60%Off で売られていたので、買いました。</p><p>なぜクリスマスプレゼントがこんなに遅いのかというと、<br>クリスマスに、何を買うか迷っていて、やっと「よし、買おう！」と決心したところ、<br>なんと、セールが終わってしまいました・・。</p><p>そのあと、価格が再び下がるのを待っていたら、ついにきました！！</p><p><a href="http://www.flickr.com/photos/126344033@N06/24818057776" title="cities-skylines-sale" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1508/24818057776_7741f5770c_o.png" alt="cities-skylines-sale"></a><br>これはポチるしかない。</p><p>というわけで、早速プレイしてみました。</p><h2 id="重い！！"><a href="#重い！！" class="headerlink" title="重い！！"></a>重い！！</h2><p>僕の環境では、初期設定では非常に重い状態でした。</p><p>とりあえずよくわからないので、適当に全部「Disabled」「Low」にしておきます。<br><a href="http://www.flickr.com/photos/126344033@N06/24844399385" title="2016-02-06_12h24_24" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1653/24844399385_c897809363_o.png" alt="2016-02-06_12h24_24"></a><br>これでサクサク動きます！<br>Display Modeは、フルスクリーンより、ウィンドウで表示したほうが便利だよね、ってことで設定しました。</p><h2 id="日本語化"><a href="#日本語化" class="headerlink" title="日本語化"></a>日本語化</h2><p>いきなり、「contaminated」とかの単語が出てきても、よくわからないので、<br>ここは日本語に頼りましょう。<br><a href="http://citiesskylines.wiki.fc2.com/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96" target="_blank" rel="noopener">http://citiesskylines.wiki.fc2.com/wiki/%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%8C%96</a>を参考に、日本語にします。</p><h2 id="マップの操作"><a href="#マップの操作" class="headerlink" title="マップの操作"></a>マップの操作</h2><ul><li>カメラの移動 ： WASDキー。Simcityと違うなあ。</li><li>拡大・縮小 ： マウスホイール。これはSimcityと同じ。</li><li>回転 ： マウスホイールをクリックするやつ。これもSimcityと同じ。</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>まだ全然始めたばかりですけど、Simcityと同じくらい面白そうです！<br>セールは 2016年2月13日（UTCかな）までなので、買いたい人はお早めにどうぞ。</p>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> steam </tag>
            
            <tag> cities-sky-lines </tag>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityでResourcesにあるTextFileを読む</title>
      <link href="/2016/02/04/unity-read-textfile-in-resouces/"/>
      <url>/2016/02/04/unity-read-textfile-in-resouces/</url>
      
        <content type="html"><![CDATA[<p>System.IOでFileStream作って・・とかやって、互換性とか難しいのかな・・と思ったら、<br>楽勝でした。<br>TextAssetを使います。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LoadText</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">string</span> textfile = <span class="string">"helloworld"</span>;</span><br><span class="line">    TextAsset tAsset = Resources.Load&amp;lt;TextAsset&amp;gt;(textfile);</span><br><span class="line">    Debug.Log(tAsset.text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TextAssetのtextプロパティで取得できます。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScriptの複雑な型</title>
      <link href="/2016/02/02/ts-types/"/>
      <url>/2016/02/02/ts-types/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！！<br>TypeScriptには、名前の通り、「型」があります。<br>その中で、複雑な型もあるので、紹介したいと思います。</p><h3 id="配列"><a href="#配列" class="headerlink" title="配列"></a>配列</h3><p>2つの定義の方法があります。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numArray: <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">42</span>];</span><br><span class="line"><span class="keyword">var</span> numArray2: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">0</span>, <span class="number">42</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// これも上と同じ</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numArray); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(numArray <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="連想配列"><a href="#連想配列" class="headerlink" title="連想配列"></a>連想配列</h3><p>知らなかった！いままでは Object 型とか、any とか使っていました・・</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hash1: &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125; = &#123; <span class="string">"a1"</span>: <span class="string">"123"</span>, <span class="string">"b2"</span>: <span class="string">"def"</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> hash2: &#123;[key: <span class="built_in">number</span>]: HTMLElement&#125; = &#123; <span class="number">1</span>: <span class="built_in">document</span>.getElementById(<span class="string">"elem"</span>), <span class="number">42</span>: <span class="built_in">document</span>.getElementById(<span class="string">"42"</span>) &#125;;</span><br></pre></td></tr></table></figure><p>構文は、次のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;[key: インデックスの型]: 値の型&#125;</span><br></pre></td></tr></table></figure><h3 id="応用-2次元配列"><a href="#応用-2次元配列" class="headerlink" title="応用: 2次元配列"></a>応用: 2次元配列</h3><p>次のような配列は、どんな型にしたらよいでしょう。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"tomato"</span>], [<span class="string">"fire"</span>, <span class="string">"water"</span>, <span class="string">"tree"</span>]]</span><br></pre></td></tr></table></figure><p>文字列の2次元配列です。<br>まず配列の中に配列があって、その中に文字列ということなので、次のように書きます。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ar: <span class="built_in">Array</span>&lt;<span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;&gt;;</span><br></pre></td></tr></table></figure><p>こんな書き方もできます。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ar2: <span class="built_in">string</span>[][];</span><br></pre></td></tr></table></figure><h3 id="応用-配列内の連想配列"><a href="#応用-配列内の連想配列" class="headerlink" title="応用: 配列内の連想配列"></a>応用: 配列内の連想配列</h3><p>では、次のような場合はどうでしょう。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">"name"</span>: <span class="string">"taro"</span>, <span class="string">"like"</span>: <span class="string">"apple"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"hoge"</span>, <span class="string">"like"</span>: <span class="string">"pc"</span>&#125;]</span><br></pre></td></tr></table></figure><p>配列の中に連想配列があるので、こんなのはどうでしょう。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">Array</span>&lt;&#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125;&gt;;</span><br></pre></td></tr></table></figure><p>こんな書き方もできます。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list2 = &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125;[];</span><br></pre></td></tr></table></figure><h2 id="型の別名を指定する"><a href="#型の別名を指定する" class="headerlink" title="型の別名を指定する"></a>型の別名を指定する</h2><p>いちいち、<code>{[key: string]: string}</code> とか、入力するのきついので、<br>別名をつけちゃいましょー!!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> type1 = &#123;[key: <span class="built_in">string</span>]: <span class="built_in">string</span>&#125;; <span class="comment">// 別名を指定</span></span><br><span class="line"><span class="keyword">var</span> list: type1 = &#123; <span class="string">"first"</span>: <span class="string">"abc"</span>, <span class="string">"second"</span>: <span class="string">"def"</span> &#125;;</span><br></pre></td></tr></table></figure><p><code>type 型の別名 = もととなる型</code> で定義できます!</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>TypeScriptには、numberとかの簡単な型もあるけれど、<br>連想配列とかは、Objectとするのではなく、インデックス、値の型まで指定できる！</p><p>さっきから「型」が「方」って変換されてつらいぜ！！</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unityで、コンポーネント内のフィールドを文字列から動的に変更する</title>
      <link href="/2016/01/31/unity-change-field/"/>
      <url>/2016/01/31/unity-change-field/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！！</p><p>Json からUnity2dのステージのデータを取ろうとしています。<br>その時、コンポーネントの値を変えたいと思い、この方法をやりました。<br>Reflectionを使ったりして、結構複雑でした。</p><script src="https://gist.github.com/shundroid/78a212436efbf8cd9f9a.js"></script><p>ReflectionTest コンポーネントの内容は次のようにします。</p><script src="https://gist.github.com/shundroid/c3da0289b1f78bccc44a.js"></script><p>これを、GameObject1 にアタッチすればできます。</p><h2 id="安全性は・・"><a href="#安全性は・・" class="headerlink" title="安全性は・・"></a>安全性は・・</h2><p>しかし、コンポーネント内すべてのフィールドにアクセスできるのは<br>ちょっとセキュリティが・・・なので、<br>特定の属性（ここではPermitReflection）がついたフィールドのみにアクセスできるようにします。</p><p>Reflectionに使ったしたコード（２つ上のコード）を、次のように編集します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    Type componentType = Type.GetType(componentType);</span><br><span class="line">    Attribute fieldAttribute = Attribute.GetCustomAttribute(componentType.GetField(fieldName), <span class="keyword">typeof</span>(PermitReflectionAttribute));</span><br><span class="line">    <span class="keyword">if</span> (fieldAttribute != <span class="literal">null</span>)  <span class="comment">// 属性が存在する場合のみ</span></span><br><span class="line">    &#123;</span><br><span class="line">        Component targetComponent = GameObject.Find(gameObjectName).GetComponent(componentName);</span><br><span class="line">        Type fieldType = componentType.InvokeMember(fieldName, BindingFlags.GetField, <span class="literal">null</span>, targetComponent, <span class="literal">null</span>).GetType();</span><br><span class="line">        <span class="keyword">object</span> parameter;</span><br><span class="line">        <span class="comment">// 汎用性を重視して、型がどんな場合でもstringからParseできるように</span></span><br><span class="line">        <span class="keyword">if</span> (fieldType == <span class="keyword">typeof</span>(<span class="keyword">string</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            parameter = fieldVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fieldType == <span class="keyword">typeof</span>(<span class="keyword">int</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            parameter = <span class="keyword">int</span>.Parse(fieldVal);</span><br><span class="line">        &#125;</span><br><span class="line">        componentType.InvokeMember(fieldName, BindingFlags.SetField, <span class="literal">null</span>, targetComponent, <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; parameter &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性を追加</span></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Field)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PermitReflectionAttribute</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReflectionTest コンポーネントは次のように変更します。</p><script src="https://gist.github.com/shundroid/4a0be6754cc31c059ace.js"></script><p>PermitReflectionAttributeですが、属性として指定する場合は、<br>Attributeを抜いて、PermitReflectionとします。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
            <tag> json </tag>
            
            <tag> reflection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpackで、CSS、Lessをロードする</title>
      <link href="/2016/01/31/webpack-load-css-less/"/>
      <url>/2016/01/31/webpack-load-css-less/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！</p><p><a href="https://webpack.github.io/" target="_blank" rel="noopener">Webpack</a>、知っていますか。<br><code>require()</code> などでできた、ファイルの依存関係を、簡単にしてくれます！<br>Browserify に似ていますが、Webpack はスタイルシート、JSON、画像なども一緒にできます！</p><h2 id="CSSを読む"><a href="#CSSを読む" class="headerlink" title="CSSを読む"></a>CSSを読む</h2><p>というわけで、スタイルシートをロードしましょう！<br>うまくいかない場合は、このリポジトリを見てください。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://github.com/shundroid/webpack-stylesheet-example" " width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>まず、フォルダー内で、次のコマンドを打ってください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev webpack</span><br></pre></td></tr></table></figure><p>次に、css を読む、loaderを追加します。<br>その時、css-loader のほかに、<strong>style-loader</strong> を入れます！ここでハマった・・</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure><p>ファイルの構成は、次のようになります。</p><ul><li>main.js</li><li>style.css</li><li>webpack.config.js</li><li>index.html</li></ul><p>main.jsは、次のように書いてください。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./style.css"</span>); <span class="comment">// cssを読み込む</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// alertとかをしておくと、読み込まれているかがわかりやすい</span></span><br><span class="line"><span class="comment">// alert("hello");</span></span><br></pre></td></tr></table></figure><p>style.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">loader</span>: <span class="string">'style!css'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>この状態で、Webpackを実行!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br><span class="line">Hash: XXX</span><br><span class="line">Version: webpack 2.0.6-beta</span><br><span class="line">Time: 1009ms</span><br><span class="line">    Asset   Size  Chunks             Chunk Names</span><br><span class="line">bundle.js  12 kB       0  [emitted]  main</span><br><span class="line">    + 6 hidden modules</span><br></pre></td></tr></table></figure><p>bundle.jsが生成されます。</p><p>index.htmlを開くと、水色のページが表示されます。</p><h1 id="Lessを読む"><a href="#Lessを読む" class="headerlink" title="Lessを読む"></a>Lessを読む</h1><p><a href="https://github.com/webpack/less-loader" target="_blank" rel="noopener">less-loader</a>を使用します。less もいります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev less-loader less</span><br></pre></td></tr></table></figure><p>先ほどの style.css を、style.less に変更してください。</p><p>style.less</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@color: orange;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: @color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lessが動いているか確かめるので、変数を使いました。</p><p>main.jsを編集します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// require("./style.css"); となっていたところを</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./style.less"</span>); <span class="comment">// にする。</span></span><br></pre></td></tr></table></figure><p>webpack.config.js も編集します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &#123; test: /\.css$/, loader: 'style!css' &#125; となっていたところを、</span></span><br><span class="line">&#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">loader</span>: <span class="string">'style!css!less'</span> &#125; <span class="comment">// にする。</span></span><br></pre></td></tr></table></figure><p>webpack を実行!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ webpack</span><br></pre></td></tr></table></figure><p>index.html を開くと、ページがオレンジ色になります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>css-loader、less-loader を使うと、スタイルをスクリプトに変換して、js、typescipt などと合体できる！</li><li>css-loader を入れるときは、style-loader も入れる。</li><li>less-loader を入れるときは、style-loader、less も入れる。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> webpack </tag>
            
            <tag> css </tag>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【感動】VSCodeのTypeScriptで、「Find Usages」相当の機能が使えた！</title>
      <link href="/2016/01/30/vscode-ts-find-usages/"/>
      <url>/2016/01/30/vscode-ts-find-usages/</url>
      
        <content type="html"><![CDATA[<iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/01/25/ts-ide-netbeans/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>ここで書いたように、VSCodeでは、TypeScriptで<br>「Find Usages」という、<br>WebStormとかで、変数、関数などがどこで使用できるかを<br>プロジェクト内で検索し、表示してくれる機能がないと思っていました。</p><p>しかし、ありました！！！</p><p>VSCodeでは、<code>Find All References</code> というらしいです。</p><p>検索したい変数、関数などにカーソルを置き、<code>Shift + F12</code> ！<br>もしくは、右クリック→「 Find All References 」でもできます。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24078154214" title="vscode-ts-find-usages" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1717/24078154214_c47e2b8475_o.png" alt="vscode-ts-find-usages"></a></p><p>似ている機能で「<code>Peek Definition</code>」という、定義を吹き出しで表示してくれるものがあります。<br>こちらのショートカットキーは、<code>Alt + F12</code> です。<br>今までは、これを使っていたし、これしかないと思っていましたが、<br><code>Shift + F12</code>で、定義も表示されてくれるので、もう使わなくていいです＾＾</p><p>というわけで、また NetBeans から VSCode にもどりました。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TypeScript】引数が違うメソッド同士をオーバーロード</title>
      <link href="/2016/01/30/ts-override-methods/"/>
      <url>/2016/01/30/ts-override-methods/</url>
      
        <content type="html"><![CDATA[<p>TypeScriptで、次のようなオーバーロードをしたかったです。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">void</span></span>; <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, pos: <span class="built_in">number</span>[]</span>): <span class="title">void</span></span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, pos?: <span class="built_in">number</span>[], x?:<span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 1のとき</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> pos !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 2のとき</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、エラーが出ました。<br>次のようにすればできます。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">void</span></span>; <span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, x: <span class="built_in">number</span>[]</span>): <span class="title">void</span></span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">num: <span class="built_in">number</span>, x: <span class="built_in">any</span>, y?: <span class="built_in">number</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="comment">// 1のとき</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">    <span class="comment">// 2のとき</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引数<strong>名</strong>を共通にすればできます。ちょっと違和感はありますが・・</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NetBeansで「fontconfig.properties」があるJDKの場所</title>
      <link href="/2016/01/27/netbeans-fontconfig-properties/"/>
      <url>/2016/01/27/netbeans-fontconfig-properties/</url>
      
        <content type="html"><![CDATA[<iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.torutk.com/projects/swe/wiki/NetBeans_%E3%83%AB%E3%83%83%E3%82%AF%E3%82%A2%E3%83%B3%E3%83%89%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%81%A8%E3%82%AB%E3%83%A9%E3%83%BC%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%A0%E3%81%A8%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%EF%BC%88Windows%EF%BC%89" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>こちらのサイトを参考に、<br>fontconfig.properties を編集して、日本語フォントはメイリオ、<br>英語は Consolas にしようとしていました。</p><p>しかし、僕の環境では、なぜかjdkがいくつも入っていて、<br>どれを変えたらいいのかわかりませんでした。</p><h1 id="netbeans-confに書かれていた！"><a href="#netbeans-confに書かれていた！" class="headerlink" title="netbeans.confに書かれていた！"></a>netbeans.confに書かれていた！</h1><p>NetBeansで使っているJdkのインストール先は、netbeans.confに書かれていました。<br>netbeans.confは、<code>(NetBeansのインストール先)/etc</code> フォルダにあります。<br>僕の環境では、<code>C:\Program Files\NetBeans 8.1\etc</code> にありました。<br>次のようになっている行を見つけます。改行コードが LF なので、<br>メモ帳では正しく表示されないかもしれません。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default location of JDK:</span></span><br><span class="line"><span class="comment"># (set by installer or commented out if launcher should decide)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># It can be overridden on command line by using --jdkhome &lt;dir&gt;</span></span><br><span class="line"><span class="comment"># Be careful when changing jdkhome.</span></span><br><span class="line"><span class="comment"># There are two NetBeans launchers for Windows (32-bit and 64-bit) and</span></span><br><span class="line"><span class="comment"># installer points to one of those in the NetBeans application shortcut </span></span><br><span class="line"><span class="comment"># based on the Java version selected at installation time.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">netbeans_jdkhome=<span class="string">"C:\Program Files\NetBeans 8.1\bin\jre"</span></span><br></pre></td></tr></table></figure><p><code>netbeans_jdkhome</code>が、JDKのインストール先です。</p><p>というわけで、<code>fontconfig.properties</code>のパスは、</p><p><code>（netbeans_jdkhome）/lib/fontconfig.properties</code> です。</p><p>僕の環境では、<code>C:\Program Files\NetBeans 8.1\bin\jre\lib\fontconfig.properties</code> になります。</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
            <tag> netbeans </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScriptのIDEをNetBeansにした</title>
      <link href="/2016/01/25/ts-ide-netbeans/"/>
      <url>/2016/01/25/ts-ide-netbeans/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー。<br>TypeScript、使っていますか？</p><p>今まで、Visual Studio Code を、<br>エディタとして使っていましたが、<br>作っていたアプリが大きくなってきたので、<br>NetBeansを使うことにしました！</p><h1 id="TypeScript-Editorプラグインを入れる"><a href="#TypeScript-Editorプラグインを入れる" class="headerlink" title="TypeScript Editorプラグインを入れる"></a>TypeScript Editorプラグインを入れる</h1><p>デフォルトでは TypeScript は使えないので、<br><a href="http://plugins.netbeans.org/plugin/60605/typescript-editor" target="_blank" rel="noopener">プラグイン</a>を入れましょう！</p><p><a href="https://github.com/Everlaw/nbts/releases" target="_blank" rel="noopener">https://github.com/Everlaw/nbts/releases</a>から、<br>「XXX.nbm」の最新版をダウンロードしましょう。</p><p>メニューバーの、ツールからプラグインを開きます。<br><a href="http://www.flickr.com/photos/126344033@N06/24573325926" title="Netbeans-tsplugin-install" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1621/24573325926_9cbf8570a1_o.png" alt="Netbeans-tsplugin-install"></a></p><ol><li>ダウンロード済み タブを開く</li><li>プラグインの追加で、ダウンロードしたファイルを選択</li><li>インストールし、IDEを再起動</li></ol><h1 id="補完を使いやすく"><a href="#補完を使いやすく" class="headerlink" title="補完を使いやすく"></a>補完を使いやすく</h1><p>初期設定では、「 . 」を入力するまで、補完されません。<br>この設定を変えたいと思います。</p><ul><li>ツールから設定を開く。</li></ul><p><a href="http://www.flickr.com/photos/126344033@N06/24303982440" title="Netbeans-ts-setting" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1633/24303982440_e678b33949_o.png" alt="Netbeans-ts-setting"></a></p><ol><li>エディタを選択</li><li>コード補完タブへ</li><li>言語をJavaScriptにする</li><li>可能性のあるすべての状況に変更</li><li>OKをクリック</li></ol><h1 id="便利な機能"><a href="#便利な機能" class="headerlink" title="便利な機能"></a>便利な機能</h1><h3 id="宣言へ移動"><a href="#宣言へ移動" class="headerlink" title="宣言へ移動"></a>宣言へ移動</h3><p>これは、VSCodeでもあります。<br>宣言（定義されている場所）へ移動したい変数、プロパティなどにカーソルを置き、<br><code>Ctrl+B</code>！！<br>もしくは、右クリックからナビゲート、宣言へ移動。<br>ファイルをまたがってもできます。</p><h3 id="Ctrl-マウスポインタ"><a href="#Ctrl-マウスポインタ" class="headerlink" title="Ctrl+マウスポインタ"></a>Ctrl+マウスポインタ</h3><p>VSCodeでもあります。<br>変数名、型を取得できます。</p><h3 id="使用状況を検索"><a href="#使用状況を検索" class="headerlink" title="使用状況を検索"></a>使用状況を検索</h3><p>これが一番やりたかった！<br>Visual Studio とかだと、開いてるファイル内でしかできないけど、<br>NetBeansはプロジェクト内でできる！！<br>変数にカーソルを置き、<code>Alt+F7</code>もしくは、右クリックから使用状況を検索。</p><p><a href="http://www.flickr.com/photos/126344033@N06/23972833973" title="netbeans-ts-usages" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1536/23972833973_8633b328c1_o.png" alt="netbeans-ts-usages"></a></p><p>わーお！</p><p>2016/01/30 追記:<br>VSCodeでも、同じような機能がありました！<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/01/30/vscode-ts-find-usages/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>こんな感じに、大きなコードとかも楽に扱える便利な機能もあるので、<br>ぜひ使ってみてください!</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> typescript </tag>
            
            <tag> netbeans </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Intel HD Graphics】外部ディスプレイがちらつく</title>
      <link href="/2016/01/23/intel-hd-graphics-display/"/>
      <url>/2016/01/23/intel-hd-graphics-display/</url>
      
        <content type="html"><![CDATA[<p>Intel HD Graphics 4000です。<br>外部ディスプレイで、スクロールしたりすると、<br>画面がちらつくような感じになります。</p><h2 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h2><p>デスクトップの何もないところを右クリック → 画面の解像度<br>詳細設定をクリック<br><a href="http://www.flickr.com/photos/126344033@N06/24552385665" title="Display-setting" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1674/24552385665_057645cbb1_o.png" alt="Display-setting"></a></p><p>インテル(R) グラフィック/メディア・コントロール・パネル タブを開いて、<br>ディスプレイを、内蔵ディスプレイじゃない方、<br>リフレッシュレートを、59i Hzから、59p Hzにして、<br>適用する<br><a href="http://www.flickr.com/photos/126344033@N06/24444070822" title="Intel-Graphics-Control-Panel" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1606/24444070822_97cbd85a29_o.png" alt="Intel-Graphics-Control-Panel"></a></p><p>これでできました！</p>]]></content>
      
      
      <categories>
          
          <category> Uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unityで二次元配列のJsonを読む</title>
      <link href="/2016/01/22/unity-read-2darray-json/"/>
      <url>/2016/01/22/unity-read-2darray-json/</url>
      
        <content type="html"><![CDATA[<p>こんばんはー。</p><p>Unityのステージ内容を Yaml で作ろうと思っていました。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2016/01/19/unity-parse-yaml/" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>しかし、よく考えてみれば、Unity 公式でサポート（5.3から）されている、<br>Json で十分じゃね？と思いました。<br>ステージの内容は、次のようなJsonにしました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"stage"</span>: [</span><br><span class="line">    [<span class="string">"block1"</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="string">"block1"</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、JsonUtilityでParseしても、うまくやってくれませんでした。</p><blockquote><p>■配列のネストは1つまで</p><p>  多次元配列、配列内配列（ジャグ配列）、配列のコレクションなどは、JSONにシリアライズしてくれない。<br>  多次元配列（int[,] とか）は、.NET標準のシリアライザも対応してないので仕方ない。<br>  しかし int[][] や List&lt;int[]&gt; 、 List&lt;List<int>&gt;なども、JsonUtilityは華麗にスルーする。</int></p></blockquote><p>（<a href="http://ch.nicovideo.jp/ntmi/blomaga/ar927398" target="_blank" rel="noopener">http://ch.nicovideo.jp/ntmi/blomaga/ar927398</a>より）<br>とのことです。</p><p>というわけで、LitJSON というライブラリを使うことにしました。</p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p><a href="http://lbv.github.io/litjson/" target="_blank" rel="noopener">http://lbv.github.io/litjson/</a>から、<br>Download で dll をダウンロードすると楽。<br><a href="http://www.flickr.com/photos/126344033@N06/24429359682" title="litjson-download-dll" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1555/24429359682_440791318f_o.png" alt="litjson-download-dll"></a></p><p>ダウンロードした dll を、Plugins/ ディレクトリにドラッグ＆ドロップ。<br><a href="http://www.flickr.com/photos/126344033@N06/24169909849" title="Drag-litjson-Unity" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1563/24169909849_a78af979cf_o.png" alt="Drag-litjson-Unity"></a></p><p>次のように書く。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> LitJson;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeStageJson</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    JsonData jsonData = JsonMapper.ToObject(data);</span><br><span class="line">    Debug.Log((<span class="keyword">string</span>)jsonData[<span class="string">"stage"</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果：<br><a href="http://www.flickr.com/photos/126344033@N06/24511544196" title="unity-debuglog-litjson" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1693/24511544196_05d6286132_o.png" alt="unity-debuglog-litjson"></a></p><p>このように、<code>jsonData[&quot;stage&quot;][0]</code> と、ただインデックス（？）をたどるだけで、<br>二次元配列も使えます！</p><p>LitJSON便利です！</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> json </tag>
            
            <tag> dll </tag>
            
            <tag> litjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnityでYAMLをパースする</title>
      <link href="/2016/01/19/unity-parse-yaml/"/>
      <url>/2016/01/19/unity-parse-yaml/</url>
      
        <content type="html"><![CDATA[<p>※ UnityYamlMerge のことではありません！</p><p>Unity で、2D ステージの内容を YAML で作って、<br>それをパースする方法です。</p><h2 id="yaml-net-を入れる"><a href="#yaml-net-を入れる" class="headerlink" title="yaml-net を入れる"></a>yaml-net を入れる</h2><p><a href="http://sourceforge.net/projects/yaml-net-parser/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/yaml-net-parser/files/</a>から、<br>フォルダーをたどっていくと、snapshot.zip があるので、ダウンロードし、展開してください。</p><p>Code ディレクトリ内にある、「Yaml.dll」を、Unityの Assets/Plugins に突っ込みます。<br><a href="http://www.flickr.com/photos/126344033@N06/24479229725" title="yaml-dll" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1634/24479229725_cd51612057_o.png" alt="yaml-dll"></a><a href="http://www.flickr.com/photos/126344033@N06/23851056654" title="unity-plugins-folder-yamldll-import" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1481/23851056654_7b3ea1102c_o.png" alt="unity-plugins-folder-yamldll-import"></a></p><h2 id="スクリプトを追加"><a href="#スクリプトを追加" class="headerlink" title="スクリプトを追加"></a>スクリプトを追加</h2><p>新しいスクリプトを作成し、次のように書きます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Yaml;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>)</span> &#123;</span><br><span class="line">    Node yamlNode = Node.Parse(<span class="string">"- item1\n- item2"</span>);</span><br><span class="line">    Debug.Log(yamlNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Yaml 名前空間が見つからない？ Plugins/ ディレクトリに Yaml は入っていますか？</li><li>Node クラスは、Yaml.Node です。</li></ul><p>これで、パースができました。<br>このスクリプトを、シーン内の空のオブジェクトにアタッチして、実行してみましょう。</p><p><a href="http://www.flickr.com/photos/126344033@N06/23851114894" title="yaml-unity-parse" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1445/23851114894_a7a31aa326_o.png" alt="yaml-unity-parse"></a></p><p>成功です!</p><p>yaml-net の詳細情報は、公式サイトを参照してください!</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://yaml-net-parser.sourceforge.net/" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windowsへの「hub」コマンドのインストールでハマった</title>
      <link href="/2016/01/17/how-to-install-hub-for-windows/"/>
      <url>/2016/01/17/how-to-install-hub-for-windows/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><p>hub コマンドを知ってますか。</p><p>git + hub = github とのことで、git コマンドを github 用に拡張したものです。</p><p>そのインストールでハマりました。</p><h2 id="必要となるもの"><a href="#必要となるもの" class="headerlink" title="必要となるもの"></a>必要となるもの</h2><ul><li>Git (公式だと 1.7.3 or newer)</li><li>Go (公式だと 1.4 or better)</li><li>Cygwin、OpenSSH (SSHを登録するとき)</li><li>Vi、Vim とかの Cygwin 上でファイルを編集できるやつ</li><li>Github のアカウント</li></ul><p>これらをインストールしておいてください。<br>Cygwin は、alias の登録のほか、鍵を作るときに使いますので、OpenSSH のモジュールも入れておいてください。<br><a href="http://www.flickr.com/photos/126344033@N06/24060332729" title="Cygwin-OpenSSH" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1678/24060332729_9ae6266893_o.png" alt="Cygwin-OpenSSH"></a></p><h2 id="Cloneしてくる"><a href="#Cloneしてくる" class="headerlink" title="Cloneしてくる"></a>Cloneしてくる</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> [インストール先]</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/github/hub.git</span><br><span class="line">Cloning into <span class="string">'hub'</span>...</span><br><span class="line">remote: Counting objects: 11500, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 11500 (delta 0), reused 0 (delta 0), pack-reused 11499</span><br><span class="line">Receiving objects: 100% (11500/11500), 3.45 MiB | 1.08 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (6893/6893), <span class="keyword">done</span>.</span><br><span class="line">Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>この後、生のコマンドプロンプトで実行してください。なぜかエラーが出ます。<br>Win+Rキー、<code>cmd</code>と入力、enter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\XXX&gt; <span class="built_in">cd</span> [インストール先]\hub</span><br><span class="line">[インストール先]\hub&gt; <span class="string">"./script/build"</span></span><br><span class="line">(少し待つ)</span><br><span class="line">[インストール先]\hub&gt;</span><br></pre></td></tr></table></figure><p>環境変数を登録しておく。PATHに、<code>[インストール先]\hub</code>を追加すればOK</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hub version</span><br><span class="line">git version 2.6.4.windows.1</span><br><span class="line">hub version 2.2.0-117-g35c76bf</span><br></pre></td></tr></table></figure><p>反映されてないときは、CygwinのリスタートかWindowsの再起動か・・</p><h2 id="CygwinにAliasを登録"><a href="#CygwinにAliasを登録" class="headerlink" title="CygwinにAliasを登録"></a>CygwinにAliasを登録</h2><p>以下、Cygwinです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ vim .bashrc</span><br></pre></td></tr></table></figure><p>別にvimでなくても、編集できればいいです。<br>.bashrcに追加します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(hub alias -s)</span>"</span></span><br></pre></td></tr></table></figure><p>Cygwinをリスタートします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git version</span><br><span class="line">git version 2.6.4.windows.1</span><br><span class="line">hub version 2.2.0-117-g35c76bf</span><br></pre></td></tr></table></figure><p>hubの方も表示されていれば、gitコマンドがhubのaliasとして登録されたとなります。</p><h2 id="SSHキーを登録"><a href="#SSHキーを登録" class="headerlink" title="SSHキーを登録"></a>SSHキーを登録</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/XXX/.ssh/id_rsa):</span><br><span class="line">Created directory &apos;/home/XXX/.ssh&apos;.</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /home/XXX/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/XXX/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:MaEZmq4XZASzm79wb2E2gfW9YITZhU7o03go2byyCpc XXX@XXX</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|      何か       |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br><span class="line">id_rsa  id_rsa.pub</span><br><span class="line">$ less id_rsa.pub</span><br></pre></td></tr></table></figure><p><a href="http://www.flickr.com/photos/126344033@N06/24060548909" title="cygwin-sshkey-pub" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1650/24060548909_135a1a4d8e_o.png" alt="cygwin-sshkey-pub"></a></p><p><code>id_rsa.pub</code>ファイル内の文字列をコピーします。<br>そして、<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a>へアクセスします。</p><p><a href="http://www.flickr.com/photos/126344033@N06/24428400435" title="github-sshkey-paste" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1583/24428400435_e79966a334_o.png" alt="github-sshkey-paste"></a></p><ol><li>Add SSH keyでキーを追加</li><li>Titleを指定</li><li>ここに文字列を貼り付け</li><li>Add keyで保存</li></ol><h2 id="リポジトリを作ってみる"><a href="#リポジトリを作ってみる" class="headerlink" title="リポジトリを作ってみる"></a>リポジトリを作ってみる</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir test-rep</span><br><span class="line">$ cd test-rep</span><br><span class="line">$ echo &quot;# hub test rep&quot; &gt; README.md</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line">Hubの見せ場！Github上にリポジトリを作る</span><br><span class="line">$ git create</span><br><span class="line">Updating origin</span><br><span class="line">The authenticity of host &apos;github.com (192.30.252.128)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:XXX.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &apos;github.com,192.30.252.128&apos; (RSA) to the list of known hosts.</span><br><span class="line">created repository: xxx/test-rep</span><br><span class="line"></span><br><span class="line">（もしかしたら一回目だとGithubのユーザー名、パスワードを聞かれるかもしれません。</span><br><span class="line">そのときはログインしてください）</span><br><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;first commit&quot;</span><br><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 227 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:xxx/test-rep.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br><span class="line"></span><br><span class="line">ブラウザーでリポジトリを開く</span><br><span class="line">$ git browse</span><br></pre></td></tr></table></figure><p><a href="http://www.flickr.com/photos/126344033@N06/24428767685" title="github-push-success" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1621/24428767685_500cc8406e_o.png" alt="github-push-success"></a></p><p>できました!!</p>]]></content>
      
      
      <categories>
          
          <category> Bash </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
            <tag> cygwin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SceneManager.Unloadを、OnTriggerEnter時に呼ぶと凍る</title>
      <link href="/2016/01/16/ontriggerenter-scenemanager-unload/"/>
      <url>/2016/01/16/ontriggerenter-scenemanager-unload/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。<br>昨夜、Unityがフリーズしてしまって、結構大変でした。</p><p>Unity 5.3.1です。</p><p>次のように実行すると、フリーズしました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D col2d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (col2d.tag == <span class="string">"Player"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.UnloadScene(<span class="string">"MainMenu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なぜか、</p><ul><li><code>SceneManager.LoadScene</code>ではフリーズせず、</li><li><code>FixedUpdate</code>、<code>Update</code>のタイミングでやってもフリーズしない</li></ul><p>です。</p><p>というわけで、次のようにしたら直りました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isEnter = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerEnter2D</span>(<span class="params">Collider2D col2d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (col2d.tag == <span class="string">"Player"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        isEnter = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnTriggerExit2D</span>(<span class="params">Collider2D col2d</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (col2d.tag == <span class="string">"Player"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        isEnter = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isEnter)</span><br><span class="line">    &#123;</span><br><span class="line">        SceneManager.UnloadScene(<span class="string">"MainMenu"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RectTransformのoffsetMinとoffsetMaxについて</title>
      <link href="/2016/01/15/unity-recttransform/"/>
      <url>/2016/01/15/unity-recttransform/</url>
      
        <content type="html"><![CDATA[<p>こんにちは。</p><p>Unity 4.6で、新しいUI Systemとして、<br>「uGUI」が追加されました（結構前だけど）。</p><blockquote><p>New UI System: Design UIs for your game or application using Unity’s powerful new component based UI framework and visual tools.</p></blockquote><p>そのUIの座標の指定なのですが、<br><a href="http://docs.unity3d.com/ja/current/Manual/class-RectTransform.html" target="_blank" rel="noopener">Rect Transform</a>というものを使っていて、<br>結構複雑です。</p><p>ここでは、座標・サイズの指定ができるプロパティ、<br>「offsetMin」「offsetMax」について調べたので、紹介します。</p><h2 id="uGUI上の座標について"><a href="#uGUI上の座標について" class="headerlink" title="uGUI上の座標について"></a>uGUI上の座標について</h2><p><img src="https://farm2.staticflickr.com/1711/24307782551_7f45e6de3a_o.png" alt><br>はい。Unityのワールド座標と向きが同じです。<br>注意しなければいけないのは、<br>Webページ作るときとは逆で、<br>Yが上に行くほど大きくなるところです。</p><h2 id="offsetMinとoffsetMaxの位置"><a href="#offsetMinとoffsetMaxの位置" class="headerlink" title="offsetMinとoffsetMaxの位置"></a>offsetMinとoffsetMaxの位置</h2><p><img src="https://farm2.staticflickr.com/1523/24282115592_dedf506f28_o.png" alt><br>座標の大きい方がMax、小さいほうがMinです。<br>そのままですが・・</p><h2 id="それぞれ原点はどこ・・"><a href="#それぞれ原点はどこ・・" class="headerlink" title="それぞれ原点はどこ・・"></a>それぞれ原点はどこ・・</h2><p>offsetMin.x、offsetMin.y、offsetMax.x、offsetMax.yの、<br>それぞれはどこを原点としているのでしょうか。<br>このGifアニメをご覧ください。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/Unity2d-RTransform-offset.gif" alt="Unity2d-RTransform-offset"></p><p>「<a href="https://gist.github.com/shundroid/ef1094d5e431db6bb579" target="_blank" rel="noopener">RTransform</a>」というコンポーネントを用意し、offsetMin、Maxの値を見やすく表示できるようにしました。<br>その結果、それぞれのAnchorの場所が原点となっていることがわかりました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>uGUIの座標は、offsetMin、offsetMaxでも操作可能。</li><li>座標はXは右方向、Yは上方向にいくと大きくなり、それぞれの原点は、Anchorの場所になる。</li></ul>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
            <tag> ugui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pLinkでVagrantのBoxに入ろうとしたらエラーが出た</title>
      <link href="/2016/01/14/plink-vagrant/"/>
      <url>/2016/01/14/plink-vagrant/</url>
      
        <content type="html"><![CDATA[<p>こんにちはー！<br>Putty使ってますかー！！</p><p>Windowsでは、デフォルトでSSHクライアントがないので、<br>ぼくはPuttyを使っています。</p><p>そこで、Puttyをコマンドプロンプトとかでそのまま使えないのかなぁ<br>と思っていたところ、</p><p>どうやら、Puttyについてる「Plink」を使えばできるそうです。</p><p>試しに、Vagrantでやってみます。</p><h2 id="Vagrantで立ち上げたマシンに、pLinkで入ろう！"><a href="#Vagrantで立ち上げたマシンに、pLinkで入ろう！" class="headerlink" title="Vagrantで立ち上げたマシンに、pLinkで入ろう！"></a>Vagrantで立ち上げたマシンに、pLinkで入ろう！</h2><h3 id="仮想マシンを立ち上げておく"><a href="#仮想マシンを立ち上げておく" class="headerlink" title="仮想マシンを立ち上げておく"></a>仮想マシンを立ち上げておく</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant up</span><br><span class="line">...</span><br><span class="line">==&gt; default: Waiting <span class="keyword">for</span> machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">...</span><br><span class="line">$ vagrant status</span><br><span class="line">Current machine states:</span><br><span class="line"></span><br><span class="line">default                   running (virtualbox)</span><br><span class="line"></span><br><span class="line">The VM is running. To stop this VM, you can run `vagrant halt` to</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>SSH address: <strong>127.0.0.1:2222</strong></li><li>SSH username: vagrant</li></ul><p>となっています。</p><h3 id="pLinkを使おう・・と思ったが・・"><a href="#pLinkを使おう・・と思ったが・・" class="headerlink" title="pLinkを使おう・・と思ったが・・"></a>pLinkを使おう・・と思ったが・・</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ plink -ssh 127.0.0.1:2222</span><br><span class="line">FATAL ERROR: Network error: Connection refused</span><br></pre></td></tr></table></figure><p>なんか断られましたw</p><h3 id="対処法"><a href="#対処法" class="headerlink" title="対処法"></a>対処法</h3><ul><li>先にGUIのPuTTYでセッション情報を保存しておく</li></ul><p>こんなことするならば普通にPuTTYでやったほうがいい気もします・・</p><p><a href="http://www.flickr.com/photos/126344033@N06/23742533134" title="putty1" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1508/23742533134_dda1abb216_o.png" alt="putty1"></a></p><ol><li>Host Nameに「127.0.0.1」、Portに「2222」（先ほどのSSH address）を指定</li><li>セッション名を「Vagrant1」とする</li><li>「Save」をクリックし保存</li><li>Openで一度開く。なんか<strong>ダイアログが出たら「はい」を選択</strong>。そして何もせずにウィンドウを閉じる</li></ol><p>そして、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ plink Vagrant1</span><br></pre></td></tr></table></figure></p><p>を実行すると・・</p><p><a href="http://www.flickr.com/photos/126344033@N06/24371088815" title="putty2" target="_blank" rel="noopener"><img src="https://farm2.staticflickr.com/1613/24371088815_80b9ddc328_o.png" alt="putty2"></a></p><p>できました！！</p>]]></content>
      
      
      <categories>
          
          <category> Virtual Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> putty </tag>
            
            <tag> vagrant </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerで作ったコンテナーをcommitし、Docker hubに公開するまで</title>
      <link href="/2016/01/13/docker-commit-publish/"/>
      <url>/2016/01/13/docker-commit-publish/</url>
      
        <content type="html"><![CDATA[<h2 id="事前にログイン"><a href="#事前にログイン" class="headerlink" title="事前にログイン"></a>事前にログイン</h2><p>アカウントが必要になります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br><span class="line">...（ユーザー名、パスワード、Eメールがきかれる）</span><br></pre></td></tr></table></figure><h2 id="コンテナーをコミット"><a href="#コンテナーをコミット" class="headerlink" title="コンテナーをコミット"></a>コンテナーをコミット</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit [CONTAINER_ID] [ログインしたユーザー名]/[名前（なんでもいい）]</span><br></pre></td></tr></table></figure><h2 id="Imageをpush"><a href="#Imageをpush" class="headerlink" title="Imageをpush!"></a>Imageをpush!</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">...</span><br><span class="line">$ docker push [ログインしたユーザー名]/[名前（さっきの）]</span><br></pre></td></tr></table></figure><p>忘れちゃうのでメモしておきます。</p>]]></content>
      
      
      <categories>
          
          <category> Virtual Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DockerでCentOSのコンテナを作ってgitを使うまで</title>
      <link href="/2016/01/11/docker-centos-git/"/>
      <url>/2016/01/11/docker-centos-git/</url>
      
        <content type="html"><![CDATA[<p>Docker楽しいです!<br>簡単にコンテナを作れて、開発環境の構築に便利です!</p><p>gitを選んだのは、簡単にインストールができるからです。</p><h2 id="Dockerのバージョン"><a href="#Dockerのバージョン" class="headerlink" title="Dockerのバージョン"></a>Dockerのバージョン</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br><span class="line">Docker version 1.9.1, build a34a1d5</span><br></pre></td></tr></table></figure><h2 id="まずCentOSのイメージをpullしてくる"><a href="#まずCentOSのイメージをpullしてくる" class="headerlink" title="まずCentOSのイメージをpullしてくる"></a>まずCentOSのイメージをpullしてくる</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull centos</span><br><span class="line">Using default tag: latest</span><br><span class="line">...</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">centos              latest              c8a648134623        2 weeks ago         196.6 MB</span><br></pre></td></tr></table></figure><p><code>docker pull [イメージ名]</code>でイメージをpull=取得できます。<br><code>docker images</code>で、pullしたイメージの一覧を取得できます。</p><h2 id="コンテナーを作る"><a href="#コンテナーを作る" class="headerlink" title="コンテナーを作る"></a>コンテナーを作る</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -itd centos /bin/bash</span><br><span class="line">...</span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS        PORTS               NAMES</span><br><span class="line">ccb0715533a4        centos              <span class="string">"/bin/bash"</span>         3 seconds ago       Up 2 seconds                      clever_morse</span><br></pre></td></tr></table></figure><p><code>docker run</code>コマンドで、イメージからコンテナを作成し、実行できます。<br>オプションで、<code>i</code>と<code>t</code>はなんか必ず使います。<code>d</code>でバックグラウンドでの実行を許可します。<br><code>d</code>を指定しないと、すぐに終了するので、<code>docker ps</code>コマンドでは表示されず、<code>docker ps -a</code>で表示されるようになります。<br><code>-it -d</code>と分けてもOKです。<br>コマンドの最後に、<code>/bin/bash</code>と書くのは、bashを実行するためです。</p><p><code>docker ps</code>コマンドで、実行中のコンテナの一覧を取得できます。停止したコンテナも取得するには、<code>docker ps -a</code>を使います。<br><code>CONTAINER ID</code>をメモしておいてください。次使います!</p><h2 id="centosのbashに入る"><a href="#centosのbashに入る" class="headerlink" title="centosのbashに入る"></a>centosのbashに入る</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker attach [CONTAINER ID 最初の一文字]</span><br><span class="line">（上の例だと docker attach c)</span><br><span class="line">(Enterキーを押す)</span><br><span class="line">[root@CONTAINER ID /]<span class="comment"># echo hello</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><code>docker attach</code>時のCONTAINER IDは、ここではコンテナーが１つしかないので、最初の1文字でかまいません。<br>コンテナーが複数あり、IDの最初の1文字がかぶっている場合は、2文字目を入力・・と、識別できるようにしましょう。</p><p><strong>※#以降の文字がコメントだと思われて緑になってしまいますが違いますｗ</strong></p><h2 id="Git-を入れる"><a href="#Git-を入れる" class="headerlink" title="Git を入れる"></a>Git を入れる</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@CONTAINER ID /]<span class="comment"># yum -y update</span></span><br><span class="line">...</span><br><span class="line">[root@CONTAINER ID /]<span class="comment"># yum -y install git</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@CONTAINER ID /]<span class="comment"># git --version</span></span><br><span class="line">git version 1.8.3.1</span><br><span class="line">[root@CONTAINER ID /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="コンテナーを実行したまま、さらっと抜ける"><a href="#コンテナーを実行したまま、さらっと抜ける" class="headerlink" title="コンテナーを実行したまま、さらっと抜ける"></a>コンテナーを実行したまま、さらっと抜ける</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CONTAINER ID /]<span class="comment"># Ctrl+P Ctrl+Q</span></span><br><span class="line"></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS        PORTS               NAMES</span><br><span class="line">ccb0715533a4        centos              <span class="string">"/bin/bash"</span>         3 seconds ago       Up 2 seconds                      clever_morse</span><br></pre></td></tr></table></figure><p><strong>Ctrl+P Ctrl+Q</strong> で、実行したまま抜けられます。<br>実行したままなので、<code>docker ps</code>に表示されます！</p><p><code>exit</code>と打つと、停止されてしまいます。</p><h2 id="コンテナー、イメージを消す方法も一応"><a href="#コンテナー、イメージを消す方法も一応" class="headerlink" title="コンテナー、イメージを消す方法も一応"></a>コンテナー、イメージを消す方法も一応</h2><p>消したくない人は飛ばしてください。</p><p>まずはコンテナーを止めて、消しましょう。<br><code>docker rm</code>で、コンテナーを削除します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop [CONTAINER IDの一文字目]</span><br><span class="line">..</span><br><span class="line">$ docker rm [CONTAINER IDの一文字目]</span><br><span class="line">..</span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS          PORTS               NAMES</span><br><span class="line"></span><br><span class="line">(表示されない)</span><br></pre></td></tr></table></figure><p><code>docker stop</code>で、コンテナーを安全に停止させます。<br>どっちみち後で消すので、<code>docker kill</code>でもいいです。</p><p>イメージも消しちゃえ！<br><code>docker rmi</code>で、イメージを削除します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">centos              latest              c8a648134623        2 weeks ago         196.6 MB</span><br><span class="line">$ docker rmi [IMAGE IDの一文字目]</span><br><span class="line">..</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line"></span><br><span class="line">(消えた)</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>どうでしょう！簡単にコンテナーを作成できて、簡単に削除できます。<br>使い捨てのテスト環境とかの構築にも使えます。</p><p>最後までお読みいただき、ありがとうございました！</p>]]></content>
      
      
      <categories>
          
          <category> Virtual Environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> virtualbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>環境変数の編集に、「Rapid Environment Editor」を使っています</title>
      <link href="/2016/01/11/rapid-environment-editor/"/>
      <url>/2016/01/11/rapid-environment-editor/</url>
      
        <content type="html"><![CDATA[<p>Windows での環境変数の編集に、</p><p>「Rapid Environment Editor」というアプリを使っています。</p><p>これがすごく便利です！</p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://www.rapidee.com/en/download" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 id="便利なところ"><a href="#便利なところ" class="headerlink" title="便利なところ"></a>便利なところ</h2><ul><li>Pathとかをセミコロンでつなぐのではなく、ノード表示をしてくれるからわかりやすい！</li><li>存在しないパスがあったら、赤く表示してくれる！</li></ul><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/rapid2.png" alt="rapid2"></p><p>こんな感じです。</p><h2 id="システム環境変数を編集するときは・・"><a href="#システム環境変数を編集するときは・・" class="headerlink" title="システム環境変数を編集するときは・・"></a>システム環境変数を編集するときは・・</h2><p>ただ単に実行すると、<br><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/rapid3-644x601.png" alt="rapid3"></p><p>左側、「システム環境変数」を編集できません。</p><p>画像の中にもありますが、「Restart as administor」をクリックすると、</p><p>アプリが再起動され、選択できるようになります。</p>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10にしたけど不安定だから戻した【5回目まで】</title>
      <link href="/2016/01/10/returned-windows-8-1/"/>
      <url>/2016/01/10/returned-windows-8-1/</url>
      
        <content type="html"><![CDATA[<p><strong>追記：今はパソコンを買ったので、Windows 10 になっています。</strong><br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://asterisks.netlify.com/2017/12/14/report-i-bought-my-pc/" width="300" height="150" frameborder="0" scrolling="no"></iframe><br><strong>追記終</strong></p><p>Windows 10 にしたいなぁ。</p><p>新しいデザインとか、Cortanaとか、通知センターとか、<br>とにかくすべての新機能が、Windows ファンとして魅力です。</p><p>それで、アップグレードを何度もしていますが、何度も失敗しています。</p><p>今回もまたアップグレードし、失敗しました。これが5回目ですよ・・・。</p><h2 id="今までの経緯"><a href="#今までの経緯" class="headerlink" title="今までの経緯"></a>今までの経緯</h2><table><thead><tr><th>回数</th><th>日付</th><th>手段</th><th>結果</th><th>アップグレード自体は成功したか</th></tr></thead><tbody><tr><td>1回目</td><td>2015/7/29</td><td>手動</td><td>×</td><td>○</td></tr><tr><td>2回目</td><td>2015/9</td><td>自動</td><td>×</td><td>○</td></tr><tr><td>3回目</td><td>2015/11</td><td>自動</td><td>×</td><td>×</td></tr><tr><td>4回目</td><td>2016/1/9</td><td>自動</td><td>×</td><td>×</td></tr><tr><td>5回目</td><td>2016/1/10</td><td>自動</td><td>×</td><td>○</td></tr></tbody></table><h3 id="1回目"><a href="#1回目" class="headerlink" title="1回目"></a>1回目</h3><p>アップグレード後、1日はできたが、「INTERNAL_POWER_ERROR」 というブルースクリーンで再起動ループに・・・<br>どうやらググると、GPU のドライバが対応していないのせいらしいです。<br>BIOS で GPU をオフにしたら直ったけど、これじゃ重いし・・ということでWindows 8.1 へ戻しました。</p><h3 id="2回目"><a href="#2回目" class="headerlink" title="2回目"></a>2回目</h3><p>やっとぼくのパソコンにも<a href="https://121ware.com/qasearch/1007/app/servlet/qadoc?QID=017753" target="_blank" rel="noopener">あの通知</a>が来ましたー。<br>時間ないし、このままやっても 1 回めと変わらないだろうと思ったので、<br>ダウンロードだけして、あとでアップグレードしようとしたら、<br>「同意する」を押すとなんか始まってしまった。予想通り、1回目と同じ内容で失敗。</p><h3 id="EVENT-2015-11-Sony製Vaio-Win8-プリインストールモデル-アップグレード方法の公開"><a href="#EVENT-2015-11-Sony製Vaio-Win8-プリインストールモデル-アップグレード方法の公開" class="headerlink" title="EVENT: 2015/11 Sony製Vaio Win8 プリインストールモデル アップグレード方法の公開"></a>EVENT: 2015/11 Sony製Vaio Win8 プリインストールモデル アップグレード方法の公開</h3><h3 id="3回目"><a href="#3回目" class="headerlink" title="3回目"></a>3回目</h3><p>Vaio Updateを「OS Upgrade Mode」にしようとしたら、非対応とのことでした・・。<br>Sonyのウェブサイトには対応と書いてあるのに・・。<br>「ドライバが最新だから、Upgrade Mode にしなくてもいいということなのかな」と思ってやったら、<br>なぜかアップグレード途中で自動的に「以前のWindowsを復元しています」となり、引き返されてしまいました。</p><h3 id="4回目"><a href="#4回目" class="headerlink" title="4回目"></a>4回目</h3><p>いろいろとして、「OS Upgrade Mode」にはなりました。<br>準備は万全！ということでアップグレードしましたが、<br>途中「76% (設定を構成しています 4%)」のところで1時間ほどフリーズ・・<br>ハードディスクアクセスランプが点灯していないので、 強制終了したら、Win8.1が復元されました。<br>Windows Updateによる、エラーは、「C1900101-4000D」。</p><h3 id="5回目"><a href="#5回目" class="headerlink" title="5回目"></a>5回目</h3><p>ウイルスバスターをアンインストールし、<br>USB端子にささっているのを全部抜いたら、 2時間30分でWin10になりました。<br>1回めはウイルスバスターを入れてうまくいき、USB端子には何もささっていなかったことから、<br>4回めの原因は USB端子についていたデバイスだとわかりました。<br>しかし、Win10を使っている最中、 4回目で止まった時のように、<br>いきなりフリーズし、ハードディスクアクセスランプが消灯しました。<br>強制終了して、再度起動しましたが、15 分ほどでフリーズ・・。<br>また、ずっと繰り返していると、<br>ブルースクリーン「KERNEL_SECURITY_CHECK_FAILURE」が発生しました。<br>もう疲れたからWin8.1にもどしました。</p><h2 id="なぜこんなにしくるのであろうか"><a href="#なぜこんなにしくるのであろうか" class="headerlink" title="なぜこんなにしくるのであろうか"></a>なぜこんなにしくるのであろうか</h2><h3 id="アプリの入れすぎ"><a href="#アプリの入れすぎ" class="headerlink" title="アプリの入れすぎ"></a>アプリの入れすぎ</h3><p>大量にアプリを入れています。<br>そのため、設定の引き継ぎなどがうまくいかないのかな・・と予想しています。<br>これは、↓の、リフレッシュしてどうなるかで検証したいです。</p><h3 id="PC-が、スタートメニューとの別れを惜しんでいる"><a href="#PC-が、スタートメニューとの別れを惜しんでいる" class="headerlink" title="PC が、スタートメニューとの別れを惜しんでいる"></a>PC が、スタートメニューとの別れを惜しんでいる</h3><p>そうなのか～<br>タブレットモード、使うからさ、Windows 10 にさせてよ・・。<br>（ありえないですね。はい）</p><h2 id="これからどうしよう・・"><a href="#これからどうしよう・・" class="headerlink" title="これからどうしよう・・"></a>これからどうしよう・・</h2><p>2016年7月までしか、Windows 10にできません。<br>今考えているのは、以下の感じで、コストの低い順に並べました。</p><ol><li>PC をリフレッシュしてからアップグレード（いろんなアプリが入っているため）</li><li>リカバリーしてからアップグレード</li><li>クリーンインストール</li></ol><p>Ubuntu とか使ってもいいかと思いましたが、<br>Office が使いたいのや、Unity（ゲームの方）、Visual Studio 等があるため、<br>Windows は手放せません。</p><h2 id="追記-2016-04-02"><a href="#追記-2016-04-02" class="headerlink" title="追記: 2016/04/02"></a>追記: 2016/04/02</h2><p>文章が恥ずかしかったので、修正しました。</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows10 </tag>
            
            <tag> windows </tag>
            
            <tag> microsoft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WordPressでリンクをカードっぽく表示してくれる「Pz-LinkCard」がすごい便利！</title>
      <link href="/2016/01/07/pz-linkcard/"/>
      <url>/2016/01/07/pz-linkcard/</url>
      
        <content type="html"><![CDATA[<p><strong>追記: これはブログが WordPress だった時代の話です。<br>今は Hexo なので、hatena blog card が使える独自プラグインを使用しています。<br>それについても、追々記事を上げます。</strong></p><p>参考になったサイトとかを「リンク」にして投稿するのですが、</p><p>もうちょっといいデザインないかなーと。</p><p>oEmbed連携とかあるけれど、対応しているサイトが少なかったりする中、</p><p>この、<strong>「Pz-LinkCard」</strong>を見つけました！！</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://poporon.poponet.jp/pz-linkcard" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>はてなブログみたいなかんじです！</p><h2 id="インストール方法"><a href="#インストール方法" class="headerlink" title="インストール方法"></a>インストール方法</h2><p>WordPressの管理ページで、プラグイン→新規追加。</p><p><code>Pz-LinkCard</code>で検索！</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/16-300x150.png" alt="更新も２週間前と結構活発！"></p><p>インストールして有効化。</p><h2 id="試してみよう"><a href="#試してみよう" class="headerlink" title="試してみよう"></a>試してみよう</h2><p>投稿を新規追加して、</p><script src="https://gist.github.com/shundroid/b2e39a10867b73c21f31.js"></script><p>と書くと、ブログカードが追加されます。</p><h2 id="デザインを変えてみた"><a href="#デザインを変えてみた" class="headerlink" title="デザインを変えてみた"></a>デザインを変えてみた</h2><p>シンプルなデザインにしてみました。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/17-300x81.png" alt="17"></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/18-300x59.png" alt="18"></p><p>変更を保存を押すと、変わります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>こんな感じで、すごく便利なので、</p><p>皆さん使ってみてください！！</p>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GulpでTaskに引数を使う</title>
      <link href="/2016/01/07/gulp-args-task/"/>
      <url>/2016/01/07/gulp-args-task/</url>
      
        <content type="html"><![CDATA[<p>Gulpで、タスクをより便利にしたいとき、引数が使いたくなります。<br>こんな感じです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp build --dev</span><br></pre></td></tr></table></figure><p>これは、npmのモジュール、「minimist」を使うとできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i minimist</span><br></pre></td></tr></table></figure><p>js 側の実装は次の通りです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minimist = <span class="built_in">require</span>(<span class="string">"minimist"</span>);</span><br><span class="line">gulp.task(<span class="string">"build"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> env = minimist(process.argv.slice(<span class="number">2</span>));</span><br><span class="line">  <span class="keyword">if</span> (env.dev) &#123;</span><br><span class="line">    <span class="comment">// --devが入っているとき</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 通常時</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="–と-の違い"><a href="#–と-の違い" class="headerlink" title="–と-の違い"></a>–と-の違い</h2><p>次のようなコマンドにしてみます</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp build -dev</span><br></pre></td></tr></table></figure><p><code>--dev</code> ではなくて、 <code>-dev</code> を使ってみました。</p><p>こうするとどうでしょう。 <code>env</code> 変数の中を見てみます。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/13.png" alt="d、e、v　オプションに分かれている"></p><p>d、e、vに分かれています。つまり、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp build -d -e -v</span><br></pre></td></tr></table></figure><p>とやったのと同じになるらしいです（今知った）！</p><p>ちなみに <code>--dev</code> でやると・・</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/15.png" alt></p><p>devオプションになっています！！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://qiita.com/tmnck/items/a3d8008c98594b3e52cb" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> gulp </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio Code で便利なショートカット！</title>
      <link href="/2016/01/06/shortcuts-vscode/"/>
      <url>/2016/01/06/shortcuts-vscode/</url>
      
        <content type="html"><![CDATA[<p>こんばんは。</p><p>Visual Studio Code 使ってますかー！！</p><p>GitとTypeScriptの補完をプラグインなしでやってくれて便利です！</p><p>さて、今回はよく使っているショートカットキーと</p><p>デフォルトにないけどよく使うショートカットキーを紹介します！</p><p>（ぼくはWindowsなのでCtrlになりますがMacだとCommandキーなのかな？）</p><h1 id="デフォルトにあるショートカットキー"><a href="#デフォルトにあるショートカットキー" class="headerlink" title="デフォルトにあるショートカットキー"></a>デフォルトにあるショートカットキー</h1><h2 id="Ctrl-Shift-P"><a href="#Ctrl-Shift-P" class="headerlink" title="Ctrl + Shift + P"></a>Ctrl + Shift + P</h2><p>コマンドパレットを開きます。超便利です。</p><h2 id="Ctrl-Tab-エディタで"><a href="#Ctrl-Tab-エディタで" class="headerlink" title="Ctrl + Tab (エディタで)"></a>Ctrl + Tab (エディタで)</h2><p><code>workbench.action.quickOpenNavigateNext</code> らしいです。</p><p>VSCodeにはタブはありませんが、作業中のファイルを切り替えてくれます。</p><h2 id="Ctrl-Shift-Tab-エディタで"><a href="#Ctrl-Shift-Tab-エディタで" class="headerlink" title="Ctrl + Shift + Tab (エディタで)"></a>Ctrl + Shift + Tab (エディタで)</h2><p>Ctrl + Tabの逆バージョン</p><h2 id="Ctrl-Shift-F-どこでも"><a href="#Ctrl-Shift-F-どこでも" class="headerlink" title="Ctrl + Shift + F (どこでも)"></a>Ctrl + Shift + F (どこでも)</h2><p>フォルダーを開いているとき、すべてのファイルから検索ができます！！</p><h1 id="デフォルトにないから追加するショートカットキー"><a href="#デフォルトにないから追加するショートカットキー" class="headerlink" title="デフォルトにないから追加するショートカットキー"></a>デフォルトにないから追加するショートカットキー</h1><h2 id="設定の方法"><a href="#設定の方法" class="headerlink" title="設定の方法"></a>設定の方法</h2><p><code>Ctrl + Shift + P</code> でコマンドパレットを開き、<code>Preferences: Open Keyboard Settings</code>。<br><code>keybindings.json</code>に、次のような形式でキーバインドを書きます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"key"</span>: <span class="string">"バインドするキー(例: ctrl+alt+o)"</span>,</span><br><span class="line">  <span class="string">"command"</span>: <span class="string">"コマンド 左側のファイルの下の方にずらっと。"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Open-Recent-Folder"><a href="#Open-Recent-Folder" class="headerlink" title="Open Recent Folder"></a>Open Recent Folder</h2><p>コマンドは <code>workbench.action.openRecent</code> です。過去に開いたフォルダーを表示してくれます。</p><p>ぼくは <code>Ctrl + Alt + O</code> にバインドしています。</p><h2 id="KeyBindを設定する"><a href="#KeyBindを設定する" class="headerlink" title="KeyBindを設定する"></a>KeyBindを設定する</h2><p><code>workbench.action.openGlobalKeybindings</code> です。KeyBindを設定してくれる画面になります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>VSCodeは、こんな感じで自分風にアレンジがすぐにできるので、ぜひ使ってみてください！！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vscode </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】C# + SceneManagerでのMulti Scene Editing</title>
      <link href="/2016/01/04/unity-multi-scene-editing/"/>
      <url>/2016/01/04/unity-multi-scene-editing/</url>
      
        <content type="html"><![CDATA[<h2 id="読み込み"><a href="#読み込み" class="headerlink" title="読み込み"></a>読み込み</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br></pre></td></tr></table></figure><p>参考:<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://docs.unity3d.com/530/Documentation/ScriptReference/SceneManagement.SceneManager.html" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><h2 id="複数のシーンを読み込んでいる状態で・・"><a href="#複数のシーンを読み込んでいる状態で・・" class="headerlink" title="複数のシーンを読み込んでいる状態で・・"></a>複数のシーンを読み込んでいる状態で・・</h2><h3 id="１つのシーンをアンロードする"><a href="#１つのシーンをアンロードする" class="headerlink" title="１つのシーンをアンロードする"></a>１つのシーンをアンロードする</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SceneManager.UnloadScene(<span class="string">"シーン名"</span>);</span><br></pre></td></tr></table></figure><p>シーン名は、<code>Build Settings</code>のIDでもオーバーロードされる。<br>ただし、読み込まれているシーン名、シーンIDに限る（あたりまえだけど・・）</p><h3 id="１つのシーンをロードする"><a href="#１つのシーンをロードする" class="headerlink" title="１つのシーンをロードする"></a>１つのシーンをロードする</h3><p>ここでハマった。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SceneManager.LoadScene(<span class="string">"シーン名"</span>, LoadSceneMode.Additive);</span><br></pre></td></tr></table></figure><p>LoadSceneMode.Additiveを忘れない！</p><h3 id="全部のシーンをアンロードして、1つだけ読み込む"><a href="#全部のシーンをアンロードして、1つだけ読み込む" class="headerlink" title="全部のシーンをアンロードして、1つだけ読み込む"></a>全部のシーンをアンロードして、1つだけ読み込む</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SceneManager.LoadScene(<span class="string">"シーン名"</span>);</span><br><span class="line"><span class="comment">// もしくは</span></span><br><span class="line">SceneManager.LoadScene(<span class="string">"シーン名"</span>, LoadSceneMode.Single);</span><br></pre></td></tr></table></figure><p>普通にやるとこうなる。</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Input.GetKeyDownとFixedUpdateは一緒にしないほうがいいっぽい</title>
      <link href="/2016/01/04/unity-input-getkeydown-fixedupdate/"/>
      <url>/2016/01/04/unity-input-getkeydown-fixedupdate/</url>
      
        <content type="html"><![CDATA[<p>Unityで2Dのスクロールゲームを作っています。<br>スペースキーを押したとき、Jumpするように、次のようなコードを書きました。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">"Jump"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 処理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、ジャンプするときと、しないときがあり、</p><p>Linecastの問題かと思ってググっていたところ、</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://gamesonytablet.blogspot.jp/2012/12/unityinput.html" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>を見つけました。</p><p>サイトによると、FixedUpdateではInput.GetKeyDownはしないほうがいいらしいです。</p><p>理由は、FixedUpdateで、Inputの値がとれるタイミングとは限らないかららしいです。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> IsDownJumpButton = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Input.GetButtonDown(<span class="string">"Jump"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        IsDownJumpButton = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (IsDownJumpButton)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 処理</span></span><br><span class="line">        IsDownJumpButton = <span class="literal">false</span>; <span class="comment">// チェックしたよ</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】Script上でのnew GameObject()の使い方</title>
      <link href="/2016/01/04/unity-new-gameobject/"/>
      <url>/2016/01/04/unity-new-gameobject/</url>
      
        <content type="html"><![CDATA[<p>(Unity5.3.1で確認)</p><p>Unityで空のGameObjectを作って、シーンに追加したいとき、<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Instantiate(<span class="keyword">new</span> GameObject());</span><br></pre></td></tr></table></figure></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/11.png" alt></p><p>あれー！！なんか2つ作られてるー・・</p><p>そうです。実は上のコード、二重でゲームオブジェクトを作っているのです！</p><p>というわけで、解決策。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> GameObject();</span><br></pre></td></tr></table></figure><p><code>Instantiate()</code>と書くことはできないので、<code>new GameObject();</code>とそのまま書いてみます。</p><p>これだけじゃ作るだけでコンポーネントのアタッチとか何もできないので、名前を変えてみます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GameObject g = <span class="keyword">new</span> GameObject();</span><br><span class="line">g.name = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/12.png" alt></p><p>はい！できました。</p><ul><li>Unity Documentationの<a href="http://docs.unity3d.com/ja/current/ScriptReference/GameObject-ctor.html" target="_blank" rel="noopener">GameObject.GameObject</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>なぜかUnityでtransform.Translateができなかった</title>
      <link href="/2016/01/04/unity-couldnt-transform-translate/"/>
      <url>/2016/01/04/unity-couldnt-transform-translate/</url>
      
        <content type="html"><![CDATA[<p>なんでかわからないけどできなかった。</p><p>前は、Animatorでtransformを変えていたからできなかったれど、</p><p>今回は違った。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gameObject.transform.Translate(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>こんな感じになっていたコードを、</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vec3 = gameObject.transform.position;</span><br><span class="line">vec3.x += <span class="number">10</span>;</span><br><span class="line">vec3.y += <span class="number">10</span>;</span><br><span class="line">gameObject.transform.position = vec3;</span><br></pre></td></tr></table></figure><p>こうしたらできた。</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> csharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScriptで、関数を型にする</title>
      <link href="/2016/01/04/ts-void-type/"/>
      <url>/2016/01/04/ts-void-type/</url>
      
        <content type="html"><![CDATA[<p>Typescriptの型として、</p><p>「number」「string」「boolean」などとありますが、</p><p>実は、関数も型にできます！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var function1:(arg1:number, arg2:string)=&gt;boolean;</span><br></pre></td></tr></table></figure><p>こんな感じ。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(引数名:型, 引数名:型 .....)=&gt;戻り値</span><br></pre></td></tr></table></figure><p>戻り値がないときは、<code>void</code>を指定できます。</p><h2 id="どんなときにつかうの？"><a href="#どんなときにつかうの？" class="headerlink" title="どんなときにつかうの？"></a>どんなときにつかうの？</h2><h3 id="コールバック引数を使いたい"><a href="#コールバック引数を使いたい" class="headerlink" title="コールバック引数を使いたい"></a>コールバック引数を使いたい</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">progressA</span>(<span class="params">callback: (msg:<span class="built_in">string</span>)=&gt;<span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">  callback(<span class="string">"hoge"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">progressA(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="関数を配列とする"><a href="#関数を配列とする" class="headerlink" title="関数を配列とする"></a>関数を配列とする</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fnArray:<span class="built_in">Array</span>&lt;<span class="function">(<span class="params">msg:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span>&gt; = [];</span><br><span class="line">fnArray.push(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  alert(msg);</span><br><span class="line">&#125;);</span><br><span class="line">fnArray.push(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;);</span><br><span class="line">fnArray.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 関数だから呼び出せる</span></span><br><span class="line">  i(<span class="string">"Hello, TypeScript!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="AddEventListenerの引数にも！"><a href="#AddEventListenerの引数にも！" class="headerlink" title="AddEventListenerの引数にも！"></a>AddEventListenerの引数にも！</h2><p>lib.d.tsを見てみると、</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="keyword">type</span>: <span class="string">"click"</span>, listener: <span class="function">(<span class="params">ev: MouseEvent</span>) =&gt;</span> <span class="built_in">any</span>, useCapture?: <span class="built_in">boolean</span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><p>引数<code>listener</code>の型にも使われています！</p><p>TypeScript楽しい！奥深い！</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity2D用のアニメーションするスプライト作った</title>
      <link href="/2016/01/02/unity2d-sprite/"/>
      <url>/2016/01/02/unity2d-sprite/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="//polaris-bear.lolipop.jp/testserver/oacharmove/oacm.js"></script><div id="oacm"></div><p>(移動はjsにて)</p><p>Unity2Dのゲームを<a href="http://github.com/shundroid/OpenAdventure" target="_blank" rel="noopener">作っています</a>。</p><p>その時に作ったキャラクターをアニメーションさせてみました！</p><p>初めてのアニメーションで、データ間違えたりとかして難しかったです。</p><p>ソフトは、<a href="http://takabosoft.com/edge" target="_blank" rel="noopener">Edge</a>を使わせていただきました。</p><p>画像はこちらです。<br><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/charsprites.png" alt></p><p>UnityでSliceしたとき、隣同士の画像の端っこが見えてしまうので、</p><p>1px間隔を開けています。</p>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
          <category> Made by me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
            <tag> sprite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Huemanテーマで、トップページの日付の形式を変えたい</title>
      <link href="/2016/01/02/hueman-theme-date-change/"/>
      <url>/2016/01/02/hueman-theme-date-change/</url>
      
        <content type="html"><![CDATA[<p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/9.png" alt></p><p>このサイトのトップページですが、</p><p>日付が、「日 月 年」になっています。</p><p>これでは、「2016年11月」と読めてしまいます。</p><h2 id="なぜそうなるの？"><a href="#なぜそうなるの？" class="headerlink" title="なぜそうなるの？"></a>なぜそうなるの？</h2><p>これは、このサイトのテーマ「Hueman」の設定のせいです。</p><p>早速直しましょう。</p><h2 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h2><p>テーマファイルを変更します。この変更は、テーマの更新によって消えてしまうので、</p><p>ずっと残したいときは、子テーマを利用しましょう。</p><p>子テーマの作り方は、<a href="http://viral-community.com/wordpress/wp-child-theme-5818/" target="_blank" rel="noopener">こちらのサイト</a>がわかりやすかったです。</p><h3 id="content-phpを修正"><a href="#content-phpを修正" class="headerlink" title="content.phpを修正"></a>content.phpを修正</h3><p><code>&lt;?php the_time(&#39;j M, Y&#39;); ?&gt;</code>となっているところを、<br><code>&lt;?php the_time(&#39;Y年n月j日&#39;); ?&gt;</code>に変更します。</p><p>変更すると、次のようになります。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-meta group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"post-category"</span>&gt;</span>&lt;?php the_category(' / '); ?&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"post-date"</span>&gt;</span>&lt;?php the_time('Y年n月j日'); ?&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.post-meta--&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="content-featured-php"><a href="#content-featured-php" class="headerlink" title="content-featured.php"></a>content-featured.php</h3><p>先ほどの編集で、一番新しい記事以外は直りました。</p><p>content-featured.phpも同じように、<code>&lt;?php the_time(&#39;j M, Y&#39;); ?&gt;</code>の部分を変更します。</p><p>変更すると、次のようになります。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-meta group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"post-category"</span>&gt;</span>&lt;?php the_category(' / '); ?&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"post-date"</span>&gt;</span>&lt;?php the_time('Y年n月j日'); ?&gt;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--/.post-meta--&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/10.png" alt></p><p>これで直りました！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hueman </tag>
            
            <tag> php </tag>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【WordPress】MarkdownでSyntaxHighlighter Evolvedを使うとき、「&lt;」などと変換されてしまう</title>
      <link href="/2016/01/01/wp-md-syntax-escape/"/>
      <url>/2016/01/01/wp-md-syntax-escape/</url>
      
        <content type="html"><![CDATA[<iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://qiita.com/budougumi0617/items/28eee77bec22991651fc" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>まさにドンピシャでした！ありがとうございます！！</p><script src="https://gist.github.com/shundroid/3ebf4218c96f4e7a980a.js"></script>このようになっているコード。`() => {` の、`>`の部分が見事に`&gt;`になってしまうんです。そんなときは、次のように書きましょう。<script src="https://gist.github.com/shundroid/6cc21495f67bfbf9a17c.js"></script><p>ポイントは、‘‘‘と書いていたところを、divタグとショートコードで書くところです。</p><p>これで解決！budougumiさんありがとうございます。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> highlight </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#で、asyncを利用した別タスクから、UIコントロールをさわる</title>
      <link href="/2016/01/01/c-sharp-async-ui/"/>
      <url>/2016/01/01/c-sharp-async-ui/</url>
      
        <content type="html"><![CDATA[<p>C#で、重い処理をしているときなどに、マルチスレッドで、</p><p>別タスクからUIをさわりたいときがあるのですが、エラーが出てしまいます。</p><p>そんなときは、<em>Task<t>型の関数を、awaitで実行</t></em>すればいいのです。</p><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> heavyResult = <span class="keyword">await</span> runTask(); <span class="comment">// 1.</span></span><br><span class="line">    label1.Text = heavyResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">runTask</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>); <span class="comment">// 2.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hogehoge"</span>; <span class="comment">// 3.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>番号はコード内のコメントの番号と対応しています。</p><ol><li>非同期でrunTask関数を実行</li><li>別Taskでの動作の確認のために、1秒間止める。この間もUIは動作する。</li><li>1秒間たった後、文字列hogehogeを返す。</li><li>戻り値をlabelに書きだす。</li></ol><p>別タスクで処理を行っているため、1秒待っている間も、UIは応答します。</p><h2 id="もっとコンパクトに"><a href="#もっとコンパクトに" class="headerlink" title="もっとコンパクトに"></a>もっとコンパクトに</h2><p>別の関数に分けなくてもできます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hogehoge"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    label1.Text = result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="繰り返し行う"><a href="#繰り返し行う" class="headerlink" title="繰り返し行う"></a>繰り返し行う</h2><p>繰り返し行うときは、一回一回、別のタスクとして実行します。<br>次の例は、1秒経って <code>hogehoge</code>と表示し、さらに1秒後に <code>fugafuga</code>と表示します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    label1.Text = <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hogehoge"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    label1.Text = <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fugafuga"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>応用して、「何% 完了しました」のような処理もできます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="function"><span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        label1.Text = <span class="keyword">await</span> progress(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">progress</span>(<span class="params"><span class="keyword">int</span> percent</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">100</span>); <span class="comment">// 何らかの処理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">$"<span class="subst">&#123;percent&#125;</span>% 完了しました"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>追記</strong></p><p>Qiitaで、NetSeedさんに教えていただきました。</p><ul><li>Invokeメソッドとasync/awaitが一緒になっていたので、async/awaitの良さがわかりにくい。</li><li>Labelに書きだすタスクと文字列を送るタスクを分けたほうがよい。</li></ul><p>ということだったので、変更しました。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity2DでRaycastを使って座標からGameObjectを取得する</title>
      <link href="/2016/01/01/unity2d-ray-get-gameobject/"/>
      <url>/2016/01/01/unity2d-ray-get-gameobject/</url>
      
        <content type="html"><![CDATA[<p>Raycastの練習として、やってみました。<br>ほかの取り方もあるかもしれません。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vector3 pos = <span class="keyword">new</span> Vector3(<span class="comment">/* 好きな値 */</span>);</span><br><span class="line">RaycastHit2D hit = Physics2D.Raycast(pos, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可視化</span></span><br><span class="line">Debug.DrawRay(pos, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>), Color.blue, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンソールにhitしたGameObjectを出力</span></span><br><span class="line">Debug.Log(hit.collider);</span><br></pre></td></tr></table></figure><p>この<code>hit.collider</code>でGameObjectを取れます。</p><h2 id="マウス座標からもとれるよ"><a href="#マウス座標からもとれるよ" class="headerlink" title="マウス座標からもとれるよ"></a>マウス座標からもとれるよ</h2><p>このやり方だと、遠回りになるかもしれませんが、<br>マウス座標からとるのも簡単です！<br>上のコードの最初の行を、次のように変えるとできます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vector3 pos = Camera.main.ScreenToWorldPoint(Input.mousePosition);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
            <tag> raycast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascriptでアニメーションを簡単に使える「move.js」を使ってみる</title>
      <link href="/2016/01/01/js-movejs/"/>
      <url>/2016/01/01/js-movejs/</url>
      
        <content type="html"><![CDATA[<iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=https://visionmedia.github.io/move.js/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>簡単な記法で、アニメーションをすることができます。</p><p>中では、transition-delayとかを使っているようです。</p><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower i move.js</span><br></pre></td></tr></table></figure><p>※ i と書くと、installを略すことができます。</p><h2 id="head-タグ内で読み込むと怒られる！"><a href="#head-タグ内で読み込むと怒られる！" class="headerlink" title="head タグ内で読み込むと怒られる！"></a>head タグ内で読み込むと怒られる！</h2><p>中でonload時にdocument.bodyを呼び出しているので、<br>head タグ内で scriptタグで読み込むとエラーが出てしまいます。</p><p>解決策は２つあります。</p><ul><li>webpack などを使用して bundle し、それを body タグで読み込む</li><li>body タグ内で読み込む</li><li>js から動的に読み込む</li></ul><p>おすすめは webpack ですが、手軽ではないので、<br>body タグと js から動的に読み込む方法を紹介します。</p><h3 id="body-タグ内で読み込む場合"><a href="#body-タグ内で読み込む場合" class="headerlink" title="body タグ内で読み込む場合"></a>body タグ内で読み込む場合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;インストール先&gt;/bower_components/move.js/move.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js-から動的に読み込む場合"><a href="#js-から動的に読み込む場合" class="headerlink" title="js から動的に読み込む場合"></a>js から動的に読み込む場合</h3><p>次のように読み込みましょう！</p><script src="https://gist.github.com/shundroid/770e9abd68b061671a18.js"></script><h2 id="アニメーションしよう！"><a href="#アニメーションしよう！" class="headerlink" title="アニメーションしよう！"></a>アニメーションしよう！</h2><p>まず構文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">move(<span class="string">"クエリ"</span>)<span class="comment">/*..... アニメーション処理 */</span>.end();</span><br></pre></td></tr></table></figure><p><code>move()</code>から<code>end()</code>の間に処理を書くわけです。<br>処理は、<a href="https://visionmedia.github.io/move.js/" target="_blank" rel="noopener">公式サイト</a>にたくさん書いてあります。<br>ここでは一部を紹介します。</p><h3 id="cssプロパティを指定する"><a href="#cssプロパティを指定する" class="headerlink" title="cssプロパティを指定する"></a>cssプロパティを指定する</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.set(<span class="string">"CSSプロパティ名"</span>, 値)</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">move(<span class="string">"div.box"</span>)</span><br><span class="line">  .set(<span class="string">"opacity"</span>, <span class="number">0</span>)</span><br><span class="line">  .end();</span><br></pre></td></tr></table></figure><h3 id="アニメーションの時間を指定する"><a href="#アニメーションの時間を指定する" class="headerlink" title="アニメーションの時間を指定する"></a>アニメーションの時間を指定する</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.duration(<span class="string">"秒数"</span>)</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">move(<span class="string">"div.box"</span>)</span><br><span class="line">  .set(<span class="string">"opacity"</span>, <span class="number">0</span>)</span><br><span class="line">  .duration(<span class="string">"1s"</span>);</span><br><span class="line">  .end();</span><br></pre></td></tr></table></figure><h3 id="移動する"><a href="#移動する" class="headerlink" title="移動する"></a>移動する</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.translate(x, y)</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">move(<span class="string">"div.box"</span>)</span><br><span class="line">  .translate(<span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">  .duration(<span class="string">"0.5s"</span>)</span><br><span class="line">  .end();</span><br></pre></td></tr></table></figure><h3 id="アニメーションが終わった後に実行する"><a href="#アニメーションが終わった後に実行する" class="headerlink" title="アニメーションが終わった後に実行する"></a>アニメーションが終わった後に実行する</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.then()<span class="comment">/* 処理 */</span>.pop()</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">move(<span class="string">"div.box"</span>)</span><br><span class="line">  .translate(<span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">  .then()</span><br><span class="line">  .set(<span class="string">"opacity"</span>, <span class="number">0</span>)</span><br><span class="line">  .pop()</span><br><span class="line">  .end();</span><br></pre></td></tr></table></figure><p>例では、移動をしてから、opacityを0に指定します。</p><p>便利なので、使ってみてください！</p>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> bower </tag>
            
            <tag> movejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>カクカクしたフォント「美咲フォント」がきれい！</title>
      <link href="/2016/01/01/misaki-font/"/>
      <url>/2016/01/01/misaki-font/</url>
      
        <content type="html"><![CDATA[<p>Unityで2Dの横スクロールアクションを<a href="https://github.com/shundroid/OpenAdventure" target="_blank" rel="noopener">作っています</a>。</p><p>そのUIに使うフォントを考えていた時、</p><p>「<a href="http://www.geocities.jp/littlimi/misaki.htm" target="_blank" rel="noopener">美咲フォント</a>」を見つけました。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/5.png" alt="5"></p><p>こんな感じです。</p><p>また、Unityで外部フォントを使う方法は、<a href="http://qiita.com/shundroid/items/6f93548f889f56d737c2" target="_blank" rel="noopener">こちら</a>を参照してください！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
            <tag> font </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity2Dでspriteがぼやける</title>
      <link href="/2016/01/01/unity2d-sprite-filter/"/>
      <url>/2016/01/01/unity2d-sprite-filter/</url>
      
        <content type="html"><![CDATA[<p>こちらのサイトを参考にしました。</p><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://dojican-lab.blogspot.jp/2015/04/unity.html" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>キャラクターがかわいい！！</p><p>上のブログの通りで、</p><p>Assets ビューでSpriteを選択したとき、<br>Filter ModeをBilinearからPoint (no filter)に変えます。</p><p>ありがとうございます！</p>]]></content>
      
      
      <categories>
          
          <category> SERIES </category>
          
          <category> Unity </category>
          
          <category> Unity-Tips </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> unity2d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulpでtsify＋watchify</title>
      <link href="/2016/01/01/gulp-tsify-watchify/"/>
      <url>/2016/01/01/gulp-tsify-watchify/</url>
      
        <content type="html"><![CDATA[<p>Qiitaにもかきました。<br><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://qiita.com/shundroid/items/291e16351d69555f4f34" width="300" height="150" frameborder="0" scrolling="no"></iframe></p><p>TypeScriptでBrowserifyが使える、 <a href="https://www.npmjs.com/package/tsify" target="_blank" rel="noopener">tsify</a>を知ったのですが、</p><p>ビルドの時間が遅いし、毎回「gulp XXX」って打つのが大変なので、</p><p><a href="https://www.npmjs.com/package/watchify" target="_blank" rel="noopener">watchify</a>と一緒に使えないかな・・・と思いました。</p><p>次のようなgulpfile.jsを作りました。</p><script src="https://gist.github.com/shundroid/901942f07ffc824fbb5a.js"></script><ul><li><code>gulp watchify-tsify</code>と実行する。</li><li><code>./ts/a.ts</code>、<code>./ts/b.ts</code>を監視する。</li><li>watchifyでupdateが発生するたびに、<code>runBundle()</code>を呼び出す。</li><li>b.pluginでtsifyを読み込み、<code>js/all.js</code>を出力する。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://2inc.org/blog/2015/05/13/4818/" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> Web Programming </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> browserify </tag>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ブログをはじめました！</title>
      <link href="/2016/01/01/start-blog/"/>
      <url>/2016/01/01/start-blog/</url>
      
        <content type="html"><![CDATA[<p>Web プログラミングや、Unity、Windowsなどについて書いていきたいと思います。</p><p>よろしくお願いします。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>コマンドプロンプトをタブ化してくれる、「ConEmu」が便利！</title>
      <link href="/2016/01/01/win-conemu/"/>
      <url>/2016/01/01/win-conemu/</url>
      
        <content type="html"><![CDATA[<p>最近、GulpやNode.jsを使うようになって、</p><p>「コマンドプロンプト」を使う機会が増えてきました。</p><p>そのとき、いちいちcdコマンドを使うのはつらいので、</p><p>ディレクトリ一つひとつにコマンドプロンプトを開くのですが、</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/1.png" alt="1"></p><p>こんな感じで、どれがどれなのかわかりにくくなってしまいます。</p><p>そこで、「<a href="https://osdn.jp/projects/conemu/" target="_blank" rel="noopener">ConEmu</a>」を見つけました。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/2.png" alt="2"></p><p>7z形式で圧縮されているので、Lhaplusとかで解凍してください。</p><p>中には、「ConEmu.exe」、「ConEmu64.exe」が入っています。</p><p>OSが64bitのときは64が付いている方にしましょう。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/3.png" alt="3"></p><p>初回のみ、↑のような画面が表示されます。OKを押しましょう。</p><p><img src="http://polaris-bear.lolipop.jp/shunroom/wp-content/uploads/2016/01/4.png" alt="4"></p><p>おぉ～、コマンドプロンプトが現れました！</p><p>しかもデザインもきれい！</p><p>四角で囲っている「＋」ボタンをクリックすると、タブが出ます。</p><p>タブは、コマンドプロンプトの「exit」で閉じることができます。</p><p>デフォルトの設定では、設定でレジストリを使わないので、</p><p>バックアップなどが簡単に取れます。</p><p>便利なので、使ってみてください！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><iframe class="hatenablogcard" style="width: 100%; height: 155px; max-width: 680px;" src="https://hatenablog-parts.com/embed?url=http://kenpg.bitbucket.org/blog/201506/07.html" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
      
      
      <categories>
          
          <category> Collections </category>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
            <tag> cmd </tag>
            
            <tag> conemu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>タイピング・サイクル</title>
      <link href="/2015/02/16/typing-cycle/"/>
      <url>/2015/02/16/typing-cycle/</url>
      
        <content type="html"><![CDATA[<p>このゲームは、“コンピュータとの追いかけっこ”ができる、</p><p>新感覚のタイピングゲームです。</p><p>コンピュータは、どんどん単語を表示していきます。</p><p>この単語が、一周してしまうと、ゲームオーバーです。</p><p>追いつかれないように、単語を消していかなければなりません。</p><p>タイピングの練習にもなります！</p><p>おとなもこどもも楽しめます　(^▽^)/</p><h2 id="ダウンロード"><a href="#ダウンロード" class="headerlink" title="ダウンロード"></a>ダウンロード</h2><p>Windows 8.1: <a href="http://apps.microsoft.com/windows/ja-jp/app/8d2f6ad3-183f-4b76-b280-64176e5fa006" target="_blank" rel="noopener">http://apps.microsoft.com/windows/ja-jp/app/8d2f6ad3-183f-4b76-b280-64176e5fa006</a></p><p>ダウンロード数が2015年2月16日、3,940を超えました！！<br>ダウンロードありがとうございます！</p>]]></content>
      
      
      <categories>
          
          <category> Made by me </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UFO-Escape</title>
      <link href="/2014/12/16/ufo-escape/"/>
      <url>/2014/12/16/ufo-escape/</url>
      
        <content type="html"><![CDATA[<p>UFOを加速度で操作し、壁に当たらないようにしながら、</p><p>上からふってくる爆弾を避けて進み、</p><p>ぶどうをとることでスコアを上げていくゲームです。</p><p>Windows8.1、FirefoxOSで動きます。</p><p><strong>ダウンロード</strong></p><p>Windows 8.1: <a href="http://apps.microsoft.com/windows/ja-jp/app/bc644352-006a-4706-9b65-6c97f68d3e7a" target="_blank" rel="noopener">http://apps.microsoft.com/windows/ja-jp/app/bc644352-006a-4706-9b65-6c97f68d3e7a</a></p><p>FirefoxOS: <a href="https://marketplace.firefox.com/app/ufo-escape" target="_blank" rel="noopener">https://marketplace.firefox.com/app/ufo-escape</a></p>]]></content>
      
      
      <categories>
          
          <category> Made by me </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C#、Unity、JavaScript、PHPを使いこなす小学生プログラマがマイクロソフトで最新技術に触れてみた</title>
      <link href="/2014/01/22/ms-first-visit/"/>
      <url>/2014/01/22/ms-first-visit/</url>
      
        <content type="html"><![CDATA[<p>CodeIQ の記事が公開終了になってしまったため、こちらで公開します。</p><p><img src="https://lh3.googleusercontent.com/Z3b1k8fY5rW3Zlt2zXyyTk3GvFQKRKLRXkPe-q38cAhucLx2ByqA8ARhBK6nkHcZ2FNccRsPUo9y0zeenmaAMP3Iaju_NkhVmHErWpUwCqwC_T3BhNqx0ggQoBj41EE_KpjZOw6b8FNXa8bteFe5tmlUw1uR1efeD9j_3V-wV-6LNzhxE8YF5GUaaYWV6VcX-lMBGEuSd3P7crYTxq_p3rK0NT1fMLCtNyUS7XxQMqDQsXUsHJhgqnLwd6BfZOWX9UtInlZBY1d3A6Zs2wg-f8YAJiJ1DitCVpfpktBigWy7NLy5OI3dWi9emh4JB59PlsDecw-oLn_16Dm2hN8qPHUlsm5lR0ZkCOZ4nIGiBVgz4Bs01o0090hYiNSb6sGS3k5H-CUeozfWbojQNTa6wtF1JkOW8gFRa27v7-aVD8siSnTS6uuMVxy4LJ7P2YlDs3B5ftksc-E78DeHaW7pndhLXr1nZOIjyv4ogOzj9m3tyA_bpYLguArfPZ-x4I-e5ImfgNHk-KXYe0eabMIprF7KRvol0h4Fy2ky_3rI9GkCE5ZEL5PglKftUsXfr1E5McW3JMQOdV6xKZ5pe8qhn0mnQxoa-yMUB6JdJt4=s300-no" alt></p><p>小学5年生でC#、Unity、JavaScript、PHPを使いこなすシュン君。2013年夏に開催された中・高校生のためのプログラミング・ITキャンプ「Life is Tech！」にも参加している。</p><p>その後のアプリコンテストでは最終予選まで残ったという。そんな彼にマイクロソフトの最新技術に触れる機会が訪れた。彼の頭中にはどんな夢が広がったのだろうか。 by 馬場美由紀 （CodeIQ中の人）</p><h2 id="小学生プログラマシュン君の素顔"><a href="#小学生プログラマシュン君の素顔" class="headerlink" title="小学生プログラマシュン君の素顔"></a>小学生プログラマシュン君の素顔</h2><p>2013年も終わりに近づいた12月26日、日本マイクロソフトのテクノロジーセンターを一人の小学生が訪れた。名前はシュン君。東京都に住む小学5年生だ。</p><p>シュン君がパソコンに興味を抱いたのは小学生になった頃。<br>「母親の携帯電話やパソコンから、祖母にメールを送って遊んでいたのですが、小学校3年生の時にPowerPointのアニメーション機能にはまり、『もっとパソコンでいろんなことがしたい』と言うので、まず基本的なITスキルを学ばせることにし、アビバキッズに通わせ、1年ほどで修了しました。</p><p>その頃、幼稚園の年長組から通っているレゴスクールで、今度はマインドストームに夢中になり、『自分でプログラムを書けるようになりたい』と言い出しまして、小学校4年からプログラミングの勉強を始めました」と、シュン君のお母さん。</p><p><img src="https://lh3.googleusercontent.com/zH2fC9zS9rTptqWS6uA9rf6CHbTltUpiJqk9UkvwryT4RWh52BKxT4VyU26rKQEF-U7WU4F58XzOVies3PT0AialFJ23JICQTX5oXPy3MmnbidGsEpLdTmcmWt_jD66XHMNHdgawRpQAbkSZWjGBZ0L0JmQkxnXUA5KwKIl0Z7tEQFegfAgdD6Mpi9b7B6dX_7QHPuGF3-r6uuxQogQ_Z7F-DfHVtqayLnOeYK470usamH22uTrGZUHEibBAQEKdCKp-GblXGi9KwQqKvbFylvjjw3AHdRTj4Bf4YblZJl6te8RhCoRyBoXYRrdk5j9F9r6YRi1YlGv2Lqe_75Bn1cg4ue07EaSlU4F3GMY2EB_ClxYd3hp6lVLbNOqfaiptzwLntKfmlEJ-JXj3G_TJdxgMQpooycGM5AGdQPZFdaAMhHZxmR820XGvVBZr3yIDUmjL2zf_aGji719QiizvTK4fdCJqad7oQgteeCLOWy_4djxSngok4XJ7-ZL_Kt2CqfWl7tX3jFnu8bl5oyrfaADx6df8gQtrQZJF4RLi3dd8R65yd2c_Jsm-WguPTfiyRS135niuMK_1IGVVzC--joQ0f8BbB6jcvKgsN-w=w640-h426-no" alt></p><p>「お母さんにプログラミングの本を買ってもらって勉強しました。最初に勉強したのはVisual Basic。本に載っているサンプルを参考にアプリを作ったんです。そしたら楽しくてプログラミングが大好きになりました」（シュン君）</p><p>お母さんは「本に載っている課題が全部できたら次の本を買ってあげることにしていたんですけど、1～2カ月でどんどん進んでいくんです。よっぽど楽しいんでしょうね」と笑って、シュン君の言語の習得スピードの速さを披露する。</p><p>そして5年生となった今、C#、Unity、JavaScript、PHPを習得。<br>さらには、自分でアプリを作りたくて、Visual Studioを使い始めたという。<br>そんなシュン君の将来の夢は、「マイクロソフトでWindowsやVisual Studioを作ること」。</p><p>現在、ソフト開発者として活躍している人の中にも、小学生の頃にプログラムやコンピュータに触れたことがきっかけで仕事に就いた人がたくさんいるはず。</p><p>今回はそんなソフト開発者の原点の瞬間に立ち合うことができた。<br>その純粋な姿、想いをレポートする。</p><h2 id="なぜ、日本マイクロソフトの訪問が実現したのか"><a href="#なぜ、日本マイクロソフトの訪問が実現したのか" class="headerlink" title="なぜ、日本マイクロソフトの訪問が実現したのか"></a>なぜ、日本マイクロソフトの訪問が実現したのか</h2><p>そのきっかけは、2013年8月に東京大学キャンパスで開催された「Life is Tech！」に小学生ながら参加したことや、アプリ甲子園というアプリコンテストで最終予選に残ったことである。</p><p>シュン君は「プログラミングの世界のことを、もっとたくさん知りたい」という思いが募ったという。</p><p><img src="https://lh3.googleusercontent.com/W2FAbd7t9Zi0It-ZC_WZEAjNJxpwun1oH_I9JJODUGveIeGROKVI8qtMfPvvxD4mSizKPS4LyRWWcY3-VScw96RLlQv-y4p6CHr82Z8Rs84HxScjtyYeHyTaQKCh1emKNqGuoL-X-XSra-ccA4dq2ZHPdThFTzX4JlcHs7TLwG3hPVXLoFG5zBPT4LtzaSGhC1q3L4itvQ8TUZkHd6lLY0qHUseYDGot6iT_I-Z_LBA_mrVC5YHFvceZ8kkW71XCcanYc-cxBtRIHH2W8iGbQPUN2HiDMRMoLRAbdDYzX-vxmjfWFYdUGXC-YEzYFLZYuqlOzgMnom2onN5Drih1ldHAOdVKfzhmGZPvxgdEv-K8iSBDDmCvjczAiic5JwC4RuqPeDGBKoO5O0QunlXWj9bgf2ANRU46BCrCXdGiMqAJ2VJHIEzZ-fQ4r3DfOMb4bJAEqOfBelQChqQgW2Qi4gQ54Xq9iyVNbhZFGF_ARbCYFQqNraUeMEGgcR8U9jm_Si3mjXgbZqIKoOjAOrHA4_dZ_EleQMTXOz7NxKjV62oHpm6whmKEGOP2g8icZ6-b5JEuZaf4tLA8wi4MrBkI0kpF0cjGOOa422Sslc4=w640-h426-no" alt></p><p>そこで、日本マイクロソフトのクラウドコンピューティングや、Webサービスを中心とした啓蒙活動を行っているエバンジェリスト砂金信一郎氏に「マイクロソフト社のことや、Microsoftの最新技術やプログラミングのこと、これからどんなことを勉強すればよいのかについて、教えてください」という自分の思いを一杯詰め込んだ手紙を送ったというのだ。</p><p>日本マイクロソフトはIT業界を牽引する企業の1社として、K-12（小学1年生から高校3年生）に関するIT教育の充実に力を入れている。砂金氏もその活動に注力している一人だ。</p><p>シュン君の熱い手紙を読んだ砂金氏は、「これまで小学生からこういった手紙が届いた例がなく戸惑いました。しかし、シュン君を日本マイクロソフト本社に招き、同社内にあるテクノロジーセンター（MTC）の見学をしてもらうと同時に、最新技術に触れてもらうことで、将来、優秀なソフト開発者に育つ一助になりたいと考えました」と明かす。</p><p>そしてそれは、冬休み1日目に実現した。</p><h2 id="テクノロジーセンター内の設備に感激"><a href="#テクノロジーセンター内の設備に感激" class="headerlink" title="テクノロジーセンター内の設備に感激"></a>テクノロジーセンター内の設備に感激</h2><p>MTCが備えるブリーフィングルームの一つ、エンビジョニングセンターに通されたシュン君の目の前に登壇したのは、同センター長の澤円氏。</p><p>澤氏は97年にマイクロソフト（現日本マイクロソフト）に入社。ビル・ゲイツがマイクロソフト社の卓越した社員にのみ授与する「Chairman’s Award」を受賞。この賞は全マイクロソフト社員約9万人の中で、1年にたった十数人しか受賞していない賞だ。</p><p><img src="https://lh3.googleusercontent.com/LWcxMO40XM5QZ6WiwCOOk27SHHngxEzsZq4LFuxbk1AbFGcoFHPE7kl1rdMP695twpclq8K9ZRKXT46I6C5RKXMzPFyH5ivIBeiSRLQpsj1Ohyyg5BA7RVnp1vOIRTGUpzuHri_OunwyslO8kpIhAmfShc5e7l_POoMYoQZJrDnhpwJmI3QJJeJQ77mcf4bjo_YkhEhVzgI-QtxcWKVxuQagvjlUO-Gdi8iUmxpqpX9WowcpYI9DarqIqKNJ3sfAg5Gvt1QhcJpxUNW2DVtl7XtCex7EFchFPPYMKrLjMS3jbr6fDvicn60X8EcdLk00_Bmfh_HTYpFW8vyqef5k8OHamluIUc01DFJRvZeC6dR5icpEt-il70zvlJ5npPnyId19d6en6VXHBKBKfYcwQEoBhRaoqZ_9VWzXv4-IsoY4n7vbN6As6b1tFURfgifmTm52Wzj_K5TKagS1EAC7-iJErljewTAxLCnmPs8GHbJuRJad0M1A_yCoFvz0JkzAo6m2NtPXAe0Pz2TlTsmWY2RtSh3e0ZtQha1QrLhXXBLvyhaBGWfhBByiWesc3KNtK9pUFLxTkpi-BdF6PJujJF9IHr5JhA3R0KoTZ_c=w640-h426-no" alt></p><p>大型ディスプレイなど、近未来的なその部屋の作りにちょっと緊張気味のシュン君。</p><p><img src="https://lh3.googleusercontent.com/XneHiCCN0M6uZGqeCNYlBhSU_sT5nccKiFzcZaEMhWMi_HgvZWYFQCfrsnHFSHo12ryLUcZxLS9rjRmYXExoUX0yrfvo0cx3bVX27i_WRDYJ_0EKAI0KxR3UfodWoKtQZFarcDs3ueiyrD0dizEjxAtI48Yj0tdhZT1PYIOjSIne_W6z1syXEbfNwOgagH3v43xqmCIAU-xrCH1O3OGZIw7Dy2C4bFAVtXHzTROJYw9Q4WIxlWCc4ITsTYEWpGAE0vNwL4QvWF8BOJhy7Xz8dWDRZv5iBXRHCCQzS2ar-EYdJ-i70YjhG2izpmdUn9ct-ncoHr_s2wp-YBjOAfDI4xKzIq8KpCEUG8siCLX3nG5bXQsBU4dLvaGp7itEfb3l-jq2_4y0GkLAWavhF0enas44biPr7i2rnZ_1ssGWl3-sQ1YSM93ZFsRWSNeCBDtwPCcfyUXuOMRvM3zKjXgU4snWmGtgvl_C5uzTUGnDSTrbcRBt2xt4NmVl62UeTNyewqzLahK8mVeDgQiBAMHrSwlaEPCLX9LU94CqqMKbF1DFlvgANu9yjUkp0bIcQeMJO_Yp27W7b01hUPh1anIkxeeY_WLB3jOFOQUITms=w640-h426-no" alt></p><p>シュン君の気持ちを和らげようと澤氏は、「この部屋を使うのは主にエグゼクティブの人たち。僕たち社員もほとんど入ったことなく、みんな緊張気味だから」と笑いを取りながら、やさしく話しかけていた。</p><p>そんな気遣いにプラスして、澤氏の「マイクロソフトが開発するのは、人が使うモノだけ」という話にシュン君の関心が緊張よりも増すように。</p><p>澤氏は続けて「例えばプログラムといっても、ロボットを動かすものもある。でもマイクロソフトが作るのはロボットを制御するプログラムを書くツール。動かすプログラムを自社製品として売ることはない」と説明。</p><p><img src="https://lh3.googleusercontent.com/yPUUYqbn8BeC7NEjOvgcXsDfiU5xSKUJK9MHM4nHvfwJXk4zIJQVOEq-N_EW9lVQ94SQSO9-kyALe-a6isa_136NI3QEaw63Um6GNvJF4heoeUS0kUPqga6CxqraobdUdlkFeCrVOOvyLkp5m682yX-C3UwNpujohFmarh0XM6q-4oopeY11cXKLHAQr0X0vNZMURIZgo8WVIZ-KA5nIJYjODPtvKv4bVzFnkQB1WIMJsDGvlYanmoGkoniRKrEB1H6mn1jy1OlP4yQiST_Q3WkuhzhgA3GPEOW5GbihGGEcQUxQJCmjri-5tzx_Ro1FdK05inLzEwFJ3FI15hnPlJZbcXQl5UZdibmGJEpE4R1C7b69fPBUQCTo9kjZdK_qzL6XdS0Qppx_XvRFOjRh6bpnumEQCvS9l0R5Y1iB2eSpY-2WHw6KI-aKoJhlla4Ss8OCqUZgTHCSGw-hT86eJWScewQANU912DKo5GXj2hiK4Jsc-7FhPXhSRD45r82pMXWekACpG-ozgr3QpgfAOofGl1mM4fXwCJcVB-Gn_hcmoCMSUJCq5IJtM8ndKRnf9VFvBRNUri4R-Rv8omswy5gtziXJRxFxnJ0zb5Y=w640-h426-no" alt></p><p>またマイクロソフトが作っているソフトウェアはWindowsやOfficeなどが有名だが、実はソフトウェアだけではないと、年代ごとにマイクロソフトが開発してきた製品の年表を見せると共に解説。</p><p>中でもプレゼンを映していた大画面のマルチタッチディスプレイもマイクロソフトが作っていると澤氏が言うと、びっくりしながらも少し欲しそうなシュン君。<br>その様子に「個人でもまったく買えない値段ではないんです。日本での価格は未定だけど車一台くらいかな」と澤氏。<br>その値段にがっかりしつつも、マルチタッチディスプレイでの体験を楽しんでいた。</p><p><img src="https://lh3.googleusercontent.com/TcW8crw_GKXRM8EYDrWmzK9_VG_TSXjzpHl8XXtRCnHfa_7VW65eEoHuA3HWDIXi6CgT4ovYR7WppvA6OgdGWti_y1I97e6Slg-CZjS9Kk4OQJqovHYi0SFzVPLJoauY_fgxeAl-IZHT2Sxvzw6bZPXKgyTuL0pxrboilkKesyqMVfRic5CxWr524ly6Fb9_XG8_pS9iYasxVGjIpINpFV0eMmHvvmP_ybJgfKEIhW2R1t4AJ1i-N6ZDpFARbSYtZAEGIWnNseNVhwp7fXPXE12lafnpAP9pgsV_kmdWFu7cQI3iqQpGZ-9nPMteUqCgzmu9aB-obdEZj-Zp7Fmw76T0B7nkUFHNThSWGqYzvmEvZ7b9XtK9C3nZXuWp02aK89SkvqK1wpaXQKFZewBrg3ykHESBL9VSrHH0--Q4iPHiDStPmd1Fd_NEs1w1nCWj3O1BEfD18rd-vNJAGw0mUDSLzB4BXoFG6xNbBrbBBDAgVJvlF61eIXfya0xoHZJnxeqrO2yVE1uhY9xd-ly75Nag4QriunnPtjTOGtzHm9d7gk5vffdS1XaDb813-MguMAKyRBqQWMnTSMLls0NcRDiS2WVjl5QjQzXFTvE=w640-h426-no" alt></p><h2 id="Kinectやマルチタッチディスプレイを体験し、目はキラキラに"><a href="#Kinectやマルチタッチディスプレイを体験し、目はキラキラに" class="headerlink" title="Kinectやマルチタッチディスプレイを体験し、目はキラキラに"></a>Kinectやマルチタッチディスプレイを体験し、目はキラキラに</h2><p>マイクロソフトについて簡単な説明が終わり、今まで説明した最新技術をいろいろ体験してもらおうと澤氏がシュン君を連れて行ったのは、新しいUI（ユーザーインタフェース）やUX（ユーザーエクスペリエンス）が体感できるMTCインタラクティブセンター。</p><p>ここではKinectやタッチディスプレイ、顔認証技術などを体験。Kinectを使い、ジェスチャーでスイッチのオン、オフができるシステムを、「すごい！」とキラキラの表情で何度も試してみるシュン君。</p><p><img src="https://lh3.googleusercontent.com/-CPapXFaGyk1yoGYz_L_BgHFjbHU-ExIaC26qAShiIIvQfUsZPOjZ5HKtToxOMPyM-6s8WbZIGJLGJUqkV50RuH5oxAYujIegI4-uJJnEqdKJT6HiYOBCMLxxoVEjkHpRotY9Nj2xUtc3WPmAJ9lzcAKI0ESY96clP0I5mK0-DiZenBW8KkQKNK1xXx_usWPulIywWg6RizhrTicGtqnnqAgjom9ZimidsVAs7C9pcud1PxezOoGbueekUgh3nKVunO_ifj06PxZJe822zbB5wWyKilch39e9DSB6OVT_ROp16BDkkgAM5IXwwqVo_mFfb2D2E7jUG0jwdsMBgVrHBBFaZDS4pPSJTk42fv6krvvX7Jh89eY2iDtkBC5SFBo-fmU5xIT2EDJijAJ9rPcGcaJnfLDF0aTUNFIzYDXlZre_hGzgBNby7aDy1aVNsxrJeF-0YgLozqkR5CHviDdcBhvOJ7JMxFFyJglL7h2K66SDo7BXWM76_eSgzzbzQAhUL9qvsqOYycoGb79ybM5QiWqAKp45QokZ9npSnB72vWfn41pjKdTLmdud3e1XUMGFnwdxwWZz_k5OWfp6SfKtTXdesEdhic8C9RWXOY=w640-h426-no" alt></p><p>またテーブル状になったマルチタッチディスプレイの地図アプリを操作し、自分の家を探すことに熱中。触っているうち「これ欲しい」とお母さんに訴えるシュン君だが、こちらの値段も車1台くらいと聞き、またまたがっかりモードに。</p><p>砂金氏の「アプリを作って大ヒットすれば、買えるかもしれないね」という言葉に、シュン君の目はキラリと輝くのだった。</p><p><img src="https://lh3.googleusercontent.com/BV-AN2rBPv6Czh-w7r_yUDf0fZmljmaRVWLK0oobLrk5FNkCrWWeNBTPAscAXXmFJ1QKfV-cUXYQnIiNBNaT6OXCZx8Y6PSR6BYsLSW6WislmbmQfS1OocR3Z4kXaEuOF1RZeKcGRgp75OkicSKkEzjEzEPrtNBLOboY8JAaCLEAG4nDEvYGyhdNQJsWQpoIxGfif9ZJCQImHT5jZ30_HNAxCOsnrdR0wIapHL2Qa9gpk7Jlf4iSV1T7MIS0-AiU1D5dgEwS_WDZV7fWgWHH5K96xDY31VN7BoCfPa40zNyQaUACx72DUrKDb3-yZCYEmTniYMFcmbo6GsIKUBSOcUePVGnvbU2Z_aUQTAoDxCA7ujoKuo3sRe-eUYILLoADvXDVXpJALQJnZrhv5WGWpP3HEkhxKu47CujjVRqhfnkE1SofLzyxM2GrphmVVfaJylSKYxsz3McFPLsmeeN3u3pX2BC5gZh3zWekaRMNVOGDTd3hoWpT1riA-w4iXFvzk97b5uA9QcqM7rzvSC2MDLrfQnyJjufJSkoo_ZNGY3EWqkIwfFoqTAIG-cLAf4NGr_tuoW_ZJexezdQ6Q9FO3H6r3XW5fm_GrzfFbyk=w640-h426-no" alt></p><p>ひと通り、最新技術に触れた後、さらにシュン君の目が輝く時間が訪れた。開発技術の訴求に努めるデベロッパーエバンジェリストの高橋忍氏が、Visual StudioでWindows Phone向けアプリの作り方を紹介するデモを行ったからだ。</p><p><img src="https://lh3.googleusercontent.com/tCEYqfnq4OJfUgT7E9pBaV2svMQmjr_l2Zdk5K90ITqGlYLehl18YHdXG0E8OsoBSsrYsi87Qoh-aQOyDoqIUozBXC1f6q9ZpeNCUe5qBmEOyACTZAsB8IMSVa8cFqbiGh4yFuZBkCt3HL4DYjqtrwyOc6GFcpqNeeYJYESpyJ7d8dIrIPVO1jwj-06I5UJhC6NiGTdgJPRPQc8eXFN86A5_qd5R9l2NYJ7GN6x4FYyN6_L6A-nOO2KueMxSB9nH2oXwTrQM5kn7gcuOqv8Lj8EBLPYfD7dIbNXbwgi3w993CViXEJ0tjVJk-EnMTA1aCjFKm8UqMWbm66x6nSzoLRLhJzsCRTS65h_X8OQRFl71qFZu-OHoyplOuXysfjNKRo3t2MJBsDQi2JU0kzLS17x-NE67H-kTsZ8fProiYncLItJWTL1g3drYB28mi4TlIg_YuDr1gkWJqn27Iv2VRIhAP1L96s-YIz-4K2GOuX8ZGVFPFxnQifs7z5ogSRhlO0_CB7Niu6p-lQosCFXr-eEvDdSUS0kyXDZeSI4b5uma9c632gIjKN2kQYOnMA01EK_Z54jdEudM6B1WnTI8ElWtAqgzpuDbcNX5RiY=w640-h426-no" alt></p><p>Visual Studioのデモ画面が映し出されると、シュン君から「あっ、Ultimateだ！」という声が。実はシュン君が使っているVisual StudioはProfessional。「またマニアックなところに反応するね」とニコニコ顔の高橋氏の言葉に、「Professionalとどう違うのかなと思って」とシュン君。</p><p>そんなシュン君の質問に高橋氏は「Ultimateは大人数で開発するために便利な機能が付いているんだよ。次期バージョンのVisual StudioもVisual Studioで開発しているというのは、豆知識（笑）。個人で開発するのであればほとんど違いはないから、大丈夫」。</p><p>スマホを持っていないシュン君は、スマホ向けアプリはほとんど開発したことがないという。そこで高橋氏はVisual Studioに搭載されているデバイスエミュレータの機能を披露。</p><p>「これを使えば実際にスマホがなくても、作ったアプリがちゃんと動作するか確かめられます。実はまだまだWindows Phone用のアプリ開発者は少ないので、今から勉強して優秀な開発者になってください」という言葉と共に、高橋氏はWindows Phone向けアプリの開発方法が記載された2冊の技術書をシュン君に進呈。</p><p>また同時に模擬用のWindows Phoneも。ビックリしながらも大感激するシュン君とお母さんに、高橋氏は「見た目はスマホですが、電話がかかってくることはありません。電話としては機能していませんから」と笑いながら答えていた。</p><p><img src="https://lh3.googleusercontent.com/V-hte4gUBggKjn0N3VCV64kx6_1_DgRQRoKEex_M-5bAmrZV8Npw_0lpi9QD0G9qvqKTB4p_W3onU0ct6P4zErZ7XlnQCw6OgXLpxRLqEr1R0UIXHLVYvIdNiQY4RLmV_IuGT8h2AbZoiPrWECHopM6fM_h5vfYZJrneVo2Z264ioEucDi_cFpGFMTpFOapcrC8FtjM2ml3UbKSJA_1N_WThPHi4dDS8poYdEAjsUHQnwAj6YFe8_1iTANVw-DZ-n6xrEUuBHBwqmVVuBZKx4myTDMdZ2agSjl6LunOkGtm-djvopKIh2nYN9Q4-755FL7eq9kaf5V0H3HsgbORi3kcyQHiXjUoWRQhpd9xFHnPKnQROMQarD5BxryW-hdBf7nWN-JacMorcQTcTCD6hMImkcx1yWZyoZRMGdttf6f9R8BctJJlzYA7Trhn_TjbCZUYTKiCXZQNH-qWqFGFHhkydA5yat3MOKqMaj_UlzSbre0ykePOmpKCKKC9_JddZnU5l1znH5EzzncMFATu5L4x6QgBk2b6Qexstq0-tH8Lbf5GDHzxrXQaaJM2K2vh95oqFtU2csZ1ISKlpVLz5feZm6yGKgMLJ6U85rcc=w640-h426-no" alt></p><h2 id="「周りの人を幸せにするモノをつくるプログラマになって欲しい」"><a href="#「周りの人を幸せにするモノをつくるプログラマになって欲しい」" class="headerlink" title="「周りの人を幸せにするモノをつくるプログラマになって欲しい」"></a>「周りの人を幸せにするモノをつくるプログラマになって欲しい」</h2><p>憧れの日本マイクロソフトでひとときを過ごしたシュン君。最後に訪問の最大の目的だった「どうすれば、VisualStudioのような開発環境を作る仕事に就けるのですか」という質問を投げかけた。</p><p>その問いに砂金氏は「さっきも言ったかもしれないけど、Visual Studioは数千人の人たちで作っているんだ。その開発者の多くはインドやアメリカの人たち。日本人のプログラマは少ないので、僕たちはもっと増やしていきたいと思っている。そして日本でも開発ができるようにしたい。だからシュン君もさらに勉強をして、世界トップクラスのプログラマを目指してくださいね」</p><p><img src="https://lh3.googleusercontent.com/ZH11d0iR2-H4cGqipB9A9E-UjIpN5locRMnaJhI8dSvBIva4OhzfDzv1cZ--d15QNdJLWGsChWO7np1JBgIIhI91mTulsUnjHHHIo3zVxS98sLFmRoYKBclIocv9UQFA8d2rbTzEGev0eyYOQkttxgauwyJQcQA5U8TAAYut_fiEXLD0m3350gu0YF5x0CJXgQpSBib29uyKC2PrWg3AiSGcd7luyBRIlu6vM8xs8VW4-dhHLvaTorMdkdpmglUQLhsKMpqEM2Sthkn75nQgr9C38xaJ4oWod8AyqQpNtG9EUyfUn9TxM93hHZ14FwqE99AFa6B6FjYoCQdDl9J72sjrjqAR9WbwyEGOKl8L1VWJg2CMjeu7U02d-IzRIIgsleAUu3EA8XHLVOYAOhoXpeDk5u9g4co5UpH58EnJrdtL16-LXTkP0vV6c3pTIG-OzL_4mrMxJAPa7jsWQFzn_cYWuskp_6Er-2kU81FpOD49YU4GuGtQwM3GwNoL_xQ1ofiltCcQM3rWDxF2Ivvvm_l957-0xWRq-4pip7Hrm5uV5xSh2AJTDihhtwPeVcDsaeUjpA8gk_KfA-vUbzWoOkc26blnkGhFAv-Z4Gk=w640-h394-no" alt></p><p>砂金氏の回答に、「そうなるためには、何を勉強して、何を身に付ければいいですか」と、シュン君はさらに突っ込んだ質問を繰り出した。それに対し高橋氏は「一つのソフトを作るのに数百人、場合によっては千人を超える人が携わっている。開発作業を効率的にし、良いアプリを作っていくためにはプログラミング能力だけでなく、コミュニケーション能力が求められるんだ」と答えた。</p><p><img src="https://lh3.googleusercontent.com/qSk3CQ1ayuxfM97FtVNg_FxoxBF8v6vs141X3pZ2_eLK1w8OD0CUvJ5Flpw1icxJd7hYhTkZkSKrWwQg3zIT19GRyJw7fhH4DzBIxUvTBWPnN-eefsLWv5XQft7v0GBbrzYBIWpM1cgQWZ3HJNYTjIuugTOP3qpHEcp6mqg6qrP9L2KzJmUhsCGCRvyBPQLcz86X1MhR_Lt0iUUDkm2drlNrz05OQqhwaRbtGqUXwVxoZr3A4rV6uc8Evin0rHLLz0NQ_D6H3ydDnbWaQOVJ3Zq6T4ohh-oWsRG0byYzOChANzdgBhBWNvsClWdHJw0FxhEPMXWJ8VO5j0e9DA-A3U2JN8cCwXPLlRoBXRon58Q9TO3-cq0616FA7-6vwNSsuulcJnGwZBSXLHmTFcHkUJCnYuEXGQv6MkmUsJPhSdI7l8WpdpVDZzj7DFWbXLVO2lF_YoFp_hW3btVhrPFRSRJ9LR4t-Y94iOch7HkvTHFhKrYLpyY2LXnrdOAlee5E_Z3AUCM17n0P-_mH6Is1nkyBoNJY89yRNKffb0GplLD0MmUmlVwVwFJhPP_all0XqzASi5opC-KUrsnTysNhmrUY43DFAG547mhnhJU=w640-h426-no" alt></p><p>「コミュニケーション能力？」と、ちょっと頭をひねるシュン君に、砂金氏は「例えば英語もその一つ。いいプログラムを書くと世界中から問い合わせやプログラミングの提案がくるんだ。そのときに英語ができないと、せっかくのチャンスを失うかもしれない。もったいでしょ」と話す。</p><p>続けて砂金氏は「世界トップクラスのプログラマになるには、勉強よりも心構えが大事かもしれないね。例えばシュン君がどんなアプリを作っていいのか悩むことがあったとしよう。そのときは自分が困っていることから広げて、周りの人を幸せにするのはどんなモノかを考えて欲しい。例えばお母さんが買い物に困っているなら、それを便利にするアプリとか。常に人に喜ばれるモノを作ることを心がけることが大事だと思う」とアドバイス。</p><p>そんな砂金氏、高橋氏の話に、シュン君は真剣な表情で聞き入っていた。最後にシュン君の感想を紹介したい。</p><p>「未来のパソコンはマウスやキーボードがなく、人の動作を認識して動くものなのかなと思いました。動きを使ったアプリなどを作りたいです。頑張って勉強して、Kinectのアプリを作ってみます。プログラミングも大事だけれど、それをどう活かすかのアイデアも大事なのですね。そのために、学校の勉強、本を読むことも大切にしなければいけないと教えていただいたので、学校の勉強もしっかりします！」</p><p>こうして日本マイクロソフト社での、非常に有意義な経験をし、視野がぐっと広がった様子のシュン君。数年後には次代を担うソフト開発者になっているのだろう。そのときはどんなソフトを作っているのだろうか。ぜひ、インタービューしたいものだ。</p><p><img src="https://lh3.googleusercontent.com/YvAReGztD8g4GMHVgLXbRlk-F5UsiDC-FYO2HmJ11Uec6KmY74PWEPjfyH2mbMH1elU3RiITkyZYppwPyoHMJTp89ngtrli-NMUK-NItWb9p_0SAk97gybnR4Bg0LweK4IAUihTAYkm3_Ll7GYCudGG_2q324xSOpD7ryAevlbtp94clixIn0EBZZlwDRItf5JFozbnkICWPt4JLQcVRyfgRClzaYZ5f0EBJyA9Sa7LIJdXx5uIrFsgJtWzb3B252eXCd-vTql-BngJu0XA7gQ-o7ct-eK9CPTkP7CTwdlQu2gF1ssZ5CVliCEEjFgaPhZuw4xDMs8Gq3nwGNWPrfEi3GmUXZEg0Wj-rDbsaZ5VtTMnkm0imONsWHQRgG8X8cC9FPHL7k8e6g0fknWd3Z7NuklwIV9aTjgfbuQ_OsXBOECIai2ayLuAjLTTioepC3UDGpjS2I7klzDTmqFcmAmXSH3qURKvUnvDrTyD8iJW7-SBsndQMeECw5-z7sd4aM0_NybFkC4W6Kcx_EQQq58kkw55FCSox3tx6yqGhhzMxrZCrwVFQLgNYz1Pibq4ffy_Xfn_nFe50b9-7a9Cyi4uwQOFdtFY_Eitkw24=w640-h426-no" alt></p><p>（執筆：中村仁美／撮影：平山諭）</p>]]></content>
      
      
      
        <tags>
            
            <tag> from-codeiq </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>このサイトでは、主にWebプログラミング、Unity、.NETについての</p><p>「ハマった」ところ、ポイントなどの、開発に役立つTipsを公開していきたいと思います。</p><h2 id="管理人"><a href="#管理人" class="headerlink" title="管理人"></a>管理人</h2><p><img src="https://farm5.staticflickr.com/4685/24557689617_9b8ac248cc_m_d.jpg" alt></p><p>shundroid</p><p>詳しくは<a href="http://wp.me/P5YCU7-l" target="_blank" rel="noopener">プロフィールページ</a>をご覧ください</p><h2 id="名称の由来"><a href="#名称の由来" class="headerlink" title="名称の由来"></a>名称の由来</h2><p><br><br><span style="font-family: 'Press Start 2P', cursive; font-size: 100px;">*.*</span></p><p>この記号に見覚えはありませんか？</p><p><img src="https://c1.staticflickr.com/5/4593/24557677937_61db251e0f_m.jpg" alt></p><p>Windows を使っている方はなじみが深いかもしれませんね。<br>すべてのファイルを表す、「<code>*.*</code>」です。<br>最初の <code>*</code> がファイル名がなんでもいい、というのを表しており、<br>2番目の <code>*</code> が拡張子がなんでもいい、というのを表しています。</p><p>つまり、<strong>なんでもいいのです</strong>。</p><p>*（アスタリスク）が２つあるので、「asterisks」とも表しています。</p><p>ちなみに昔は「asterisk.js（*.js）」でした。<br>JavaScript に関する情報をなんでも届けたい、と思っていましたが、<br>だんだん Unity とかゲームのこととかも増えてきたので、いっそ *.* にした次第です。</p><p>ぼくにはこれが<strong>顔文字に見えて仕方ありません</strong>。</p><h2 id="更新情報"><a href="#更新情報" class="headerlink" title="更新情報"></a>更新情報</h2><table><thead><tr><th>日付</th><th>内容</th></tr></thead><tbody><tr><td>2018-xx-xx</td><td>Hexo へ移転・第二次名称変更（*.js→*.*）</td></tr><tr><td>2016-01-10頃</td><td>第一次名称変更</td></tr><tr><td>2016-01-01</td><td>Lolipop! サーバーへ移転</td></tr><tr><td>2015-12-30</td><td>Tumblr にてブログ開始</td></tr></tbody></table>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Search result</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[<div id="plugin-search-result"></div><script>+function() {  const searchResult = document.getElementById("plugin-search-result")  searchResult.textContent = 'Loading...'  fetchData('/search.xml').then(document => {    const entries = analyzeData(document, getSearchQueryFromUrlParams())    searchResult.innerHTML = makeSearchResult(entries)  })  function fetchData (fetchUrl) {    return new Promise(resolve => {      const xhr = new XMLHttpRequest()      xhr.open('GET', fetchUrl, true)      xhr.responseType = 'document'      xhr.overrideMimeType('text/xml')      xhr.onreadystatechange = () => {        if (xhr.readyState === xhr.DONE) {          if (xhr.status === 200 || xhr.status === 304) {            resolve(xhr.response)          }        }      }      xhr.send(null)    })  }  function analyzeData(document, query) {    const entries = document.getElementsByTagName('entry')    const matchEntries = []    for (var entry of entries) {      const regExp = new RegExp(query)      if (regExp.test(entry.children[0].textContent) ||          regExp.test(entry.children[2].textContent)) {        matchEntries.push(entry)      }    }    return matchEntries  }  function makeSearchResult (entries) {    let innerHTML = ''    for (let entry of entries) {      innerHTML += '<div class="search-result-entry">'      const title = entry.children[0].textContent      const url = entry.children[1].textContent      const content = entry.children[2].textContent      innerHTML += '<h2><a href="' + url + '">' + title + '</a></h2>'      const thumbnail = /<img[^>]*>/.exec(content)      if (thumbnail && thumbnail.length >= 1) {        innerHTML += '<div class="search-result-thumbnail">' + thumbnail[0] + '</div>'      }      innerHTML += content.replace(/<[^>]*>/g, '').substring(0, 300)      innerHTML += '...</div>'    }    return innerHTML  }  function getSearchQueryFromUrlParams () {    const params = window.location.search.substring(1).split('&')    const search = params.filter(param => param.search(/$search=/))    return search.length > 0 ? search[0].split('=')[1] : null  }}()</script><style>.search-result-thumbnail img {  width: 200px;}.search-result-thumbnail {  float: left;  margin-right: 10px;}.search-result-entry {  clear: left;}@media screen and (max-width: 768px) {  .search-result-thumbnail {    float: none;    margin-right: 0;  }}</style><style>.article-info {  display: none;}.toc-article {  display: none;}</style>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>プロフィール</title>
      <link href="/profile/index.html"/>
      <url>/profile/index.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://farm5.staticflickr.com/4667/39297562435_28c17bcf44_o_d.png" alt></p><h2 id="shundroid"><a href="#shundroid" class="headerlink" title="shundroid"></a>shundroid</h2><p>2002年10月15日生まれ。東京都内在住の高校生です。<br>コンピュータやロボットのプログラミングが好きで、小学校高学年のころから様々なイベントに参加し、技術を学んできました。<br>最近はボランティアで、Web 技術を広めるための小学生向けワークショップを開催したり、アプリを開発したりしています。<br><span style="font-size: 40%">（実は絶対音感を持っています。楽譜は読めません）</span></p><p>I was born on 15th October 2002. I’m a high school student in Tokyo.<br>I love computer / robotics programming, so I’ve joined various events to learn technologies since I was ten.<br>Recently, to help Web technologies spread I held the workshops for elementary school students and developed applications.<br><span style="font-size: 40%">In fact, I have perfect pitch but I cannot read musical scores.</span></p><h2 id="資格-Qualifications"><a href="#資格-Qualifications" class="headerlink" title="資格 / Qualifications"></a>資格 / Qualifications</h2><table><thead><tr><th>資格名 Qualification Name</th><th>級 Grade</th></tr></thead><tbody><tr><td>P検 ICT Proficiency Assessment</td><td>2級 Grade 2</td></tr><tr><td>ICTスキル検定 ICT Skill Verification</td><td>準１級 Grade Pre-1</td></tr><tr><td>英検 EIKEN</td><td>2級 Grade 2</td></tr></tbody></table><h2 id="リンク-Links"><a href="#リンク-Links" class="headerlink" title="リンク / Links"></a>リンク / Links</h2><p>2014年に、日本マイクロソフト本社を訪問させていただきました。<br>その時の記事は<a href="https://asterisks.netlify.com/2014/01/22/ms-first-visit/">こちら</a>です。</p><p>（CodeIQの終了に伴い記事が見られなくなっていたので、こちらに移転しました）</p><p>その他の記事の一部は、Web Archives から見ることができます。</p><ul><li><a href="https://web.archive.org/web/20170817001320/https://codeiq.jp/magazine/2015/04/23353/" target="_blank" rel="noopener">https://web.archive.org/web/20170817001320/https://codeiq.jp/magazine/2015/04/23353/</a></li><li><a href="https://web.archive.org/web/20170817111407/https://codeiq.jp/magazine/2015/04/23015/" target="_blank" rel="noopener">https://web.archive.org/web/20170817111407/https://codeiq.jp/magazine/2015/04/23015/</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Sitemap</title>
      <link href="/sitemap/index.html"/>
      <url>/sitemap/index.html</url>
      
        <content type="html"><![CDATA[<!-- SITEMAP CONTENT REPLACE POINT -->]]></content>
      
    </entry>
    
    
  
</search>
